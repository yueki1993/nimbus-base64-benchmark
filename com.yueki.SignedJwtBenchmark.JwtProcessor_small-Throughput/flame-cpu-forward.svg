<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (11,018 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.04%)</title><rect x="10.2" y="883.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (3 samples, 0.03%)</title><rect x="10.3" y="867.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,510 samples, 77.24%)</title><rect x="10.7" y="883.0" width="911.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,510 samples, 77.24%)</title><rect x="10.7" y="867.0" width="911.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,510 samples, 77.24%)</title><rect x="10.7" y="851.0" width="911.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,509 samples, 77.23%)</title><rect x="10.7" y="835.0" width="911.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="846.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,509 samples, 77.23%)</title><rect x="10.7" y="819.0" width="911.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="830.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,509 samples, 77.23%)</title><rect x="10.7" y="803.0" width="911.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="814.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,509 samples, 77.23%)</title><rect x="10.7" y="787.0" width="911.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.7" y="798.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,509 samples, 77.23%)</title><rect x="10.7" y="771.0" width="911.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="782.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,509 samples, 77.23%)</title><rect x="10.7" y="755.0" width="911.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="766.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,509 samples, 77.23%)</title><rect x="10.7" y="739.0" width="911.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.7" y="750.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,509 samples, 77.23%)</title><rect x="10.7" y="723.0" width="911.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="734.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,509 samples, 77.23%)</title><rect x="10.7" y="707.0" width="911.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="718.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_small_jmhTest.JwtProcessor_small_Throughput (8,509 samples, 77.23%)</title><rect x="10.7" y="691.0" width="911.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="702.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_small_jmhTest.JwtProcessor_small_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_small_jmhTest.JwtProcessor_small_thrpt_jmhStub (8,325 samples, 75.56%)</title><rect x="10.7" y="675.0" width="891.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="686.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_small_jmhTest.JwtProcessor_small_thrpt_jmhStub</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtProcessor_small (8,310 samples, 75.42%)</title><rect x="12.4" y="659.0" width="889.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.4" y="670.0">com/yueki/SignedJwtBenchmark.JwtProcessor_small</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (9 samples, 0.08%)</title><rect x="12.4" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="654.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet (8,301 samples, 75.34%)</title><rect x="13.3" y="643.0" width="889.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.3" y="654.0">com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (8,299 samples, 75.32%)</title><rect x="13.5" y="627.0" width="888.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="638.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/JWTParser.parse (586 samples, 5.32%)</title><rect x="13.6" y="611.0" width="62.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.6" y="622.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (29 samples, 0.26%)</title><rect x="14.3" y="595.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.3" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (6 samples, 0.05%)</title><rect x="14.3" y="579.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (19 samples, 0.17%)</title><rect x="14.9" y="579.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.9" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (19 samples, 0.17%)</title><rect x="14.9" y="563.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.10%)</title><rect x="15.8" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.05%)</title><rect x="15.8" y="531.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="16.4" y="531.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="16.4" y="515.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.03%)</title><rect x="17.1" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.1" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (121 samples, 1.10%)</title><rect x="17.4" y="595.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (101 samples, 0.92%)</title><rect x="17.5" y="579.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.5" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (101 samples, 0.92%)</title><rect x="17.5" y="563.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (42 samples, 0.38%)</title><rect x="21.8" y="547.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (18 samples, 0.16%)</title><rect x="26.3" y="547.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (18 samples, 0.16%)</title><rect x="26.3" y="531.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.3" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="26.5" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (4 samples, 0.04%)</title><rect x="26.8" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (9 samples, 0.08%)</title><rect x="27.2" y="515.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="27.7" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="27.7" y="483.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="27.7" y="467.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.7" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="27.7" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.7" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (4 samples, 0.04%)</title><rect x="27.8" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (19 samples, 0.17%)</title><rect x="28.3" y="579.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (5 samples, 0.05%)</title><rect x="28.3" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.13%)</title><rect x="28.8" y="563.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (12 samples, 0.11%)</title><rect x="29.1" y="547.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.06%)</title><rect x="29.6" y="531.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="29.6" y="515.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="29.6" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.6" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="29.6" y="483.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.6" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="29.6" y="467.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.6" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (7 samples, 0.06%)</title><rect x="29.6" y="451.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (6 samples, 0.05%)</title><rect x="29.7" y="435.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (95 samples, 0.86%)</title><rect x="30.3" y="595.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.3" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (93 samples, 0.84%)</title><rect x="30.6" y="579.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (89 samples, 0.81%)</title><rect x="31.0" y="563.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (88 samples, 0.80%)</title><rect x="31.1" y="547.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (88 samples, 0.80%)</title><rect x="31.1" y="531.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (83 samples, 0.75%)</title><rect x="31.2" y="515.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (78 samples, 0.71%)</title><rect x="31.7" y="499.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.7" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (42 samples, 0.38%)</title><rect x="32.3" y="483.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.3" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (39 samples, 0.35%)</title><rect x="32.6" y="467.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.6" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (3 samples, 0.03%)</title><rect x="32.7" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (29 samples, 0.26%)</title><rect x="33.0" y="451.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (11 samples, 0.10%)</title><rect x="34.2" y="435.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.2" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (5 samples, 0.05%)</title><rect x="35.6" y="435.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.6" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="36.1" y="451.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="36.1" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="36.1" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.1" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="36.2" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.2" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (21 samples, 0.19%)</title><rect x="36.8" y="483.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.8" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (5 samples, 0.05%)</title><rect x="36.9" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (6 samples, 0.05%)</title><rect x="37.4" y="467.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="37.4" y="451.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="37.5" y="435.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.5" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="37.6" y="419.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.6" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="38.1" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="38.1" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="38.5" y="467.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.07%)</title><rect x="39.2" y="483.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.06%)</title><rect x="39.3" y="467.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.05%)</title><rect x="39.5" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.5" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="40.1" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (330 samples, 3.00%)</title><rect x="40.5" y="595.0" width="35.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.5" y="606.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (32 samples, 0.29%)</title><rect x="40.6" y="579.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.14%)</title><rect x="41.1" y="563.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.12%)</title><rect x="41.3" y="547.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.12%)</title><rect x="42.7" y="563.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.10%)</title><rect x="42.9" y="547.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.08%)</title><rect x="43.1" y="531.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="44.1" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.1" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (290 samples, 2.63%)</title><rect x="44.5" y="579.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.5" y="590.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (289 samples, 2.62%)</title><rect x="44.6" y="563.0" width="30.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.6" y="574.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (285 samples, 2.59%)</title><rect x="44.8" y="547.0" width="30.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.8" y="558.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (264 samples, 2.40%)</title><rect x="45.2" y="531.0" width="28.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.2" y="542.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (179 samples, 1.62%)</title><rect x="45.2" y="515.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (118 samples, 1.07%)</title><rect x="45.2" y="499.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (11 samples, 0.10%)</title><rect x="46.5" y="483.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.5" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (4 samples, 0.04%)</title><rect x="46.5" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.5" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (5 samples, 0.05%)</title><rect x="46.9" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.05%)</title><rect x="46.9" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="47.1" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="47.1" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.1" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.build (7 samples, 0.06%)</title><rect x="47.7" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.7" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.&lt;init&gt; (5 samples, 0.05%)</title><rect x="47.9" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (77 samples, 0.70%)</title><rect x="48.6" y="483.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (3 samples, 0.03%)</title><rect x="48.7" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.7" y="478.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (73 samples, 0.66%)</title><rect x="49.0" y="467.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.0" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (71 samples, 0.64%)</title><rect x="49.2" y="451.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.2" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (8 samples, 0.07%)</title><rect x="49.7" y="435.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.7" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (8 samples, 0.07%)</title><rect x="49.7" y="419.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="50.3" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.3" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (5 samples, 0.05%)</title><rect x="50.6" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.6" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (5 samples, 0.05%)</title><rect x="50.6" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.6" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="50.6" y="403.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.6" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="50.8" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.8" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (43 samples, 0.39%)</title><rect x="51.3" y="435.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.3" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (8 samples, 0.07%)</title><rect x="51.4" y="419.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.4" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (7 samples, 0.06%)</title><rect x="51.6" y="403.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.05%)</title><rect x="51.7" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.7" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (24 samples, 0.22%)</title><rect x="52.3" y="419.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.3" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (19 samples, 0.17%)</title><rect x="52.3" y="403.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.3" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (13 samples, 0.12%)</title><rect x="52.5" y="387.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.5" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (9 samples, 0.08%)</title><rect x="52.8" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.8" y="382.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (3 samples, 0.03%)</title><rect x="53.5" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.5" y="366.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="53.9" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.9" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="54.3" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.3" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (10 samples, 0.09%)</title><rect x="54.9" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="55.1" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.1" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (5 samples, 0.05%)</title><rect x="55.4" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="55.4" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.4" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="56.2" y="435.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.06%)</title><rect x="57.0" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (7 samples, 0.06%)</title><rect x="57.0" y="467.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (7 samples, 0.06%)</title><rect x="57.0" y="451.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (61 samples, 0.55%)</title><rect x="57.9" y="499.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (61 samples, 0.55%)</title><rect x="57.9" y="483.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (12 samples, 0.11%)</title><rect x="57.9" y="467.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (12 samples, 0.11%)</title><rect x="57.9" y="451.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.9" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (12 samples, 0.11%)</title><rect x="57.9" y="435.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.03%)</title><rect x="58.8" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.8" y="430.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.03%)</title><rect x="58.8" y="403.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="61.8" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (49 samples, 0.44%)</title><rect x="59.2" y="467.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (49 samples, 0.44%)</title><rect x="59.2" y="451.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (48 samples, 0.44%)</title><rect x="59.3" y="435.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (30 samples, 0.27%)</title><rect x="61.2" y="419.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (29 samples, 0.26%)</title><rect x="61.3" y="403.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.3" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (16 samples, 0.15%)</title><rect x="61.5" y="387.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.5" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (14 samples, 0.13%)</title><rect x="61.7" y="371.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.7" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (10 samples, 0.09%)</title><rect x="61.7" y="355.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.7" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (5 samples, 0.05%)</title><rect x="62.3" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="62.5" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.5" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (6 samples, 0.05%)</title><rect x="63.2" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.2" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="63.4" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="63.4" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="63.4" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.4" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="63.4" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.4" y="334.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="63.4" y="307.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="66.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="64.0" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="64.1" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.1" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (85 samples, 0.77%)</title><rect x="64.4" y="515.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (74 samples, 0.67%)</title><rect x="64.5" y="499.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.5" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (74 samples, 0.67%)</title><rect x="64.5" y="483.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.5" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (38 samples, 0.34%)</title><rect x="66.8" y="467.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (11 samples, 0.10%)</title><rect x="70.8" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (11 samples, 0.10%)</title><rect x="70.8" y="451.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (7 samples, 0.06%)</title><rect x="70.9" y="435.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (3 samples, 0.03%)</title><rect x="71.7" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="71.7" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="71.7" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.7" y="414.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="71.7" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.09%)</title><rect x="72.4" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.06%)</title><rect x="72.4" y="483.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (5 samples, 0.05%)</title><rect x="72.4" y="467.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (5 samples, 0.05%)</title><rect x="72.4" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="72.4" y="435.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="72.4" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.4" y="430.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="72.4" y="403.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.4" y="414.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="72.4" y="387.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.4" y="398.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (3 samples, 0.03%)</title><rect x="72.7" y="371.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="73.2" y="483.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="76.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (13 samples, 0.12%)</title><rect x="73.5" y="531.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (6 samples, 0.05%)</title><rect x="74.3" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="74.4" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.4" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="75.0" y="531.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="78.0" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="75.5" y="579.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="78.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="76.1" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.1" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (7,712 samples, 69.99%)</title><rect x="76.4" y="611.0" width="825.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.4" y="622.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (7,711 samples, 69.99%)</title><rect x="76.4" y="595.0" width="825.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.4" y="606.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (6,310 samples, 57.27%)</title><rect x="77.3" y="579.0" width="675.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.3" y="590.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (23 samples, 0.21%)</title><rect x="77.4" y="563.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (23 samples, 0.21%)</title><rect x="77.4" y="547.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (23 samples, 0.21%)</title><rect x="77.4" y="531.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (5 samples, 0.05%)</title><rect x="77.6" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.6" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="77.7" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.7" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="77.7" y="483.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="80.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (14 samples, 0.13%)</title><rect x="78.2" y="515.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (6,286 samples, 57.05%)</title><rect x="79.8" y="563.0" width="673.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.8" y="574.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (40 samples, 0.36%)</title><rect x="80.1" y="547.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.1" y="558.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (40 samples, 0.36%)</title><rect x="80.1" y="531.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.05%)</title><rect x="80.3" y="515.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.05%)</title><rect x="80.4" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="80.6" y="483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="80.6" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.6" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (10 samples, 0.09%)</title><rect x="80.9" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.05%)</title><rect x="81.3" y="499.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="81.4" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.4" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (19 samples, 0.17%)</title><rect x="82.1" y="515.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.1" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (19 samples, 0.17%)</title><rect x="82.1" y="499.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.1" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (17 samples, 0.15%)</title><rect x="82.3" y="483.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.3" y="494.0"></text>
</g>
<g>
<title>java/security/Provider.getService (16 samples, 0.15%)</title><rect x="82.3" y="467.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.3" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.07%)</title><rect x="82.4" y="451.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.4" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (7 samples, 0.06%)</title><rect x="82.5" y="435.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (7 samples, 0.06%)</title><rect x="82.5" y="419.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (3 samples, 0.03%)</title><rect x="82.8" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.8" y="414.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (3 samples, 0.03%)</title><rect x="82.8" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.8" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (6 samples, 0.05%)</title><rect x="83.4" y="451.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.05%)</title><rect x="83.5" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.5" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (4 samples, 0.04%)</title><rect x="83.6" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.6" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.iterator (3 samples, 0.03%)</title><rect x="84.1" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.1" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="84.1" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (272 samples, 2.47%)</title><rect x="84.4" y="547.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.4" y="558.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (272 samples, 2.47%)</title><rect x="84.4" y="531.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.4" y="542.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (142 samples, 1.29%)</title><rect x="95.4" y="515.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (12 samples, 0.11%)</title><rect x="109.3" y="499.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (22 samples, 0.20%)</title><rect x="110.6" y="515.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.6" y="526.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (22 samples, 0.20%)</title><rect x="110.6" y="499.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (15 samples, 0.14%)</title><rect x="111.2" y="483.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.2" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="113.1" y="515.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.1" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (6 samples, 0.05%)</title><rect x="113.6" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.6" y="558.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (105 samples, 0.95%)</title><rect x="114.2" y="547.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.2" y="558.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (105 samples, 0.95%)</title><rect x="114.2" y="531.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.2" y="542.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (104 samples, 0.94%)</title><rect x="114.3" y="515.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.3" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (11 samples, 0.10%)</title><rect x="115.3" y="499.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.3" y="510.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (9 samples, 0.08%)</title><rect x="115.3" y="483.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (4 samples, 0.04%)</title><rect x="115.8" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.8" y="478.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (3 samples, 0.03%)</title><rect x="116.5" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.5" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (3 samples, 0.03%)</title><rect x="116.5" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.5" y="494.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (81 samples, 0.74%)</title><rect x="116.8" y="499.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.8" y="510.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (78 samples, 0.71%)</title><rect x="117.1" y="483.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.1" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (16 samples, 0.15%)</title><rect x="117.1" y="467.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (16 samples, 0.15%)</title><rect x="117.1" y="451.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (10 samples, 0.09%)</title><rect x="117.2" y="435.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (10 samples, 0.09%)</title><rect x="117.2" y="419.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.2" y="430.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (7 samples, 0.06%)</title><rect x="117.4" y="403.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.4" y="414.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (3 samples, 0.03%)</title><rect x="118.5" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.5" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (56 samples, 0.51%)</title><rect x="118.8" y="467.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.8" y="478.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (55 samples, 0.50%)</title><rect x="118.8" y="451.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.8" y="462.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (55 samples, 0.50%)</title><rect x="118.8" y="435.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.8" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (55 samples, 0.50%)</title><rect x="118.8" y="419.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.8" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (55 samples, 0.50%)</title><rect x="118.8" y="403.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.8" y="414.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (53 samples, 0.48%)</title><rect x="119.0" y="387.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.0" y="398.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (51 samples, 0.46%)</title><rect x="119.2" y="371.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.2" y="382.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (8 samples, 0.07%)</title><rect x="119.2" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.07%)</title><rect x="119.2" y="339.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.03%)</title><rect x="119.8" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.8" y="334.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (43 samples, 0.39%)</title><rect x="120.1" y="355.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.1" y="366.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (22 samples, 0.20%)</title><rect x="120.1" y="339.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.1" y="350.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (20 samples, 0.18%)</title><rect x="120.1" y="323.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (6 samples, 0.05%)</title><rect x="120.2" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (6 samples, 0.05%)</title><rect x="120.2" y="291.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (5 samples, 0.05%)</title><rect x="120.2" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.2" y="286.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (5 samples, 0.05%)</title><rect x="120.2" y="259.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.2" y="270.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (3 samples, 0.03%)</title><rect x="120.3" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.3" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.10%)</title><rect x="120.8" y="307.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.8" y="318.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.08%)</title><rect x="120.8" y="291.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.8" y="302.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (9 samples, 0.08%)</title><rect x="120.8" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.8" y="286.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="121.0" y="259.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="124.0" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.&lt;init&gt; (4 samples, 0.04%)</title><rect x="121.4" y="259.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.4" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.&lt;init&gt; (4 samples, 0.04%)</title><rect x="121.4" y="243.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.4" y="254.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (21 samples, 0.19%)</title><rect x="122.5" y="339.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.5" y="350.0"></text>
</g>
<g>
<title>java/security/Provider.getService (16 samples, 0.15%)</title><rect x="122.5" y="323.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.5" y="334.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (5 samples, 0.05%)</title><rect x="123.0" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.0" y="318.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (4 samples, 0.04%)</title><rect x="123.1" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (3 samples, 0.03%)</title><rect x="123.2" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.2" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (5 samples, 0.05%)</title><rect x="123.6" y="307.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.05%)</title><rect x="123.6" y="291.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.6" y="302.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (4 samples, 0.04%)</title><rect x="123.7" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.7" y="286.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (5 samples, 0.05%)</title><rect x="124.2" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.2" y="334.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (5 samples, 0.05%)</title><rect x="124.2" y="307.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.2" y="318.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (6 samples, 0.05%)</title><rect x="124.8" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.8" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.update (103 samples, 0.93%)</title><rect x="125.5" y="547.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.5" y="558.0"></text>
</g>
<g>
<title>java/security/Signature.update (102 samples, 0.93%)</title><rect x="125.6" y="531.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.6" y="542.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (101 samples, 0.92%)</title><rect x="125.7" y="515.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.7" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (100 samples, 0.91%)</title><rect x="125.8" y="499.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.8" y="510.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (100 samples, 0.91%)</title><rect x="125.8" y="483.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.8" y="494.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (100 samples, 0.91%)</title><rect x="125.8" y="467.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.8" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (100 samples, 0.91%)</title><rect x="125.8" y="451.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.8" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (98 samples, 0.89%)</title><rect x="126.0" y="435.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.0" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (96 samples, 0.87%)</title><rect x="126.2" y="419.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.2" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (8 samples, 0.07%)</title><rect x="134.7" y="403.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.7" y="414.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (9 samples, 0.08%)</title><rect x="135.5" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.5" y="414.0"></text>
</g>
<g>
<title>java/security/Signature.verify (5,757 samples, 52.25%)</title><rect x="136.5" y="547.0" width="616.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.5" y="558.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (5,754 samples, 52.22%)</title><rect x="136.8" y="531.0" width="616.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.8" y="542.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (5,753 samples, 52.21%)</title><rect x="136.9" y="515.0" width="616.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.9" y="526.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>java/security/MessageDigest.isEqual (4 samples, 0.04%)</title><rect x="137.3" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.3" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (3 samples, 0.03%)</title><rect x="137.9" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.9" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (5,004 samples, 45.42%)</title><rect x="138.3" y="499.0" width="535.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.3" y="510.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (5,004 samples, 45.42%)</title><rect x="138.3" y="483.0" width="535.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.3" y="494.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (4,927 samples, 44.72%)</title><rect x="138.3" y="467.0" width="527.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.3" y="478.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.compareTo (3 samples, 0.03%)</title><rect x="138.8" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.8" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.equals (8 samples, 0.07%)</title><rect x="139.2" y="451.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.2" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4 samples, 0.04%)</title><rect x="139.6" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.6" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4,911 samples, 44.57%)</title><rect x="140.0" y="451.0" width="526.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.0" y="462.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (271 samples, 2.46%)</title><rect x="146.4" y="435.0" width="29.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="149.4" y="446.0">Sh..</text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (259 samples, 2.35%)</title><rect x="147.7" y="419.0" width="27.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="150.7" y="430.0">m..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (3,404 samples, 30.89%)</title><rect x="175.5" y="435.0" width="364.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="178.5" y="446.0">SharedRuntime::montgomery_square(int*, int*, int, ..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3,311 samples, 30.05%)</title><rect x="185.4" y="419.0" width="354.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="188.4" y="430.0">montgomery_square(unsigned long*, unsigned long*..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.05%)</title><rect x="540.0" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="543.0" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.equals (4 samples, 0.04%)</title><rect x="540.7" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.7" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (11 samples, 0.10%)</title><rect x="541.1" y="435.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="541.6" y="419.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.6" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="541.6" y="403.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="544.6" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="541.6" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="398.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="541.6" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="382.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (3 samples, 0.03%)</title><rect x="541.6" y="355.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="544.6" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="541.6" y="339.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.6" y="350.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="542.0" y="419.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="545.0" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (233 samples, 2.11%)</title><rect x="542.3" y="435.0" width="24.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.3" y="446.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.addOne (223 samples, 2.02%)</title><rect x="542.9" y="419.0" width="23.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.9" y="430.0">j..</text>
</g>
<g>
<title>mulAdd (218 samples, 1.98%)</title><rect x="543.5" y="403.0" width="23.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="546.5" y="414.0">m..</text>
</g>
<g>
<title>java/math/BigInteger.mulAdd (4 samples, 0.04%)</title><rect x="566.8" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.8" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (268 samples, 2.43%)</title><rect x="567.4" y="435.0" width="28.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="570.4" y="446.0">ja..</text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="567.4" y="419.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="570.4" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (264 samples, 2.40%)</title><rect x="567.9" y="419.0" width="28.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.9" y="430.0">ja..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (260 samples, 2.36%)</title><rect x="567.9" y="403.0" width="27.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="570.9" y="414.0">S..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (249 samples, 2.26%)</title><rect x="569.0" y="387.0" width="26.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="572.0" y="398.0">m..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="595.7" y="403.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="598.7" y="414.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (593 samples, 5.38%)</title><rect x="596.3" y="435.0" width="63.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.3" y="446.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (592 samples, 5.37%)</title><rect x="596.4" y="419.0" width="63.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.4" y="430.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (592 samples, 5.37%)</title><rect x="596.4" y="403.0" width="63.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="599.4" y="414.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.clear (5 samples, 0.05%)</title><rect x="596.9" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.9" y="398.0"></text>
</g>
<g>
<title>arrayof_jint_fill (4 samples, 0.04%)</title><rect x="597.0" y="371.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="600.0" y="382.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (576 samples, 5.23%)</title><rect x="597.4" y="387.0" width="61.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="600.4" y="398.0">java/m..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (10 samples, 0.09%)</title><rect x="604.9" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.9" y="382.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (484 samples, 4.39%)</title><rect x="606.0" y="371.0" width="51.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.0" y="382.0">java/..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (5 samples, 0.05%)</title><rect x="657.8" y="371.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.8" y="382.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.unsignedLongCompare (4 samples, 0.04%)</title><rect x="658.4" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.4" y="382.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (6 samples, 0.05%)</title><rect x="659.1" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.1" y="398.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (5 samples, 0.05%)</title><rect x="660.0" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.0" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (8 samples, 0.07%)</title><rect x="660.5" y="435.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.5" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.10%)</title><rect x="661.4" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.4" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (3 samples, 0.03%)</title><rect x="661.6" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="664.6" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (6 samples, 0.05%)</title><rect x="661.9" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.9" y="430.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (22 samples, 0.20%)</title><rect x="662.8" y="435.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="665.8" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.07%)</title><rect x="665.1" y="435.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="668.1" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (11 samples, 0.10%)</title><rect x="666.0" y="467.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.0" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.bitLength (11 samples, 0.10%)</title><rect x="666.0" y="451.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.0" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (6 samples, 0.05%)</title><rect x="666.5" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.5" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (40 samples, 0.36%)</title><rect x="667.2" y="467.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.2" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (34 samples, 0.31%)</title><rect x="667.4" y="451.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.4" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (34 samples, 0.31%)</title><rect x="667.4" y="435.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.4" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (4 samples, 0.04%)</title><rect x="671.0" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.0" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (4 samples, 0.04%)</title><rect x="671.0" y="435.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.0" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (3 samples, 0.03%)</title><rect x="671.1" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.1" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (26 samples, 0.24%)</title><rect x="671.4" y="467.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.4" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (26 samples, 0.24%)</title><rect x="671.4" y="451.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.4" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.getInt (8 samples, 0.07%)</title><rect x="673.4" y="435.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="676.4" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.signInt (3 samples, 0.03%)</title><rect x="673.9" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.9" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (612 samples, 5.55%)</title><rect x="674.2" y="499.0" width="65.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.2" y="510.0">sun/sec..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (609 samples, 5.53%)</title><rect x="674.5" y="483.0" width="65.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.5" y="494.0">sun/sec..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (581 samples, 5.27%)</title><rect x="677.2" y="467.0" width="62.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.2" y="478.0">javax/..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (581 samples, 5.27%)</title><rect x="677.2" y="451.0" width="62.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="680.2" y="462.0">java/s..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (581 samples, 5.27%)</title><rect x="677.2" y="435.0" width="62.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.2" y="446.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (581 samples, 5.27%)</title><rect x="677.2" y="419.0" width="62.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="680.2" y="430.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (580 samples, 5.26%)</title><rect x="677.3" y="403.0" width="62.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.3" y="414.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (576 samples, 5.23%)</title><rect x="677.8" y="387.0" width="61.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.8" y="398.0">java/l..</text>
</g>
<g>
<title>JVM_FillInStackTrace (3 samples, 0.03%)</title><rect x="680.0" y="371.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="683.0" y="382.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (551 samples, 5.00%)</title><rect x="680.3" y="371.0" width="59.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="683.3" y="382.0">Java_j..</text>
</g>
<g>
<title>JVM_FillInStackTrace (539 samples, 4.89%)</title><rect x="680.6" y="355.0" width="57.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="683.6" y="366.0">JVM_Fi..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.05%)</title><rect x="680.9" y="339.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.9" y="350.0"></text>
</g>
<g>
<title>JavaThread::active() (5 samples, 0.05%)</title><rect x="681.6" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="684.6" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.05%)</title><rect x="682.7" y="339.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="685.7" y="350.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (3 samples, 0.03%)</title><rect x="683.3" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="686.3" y="350.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (510 samples, 4.63%)</title><rect x="683.6" y="339.0" width="54.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="686.6" y="350.0">java_..</text>
</g>
<g>
<title>CompressedReadStream::read_int() (5 samples, 0.05%)</title><rect x="683.8" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.8" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.06%)</title><rect x="684.5" y="323.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="687.5" y="334.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="685.7" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="688.7" y="334.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (475 samples, 4.31%)</title><rect x="686.6" y="323.0" width="50.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.6" y="334.0">java_..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (43 samples, 0.39%)</title><rect x="697.0" y="307.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="700.0" y="318.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (38 samples, 0.34%)</title><rect x="697.2" y="291.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="700.2" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (11 samples, 0.10%)</title><rect x="697.5" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.5" y="286.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (4 samples, 0.04%)</title><rect x="698.2" y="259.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="701.2" y="270.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.03%)</title><rect x="698.6" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.6" y="286.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (3 samples, 0.03%)</title><rect x="698.6" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="701.6" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.15%)</title><rect x="699.0" y="275.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="702.0" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (7 samples, 0.06%)</title><rect x="700.0" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="703.0" y="270.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (3 samples, 0.03%)</title><rect x="700.8" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.8" y="286.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (3 samples, 0.03%)</title><rect x="701.6" y="307.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="704.6" y="318.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (120 samples, 1.09%)</title><rect x="702.0" y="307.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="705.0" y="318.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (5 samples, 0.05%)</title><rect x="714.3" y="291.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="717.3" y="302.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (5 samples, 0.05%)</title><rect x="714.9" y="307.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.9" y="318.0"></text>
</g>
<g>
<title>JDK_Version::current() (3 samples, 0.03%)</title><rect x="715.5" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.5" y="318.0"></text>
</g>
<g>
<title>JDK_Version::is_gte_jdk14x_version() (3 samples, 0.03%)</title><rect x="715.8" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="718.8" y="318.0"></text>
</g>
<g>
<title>JDK_Version::current() (3 samples, 0.03%)</title><rect x="715.8" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="718.8" y="302.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (25 samples, 0.23%)</title><rect x="716.2" y="307.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.2" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.15%)</title><rect x="716.3" y="291.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.3" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (13 samples, 0.12%)</title><rect x="716.3" y="275.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.3" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (10 samples, 0.09%)</title><rect x="716.6" y="259.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="719.6" y="270.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (3 samples, 0.03%)</title><rect x="718.1" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.1" y="302.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.04%)</title><rect x="718.4" y="291.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.4" y="302.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (15 samples, 0.14%)</title><rect x="718.9" y="307.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="721.9" y="318.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (21 samples, 0.19%)</title><rect x="720.5" y="307.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.5" y="318.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="722.8" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="725.8" y="318.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (8 samples, 0.07%)</title><rect x="723.4" y="307.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="726.4" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (97 samples, 0.88%)</title><rect x="724.2" y="307.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.2" y="318.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (59 samples, 0.54%)</title><rect x="724.9" y="291.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.9" y="302.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.04%)</title><rect x="725.7" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="728.7" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (43 samples, 0.39%)</title><rect x="726.2" y="275.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="729.2" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (33 samples, 0.30%)</title><rect x="726.2" y="259.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="729.2" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (32 samples, 0.29%)</title><rect x="726.3" y="243.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="729.3" y="254.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (10 samples, 0.09%)</title><rect x="729.7" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="732.7" y="270.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (4 samples, 0.04%)</title><rect x="730.8" y="275.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.8" y="286.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (6 samples, 0.05%)</title><rect x="731.2" y="291.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.2" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.04%)</title><rect x="731.4" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="734.4" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.04%)</title><rect x="731.4" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="734.4" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.04%)</title><rect x="731.4" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="734.4" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (26 samples, 0.24%)</title><rect x="731.8" y="291.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="734.8" y="302.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (3 samples, 0.03%)</title><rect x="732.5" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="735.5" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (15 samples, 0.14%)</title><rect x="732.9" y="275.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="735.9" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (13 samples, 0.12%)</title><rect x="733.1" y="259.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.1" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (13 samples, 0.12%)</title><rect x="733.1" y="243.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="736.1" y="254.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (11 samples, 0.10%)</title><rect x="735.3" y="307.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="738.3" y="318.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (10 samples, 0.09%)</title><rect x="735.4" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.4" y="302.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (5 samples, 0.05%)</title><rect x="736.8" y="307.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="739.8" y="318.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc(unsigned char*, bool) (4 samples, 0.04%)</title><rect x="737.5" y="323.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.5" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.03%)</title><rect x="738.4" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="741.4" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.04%)</title><rect x="738.7" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.7" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (83 samples, 0.75%)</title><rect x="739.8" y="499.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.8" y="510.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (38 samples, 0.34%)</title><rect x="740.0" y="483.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="743.0" y="494.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="740.0" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.0" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (35 samples, 0.32%)</title><rect x="740.3" y="467.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.3" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (21 samples, 0.19%)</title><rect x="741.6" y="451.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.6" y="462.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (21 samples, 0.19%)</title><rect x="741.6" y="435.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="744.6" y="446.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (18 samples, 0.16%)</title><rect x="741.8" y="419.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.8" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.05%)</title><rect x="742.5" y="403.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.5" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="743.3" y="403.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="746.3" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (3 samples, 0.03%)</title><rect x="744.0" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.0" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (4 samples, 0.04%)</title><rect x="744.4" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.4" y="494.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.equals (7 samples, 0.06%)</title><rect x="744.8" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.8" y="494.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (29 samples, 0.26%)</title><rect x="745.5" y="483.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.5" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (12 samples, 0.11%)</title><rect x="745.9" y="467.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.9" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (12 samples, 0.11%)</title><rect x="745.9" y="451.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.9" y="462.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="746.0" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="749.0" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (6 samples, 0.05%)</title><rect x="746.4" y="435.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.4" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (14 samples, 0.13%)</title><rect x="747.2" y="467.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="750.2" y="478.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (13 samples, 0.12%)</title><rect x="747.3" y="451.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.3" y="462.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (5 samples, 0.05%)</title><rect x="748.0" y="435.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.0" y="446.0"></text>
</g>
<g>
<title>java/io/InputStream.read (4 samples, 0.04%)</title><rect x="748.1" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.1" y="430.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (4 samples, 0.04%)</title><rect x="748.1" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.1" y="414.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (41 samples, 0.37%)</title><rect x="748.7" y="499.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.7" y="510.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (40 samples, 0.36%)</title><rect x="748.8" y="483.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.8" y="494.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (40 samples, 0.36%)</title><rect x="748.8" y="467.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.8" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (37 samples, 0.34%)</title><rect x="749.1" y="451.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.1" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (36 samples, 0.33%)</title><rect x="749.2" y="435.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.2" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (35 samples, 0.32%)</title><rect x="749.3" y="419.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.3" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (9 samples, 0.08%)</title><rect x="749.6" y="403.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.6" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="749.8" y="387.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="752.8" y="398.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (23 samples, 0.21%)</title><rect x="750.6" y="403.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="753.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/factories/DefaultJWSVerifierFactory.createJWSVerifier (95 samples, 0.86%)</title><rect x="753.0" y="579.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (3 samples, 0.03%)</title><rect x="753.3" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.3" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (3 samples, 0.03%)</title><rect x="753.3" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="756.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jca/JCAContext.getSecureRandom (71 samples, 0.64%)</title><rect x="753.6" y="563.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.6" y="574.0"></text>
</g>
<g>
<title>java/security/SecureRandom.&lt;init&gt; (70 samples, 0.64%)</title><rect x="753.6" y="547.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.6" y="558.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getDefaultPRNG (69 samples, 0.63%)</title><rect x="753.6" y="531.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.6" y="542.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getInstance (52 samples, 0.47%)</title><rect x="753.6" y="515.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.6" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (51 samples, 0.46%)</title><rect x="753.7" y="499.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.7" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (13 samples, 0.12%)</title><rect x="753.7" y="483.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.7" y="494.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (13 samples, 0.12%)</title><rect x="753.7" y="467.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.7" y="478.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (8 samples, 0.07%)</title><rect x="753.7" y="451.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (7 samples, 0.06%)</title><rect x="753.7" y="435.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.7" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (4 samples, 0.04%)</title><rect x="753.7" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (4 samples, 0.04%)</title><rect x="753.7" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="756.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="754.6" y="451.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="754.6" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.6" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (38 samples, 0.34%)</title><rect x="755.1" y="483.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.1" y="494.0"></text>
</g>
<g>
<title>java/security/Provider.getService (37 samples, 0.34%)</title><rect x="755.1" y="467.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.1" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (27 samples, 0.25%)</title><rect x="755.2" y="451.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.2" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (27 samples, 0.25%)</title><rect x="755.2" y="435.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (27 samples, 0.25%)</title><rect x="755.2" y="419.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (4 samples, 0.04%)</title><rect x="756.6" y="403.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.6" y="414.0"></text>
</g>
<g>
<title>java/util/Locale.getLanguage (7 samples, 0.06%)</title><rect x="757.0" y="403.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.0" y="414.0"></text>
</g>
<g>
<title>sun/util/locale/BaseLocale.getLanguage (7 samples, 0.06%)</title><rect x="757.0" y="387.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.0" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="757.8" y="403.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="760.8" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 0.08%)</title><rect x="758.1" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.05%)</title><rect x="758.2" y="435.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.2" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (3 samples, 0.03%)</title><rect x="758.5" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.5" y="430.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getPrngAlgorithm (17 samples, 0.15%)</title><rect x="759.1" y="515.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.1" y="526.0"></text>
</g>
<g>
<title>java/security/Provider.getServices (4 samples, 0.04%)</title><rect x="759.3" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.3" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.next (3 samples, 0.03%)</title><rect x="759.7" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.7" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$3.get (3 samples, 0.03%)</title><rect x="759.7" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.7" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$3.get (3 samples, 0.03%)</title><rect x="759.7" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.7" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="759.7" y="451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.7" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="759.7" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.7" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (4 samples, 0.04%)</title><rect x="760.3" y="499.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.3" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="760.4" y="483.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.03%)</title><rect x="760.4" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.4" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (18 samples, 0.16%)</title><rect x="761.3" y="563.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (5 samples, 0.05%)</title><rect x="761.4" y="547.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (5 samples, 0.05%)</title><rect x="761.4" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="764.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (5 samples, 0.05%)</title><rect x="761.4" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="764.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="761.4" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (3 samples, 0.03%)</title><rect x="761.5" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (12 samples, 0.11%)</title><rect x="761.9" y="547.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="764.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (11 samples, 0.10%)</title><rect x="762.0" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.07%)</title><rect x="762.0" y="515.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="765.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (4 samples, 0.04%)</title><rect x="762.5" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="762.9" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="765.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.extractJWTClaimsSet (500 samples, 4.54%)</title><rect x="763.2" y="579.0" width="53.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.2" y="590.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (499 samples, 4.53%)</title><rect x="763.3" y="563.0" width="53.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.3" y="574.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (405 samples, 3.68%)</title><rect x="763.3" y="547.0" width="43.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.3" y="558.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (212 samples, 1.92%)</title><rect x="763.6" y="531.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.6" y="542.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (209 samples, 1.90%)</title><rect x="763.9" y="515.0" width="22.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="766.9" y="526.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (191 samples, 1.73%)</title><rect x="763.9" y="499.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (191 samples, 1.73%)</title><rect x="763.9" y="483.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="766.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (108 samples, 0.98%)</title><rect x="770.6" y="467.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.6" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (6 samples, 0.05%)</title><rect x="781.5" y="451.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (18 samples, 0.16%)</title><rect x="782.2" y="467.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (18 samples, 0.16%)</title><rect x="782.2" y="451.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (10 samples, 0.09%)</title><rect x="782.6" y="435.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="783.7" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="783.7" y="419.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="783.7" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.7" y="414.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="783.7" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="786.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 0.16%)</title><rect x="784.3" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 0.16%)</title><rect x="784.3" y="483.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (15 samples, 0.14%)</title><rect x="784.6" y="467.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="787.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (7 samples, 0.06%)</title><rect x="785.0" y="451.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (4 samples, 0.04%)</title><rect x="785.7" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (190 samples, 1.72%)</title><rect x="786.3" y="531.0" width="20.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (186 samples, 1.69%)</title><rect x="786.8" y="515.0" width="19.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.8" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (12 samples, 0.11%)</title><rect x="786.9" y="499.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (12 samples, 0.11%)</title><rect x="786.9" y="483.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (12 samples, 0.11%)</title><rect x="786.9" y="467.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (3 samples, 0.03%)</title><rect x="787.8" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="790.8" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (173 samples, 1.57%)</title><rect x="788.2" y="499.0" width="18.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (173 samples, 1.57%)</title><rect x="788.2" y="483.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (173 samples, 1.57%)</title><rect x="788.2" y="467.0" width="18.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (168 samples, 1.52%)</title><rect x="788.3" y="451.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (168 samples, 1.52%)</title><rect x="788.3" y="435.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (134 samples, 1.22%)</title><rect x="788.7" y="419.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.7" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (14 samples, 0.13%)</title><rect x="789.6" y="403.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.skipDigits (3 samples, 0.03%)</title><rect x="790.1" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.1" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.readS (3 samples, 0.03%)</title><rect x="790.1" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.1" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (6 samples, 0.05%)</title><rect x="790.4" y="387.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.4" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="790.5" y="371.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="790.5" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.5" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (112 samples, 1.02%)</title><rect x="791.1" y="403.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.1" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (93 samples, 0.84%)</title><rect x="791.2" y="387.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.2" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (42 samples, 0.38%)</title><rect x="793.1" y="371.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.1" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="797.1" y="355.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="800.1" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (6 samples, 0.05%)</title><rect x="797.6" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="800.6" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="797.8" y="355.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="800.8" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (27 samples, 0.25%)</title><rect x="798.2" y="371.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (14 samples, 0.13%)</title><rect x="799.6" y="355.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.6" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (6 samples, 0.05%)</title><rect x="801.1" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="801.1" y="371.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="801.5" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.5" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="801.5" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.5" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="801.5" y="323.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="804.5" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="801.8" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="801.8" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="802.2" y="387.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="802.2" y="371.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.2" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (16 samples, 0.15%)</title><rect x="803.1" y="419.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.1" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (3 samples, 0.03%)</title><rect x="803.4" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.4" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (8 samples, 0.07%)</title><rect x="803.7" y="403.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="803.8" y="387.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="804.1" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.1" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="804.1" y="355.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.12%)</title><rect x="804.9" y="419.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.11%)</title><rect x="805.0" y="403.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.05%)</title><rect x="805.6" y="387.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.6" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="806.3" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (94 samples, 0.85%)</title><rect x="806.7" y="547.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (7 samples, 0.06%)</title><rect x="807.6" y="531.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.6" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (7 samples, 0.06%)</title><rect x="807.6" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="810.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.05%)</title><rect x="808.3" y="531.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="808.6" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (30 samples, 0.27%)</title><rect x="808.9" y="531.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.9" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (30 samples, 0.27%)</title><rect x="808.9" y="515.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (30 samples, 0.27%)</title><rect x="808.9" y="499.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (29 samples, 0.26%)</title><rect x="808.9" y="483.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="811.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (28 samples, 0.25%)</title><rect x="809.1" y="467.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.11%)</title><rect x="809.7" y="451.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="810.0" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.0" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (6 samples, 0.05%)</title><rect x="810.3" y="435.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.3" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (5 samples, 0.05%)</title><rect x="811.2" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.04%)</title><rect x="811.3" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.3" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="811.7" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (7 samples, 0.06%)</title><rect x="812.2" y="531.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.06%)</title><rect x="812.2" y="515.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="812.2" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="812.2" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="815.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (6 samples, 0.05%)</title><rect x="812.9" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.05%)</title><rect x="813.0" y="515.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="813.1" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (15 samples, 0.14%)</title><rect x="813.6" y="531.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (15 samples, 0.14%)</title><rect x="813.6" y="515.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 0.14%)</title><rect x="813.6" y="499.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.6" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="814.6" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (9 samples, 0.08%)</title><rect x="815.2" y="531.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="818.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.08%)</title><rect x="815.2" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.08%)</title><rect x="815.2" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.2" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="815.8" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.04%)</title><rect x="816.1" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.04%)</title><rect x="816.1" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="819.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.selectKeys (721 samples, 6.54%)</title><rect x="816.8" y="579.0" width="77.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.8" y="590.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.selectJWSKeys (720 samples, 6.53%)</title><rect x="816.9" y="563.0" width="77.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.9" y="574.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyConverter.toJavaKeys (590 samples, 5.35%)</title><rect x="817.5" y="547.0" width="63.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="820.5" y="558.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toKeyPair (577 samples, 5.24%)</title><rect x="818.3" y="531.0" width="61.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.3" y="542.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toRSAPublicKey (576 samples, 5.23%)</title><rect x="818.4" y="515.0" width="61.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.4" y="526.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToBigInteger (338 samples, 3.07%)</title><rect x="818.5" y="499.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.5" y="510.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (322 samples, 2.92%)</title><rect x="818.6" y="483.0" width="34.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.6" y="494.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (322 samples, 2.92%)</title><rect x="818.6" y="467.0" width="34.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.6" y="478.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (153 samples, 1.39%)</title><rect x="831.8" y="451.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.8" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (4 samples, 0.04%)</title><rect x="847.7" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (39 samples, 0.35%)</title><rect x="848.1" y="451.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="851.1" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (39 samples, 0.35%)</title><rect x="848.1" y="435.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (5 samples, 0.05%)</title><rect x="848.9" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="851.9" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="848.9" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (16 samples, 0.15%)</title><rect x="849.5" y="419.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (10 samples, 0.09%)</title><rect x="851.3" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="851.7" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="851.7" y="387.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.7" y="398.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="851.7" y="371.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="854.7" y="382.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="851.8" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.8" y="366.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="851.9" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.9" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="852.4" y="451.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="855.4" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (15 samples, 0.14%)</title><rect x="853.1" y="483.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.1" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (12 samples, 0.11%)</title><rect x="853.4" y="467.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.4" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.matches (3 samples, 0.03%)</title><rect x="854.4" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.4" y="462.0"></text>
</g>
<g>
<title>java/security/KeyFactory.generatePublic (119 samples, 1.08%)</title><rect x="854.7" y="499.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.7" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.engineGeneratePublic (118 samples, 1.07%)</title><rect x="854.8" y="483.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.8" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.generatePublic (115 samples, 1.04%)</title><rect x="855.1" y="467.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.1" y="478.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.&lt;init&gt; (114 samples, 1.03%)</title><rect x="855.2" y="451.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.2" y="462.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.checkExponentRange (26 samples, 0.24%)</title><rect x="855.9" y="435.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.9" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (26 samples, 0.24%)</title><rect x="855.9" y="419.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="858.9" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (18 samples, 0.16%)</title><rect x="856.7" y="403.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.7" y="414.0"></text>
</g>
<g>
<title>sun/security/util/BitArray.&lt;init&gt; (3 samples, 0.03%)</title><rect x="858.6" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.6" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="859.0" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="862.0" y="446.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="859.0" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.0" y="430.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="859.0" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.0" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putInteger (39 samples, 0.35%)</title><rect x="859.3" y="435.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.3" y="446.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (24 samples, 0.22%)</title><rect x="859.5" y="419.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.5" y="430.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (15 samples, 0.14%)</title><rect x="860.0" y="403.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.0" y="414.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (10 samples, 0.09%)</title><rect x="860.4" y="387.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="863.4" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.07%)</title><rect x="860.6" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.6" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (7 samples, 0.06%)</title><rect x="862.1" y="419.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="865.1" y="430.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putLength (6 samples, 0.05%)</title><rect x="862.8" y="419.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="865.8" y="430.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (5 samples, 0.05%)</title><rect x="862.9" y="403.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="865.9" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (9 samples, 0.08%)</title><rect x="863.5" y="435.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.5" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (8 samples, 0.07%)</title><rect x="863.6" y="419.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="866.6" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="864.0" y="403.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="867.0" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.toByteArray (27 samples, 0.25%)</title><rect x="864.4" y="435.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.4" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.&lt;init&gt; (5 samples, 0.05%)</title><rect x="864.7" y="419.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.7" y="430.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.encode (19 samples, 0.17%)</title><rect x="865.3" y="419.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="868.3" y="430.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (4 samples, 0.04%)</title><rect x="865.7" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.7" y="414.0"></text>
</g>
<g>
<title>java/io/OutputStream.write (7 samples, 0.06%)</title><rect x="866.4" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.4" y="414.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (7 samples, 0.06%)</title><rect x="866.4" y="387.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.4" y="398.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (6 samples, 0.05%)</title><rect x="866.5" y="371.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.5" y="382.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (6 samples, 0.05%)</title><rect x="866.5" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="869.5" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="866.7" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.7" y="350.0"></text>
</g>
<g>
<title>java/security/KeyFactory.getInstance (116 samples, 1.05%)</title><rect x="867.4" y="499.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.4" y="510.0"></text>
</g>
<g>
<title>java/security/KeyFactory.&lt;init&gt; (115 samples, 1.04%)</title><rect x="867.5" y="483.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.5" y="494.0"></text>
</g>
<g>
<title>java/security/KeyFactory.nextSpi (104 samples, 0.94%)</title><rect x="868.0" y="467.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.0" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (38 samples, 0.34%)</title><rect x="868.4" y="451.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.4" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (26 samples, 0.24%)</title><rect x="868.6" y="435.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.6" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (25 samples, 0.23%)</title><rect x="868.6" y="419.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (21 samples, 0.19%)</title><rect x="868.6" y="403.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="871.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (20 samples, 0.18%)</title><rect x="868.7" y="387.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (4 samples, 0.04%)</title><rect x="869.1" y="371.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.1" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (9 samples, 0.08%)</title><rect x="869.6" y="371.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.6" y="382.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="870.5" y="371.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="873.5" y="382.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (3 samples, 0.03%)</title><rect x="871.0" y="403.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.06%)</title><rect x="871.7" y="435.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.06%)</title><rect x="871.7" y="419.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.7" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (56 samples, 0.51%)</title><rect x="872.5" y="451.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.5" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (56 samples, 0.51%)</title><rect x="872.5" y="435.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.5" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (56 samples, 0.51%)</title><rect x="872.5" y="419.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.5" y="430.0"></text>
</g>
<g>
<title>java/security/Provider.getService (39 samples, 0.35%)</title><rect x="872.6" y="403.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.6" y="414.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (11 samples, 0.10%)</title><rect x="873.7" y="387.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.7" y="398.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (11 samples, 0.10%)</title><rect x="873.7" y="371.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (9 samples, 0.08%)</title><rect x="874.0" y="355.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (3 samples, 0.03%)</title><rect x="874.6" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="877.6" y="350.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (3 samples, 0.03%)</title><rect x="874.6" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="877.6" y="334.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.matches (3 samples, 0.03%)</title><rect x="874.9" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="877.9" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (14 samples, 0.13%)</title><rect x="875.2" y="387.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.10%)</title><rect x="875.2" y="371.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="878.2" y="382.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (6 samples, 0.05%)</title><rect x="875.8" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="876.4" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="879.4" y="382.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (3 samples, 0.03%)</title><rect x="876.4" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.4" y="366.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (16 samples, 0.15%)</title><rect x="876.7" y="403.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.7" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (16 samples, 0.15%)</title><rect x="876.7" y="387.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="879.7" y="398.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (6 samples, 0.05%)</title><rect x="878.5" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.5" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (6 samples, 0.05%)</title><rect x="878.5" y="435.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="881.5" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getServices (7 samples, 0.06%)</title><rect x="879.1" y="467.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.1" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getProviderList (4 samples, 0.04%)</title><rect x="879.4" y="451.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="882.4" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (6 samples, 0.05%)</title><rect x="880.1" y="531.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="883.1" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (6 samples, 0.05%)</title><rect x="880.1" y="515.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="883.1" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (6 samples, 0.05%)</title><rect x="880.1" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.1" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (4 samples, 0.04%)</title><rect x="880.3" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.3" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/source/ImmutableJWKSet.get (19 samples, 0.17%)</title><rect x="880.7" y="547.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="883.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKSelector.select (19 samples, 0.17%)</title><rect x="880.7" y="531.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.7" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.matches (10 samples, 0.09%)</title><rect x="881.0" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (5 samples, 0.05%)</title><rect x="881.6" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="884.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (4 samples, 0.04%)</title><rect x="881.7" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="884.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="881.8" y="467.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="884.8" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (4 samples, 0.04%)</title><rect x="882.2" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="885.2" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="882.3" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.3" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (3 samples, 0.03%)</title><rect x="882.3" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="885.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (3 samples, 0.03%)</title><rect x="882.3" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="885.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.createJWKMatcher (103 samples, 0.93%)</title><rect x="882.7" y="547.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="885.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.forJWSHeader (101 samples, 0.92%)</title><rect x="883.0" y="531.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="886.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.algorithms (10 samples, 0.09%)</title><rect x="883.1" y="515.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="886.1" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (9 samples, 0.08%)</title><rect x="883.2" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.2" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (9 samples, 0.08%)</title><rect x="883.2" y="483.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="886.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.05%)</title><rect x="883.5" y="467.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="886.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="883.5" y="451.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="886.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="883.5" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.5" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.hashCode (4 samples, 0.04%)</title><rect x="883.5" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.5" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyID (11 samples, 0.10%)</title><rect x="884.2" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="887.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (11 samples, 0.10%)</title><rect x="884.2" y="499.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.2" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (11 samples, 0.10%)</title><rect x="884.2" y="483.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="887.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (9 samples, 0.08%)</title><rect x="884.3" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.3" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (9 samples, 0.08%)</title><rect x="884.3" y="451.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.08%)</title><rect x="884.3" y="435.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="887.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyType (36 samples, 0.33%)</title><rect x="885.4" y="515.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (36 samples, 0.33%)</title><rect x="885.4" y="499.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="888.4" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (36 samples, 0.33%)</title><rect x="885.4" y="483.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (13 samples, 0.12%)</title><rect x="886.3" y="467.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="889.3" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (13 samples, 0.12%)</title><rect x="886.3" y="451.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.hashCode (7 samples, 0.06%)</title><rect x="886.4" y="435.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.4" y="446.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="887.1" y="435.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="890.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (13 samples, 0.12%)</title><rect x="887.9" y="467.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="890.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.12%)</title><rect x="887.9" y="451.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="890.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.07%)</title><rect x="887.9" y="435.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="890.9" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.hashCode (4 samples, 0.04%)</title><rect x="888.3" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="891.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.04%)</title><rect x="888.3" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="888.7" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.03%)</title><rect x="888.8" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="891.8" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyUses (20 samples, 0.18%)</title><rect x="889.3" y="515.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.3" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (19 samples, 0.17%)</title><rect x="889.4" y="499.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.4" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (19 samples, 0.17%)</title><rect x="889.4" y="483.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.add (15 samples, 0.14%)</title><rect x="889.8" y="467.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="892.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (15 samples, 0.14%)</title><rect x="889.8" y="451.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="892.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.11%)</title><rect x="889.8" y="435.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="892.8" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyUse.hashCode (10 samples, 0.09%)</title><rect x="890.0" y="419.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="893.0" y="430.0"></text>
</g>
<g>
<title>java/util/Objects.hash (3 samples, 0.03%)</title><rect x="890.8" y="403.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="893.8" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (3 samples, 0.03%)</title><rect x="890.8" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="893.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="890.8" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="893.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="891.1" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="894.1" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.forAlgorithm (8 samples, 0.07%)</title><rect x="891.4" y="515.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="894.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (8 samples, 0.07%)</title><rect x="891.4" y="499.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (8 samples, 0.07%)</title><rect x="891.4" y="483.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="894.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.07%)</title><rect x="891.4" y="467.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="894.4" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (3 samples, 0.03%)</title><rect x="891.9" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="894.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (14 samples, 0.13%)</title><rect x="892.3" y="515.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="895.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (14 samples, 0.13%)</title><rect x="892.3" y="499.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="895.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.10%)</title><rect x="892.3" y="483.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="893.4" y="483.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="896.4" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.verifyClaims (75 samples, 0.68%)</title><rect x="894.0" y="579.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTClaimsVerifier.verify (68 samples, 0.62%)</title><rect x="894.7" y="563.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.7" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getClaims (3 samples, 0.03%)</title><rect x="895.2" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.2" y="558.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (3 samples, 0.03%)</title><rect x="895.2" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.2" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getExpirationTime (11 samples, 0.10%)</title><rect x="895.5" y="547.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getDateClaim (11 samples, 0.10%)</title><rect x="895.5" y="531.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getClaim (10 samples, 0.09%)</title><rect x="895.6" y="515.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="898.6" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (10 samples, 0.09%)</title><rect x="895.6" y="499.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="898.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.07%)</title><rect x="895.8" y="483.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="898.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.05%)</title><rect x="896.0" y="467.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="899.0" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.containsAll (37 samples, 0.34%)</title><rect x="896.8" y="547.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="899.8" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (37 samples, 0.34%)</title><rect x="896.8" y="531.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="899.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (24 samples, 0.22%)</title><rect x="897.1" y="515.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="900.1" y="526.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="897.3" y="499.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="900.3" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (18 samples, 0.16%)</title><rect x="897.7" y="499.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.7" y="510.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.08%)</title><rect x="898.2" y="483.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="901.2" y="494.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (8 samples, 0.07%)</title><rect x="898.3" y="467.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="901.3" y="478.0"></text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="898.8" y="451.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="901.8" y="462.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.05%)</title><rect x="899.1" y="483.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="902.1" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (10 samples, 0.09%)</title><rect x="899.7" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.7" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (8 samples, 0.07%)</title><rect x="899.7" y="499.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.07%)</title><rect x="899.7" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="902.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.04%)</title><rect x="900.0" y="467.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.0" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (4 samples, 0.04%)</title><rect x="900.7" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="903.7" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (4 samples, 0.04%)</title><rect x="900.7" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="903.7" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (4 samples, 0.04%)</title><rect x="900.7" y="515.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.7" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.keySet (4 samples, 0.04%)</title><rect x="901.2" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.2" y="558.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_small_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (183 samples, 1.66%)</title><rect x="902.3" y="675.0" width="19.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="905.3" y="686.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (183 samples, 1.66%)</title><rect x="902.3" y="659.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.3" y="670.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (149 samples, 1.35%)</title><rect x="902.7" y="643.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.7" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (134 samples, 1.22%)</title><rect x="902.7" y="627.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="905.7" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (133 samples, 1.21%)</title><rect x="902.8" y="611.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="905.8" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (4 samples, 0.04%)</title><rect x="902.9" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.9" y="606.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (4 samples, 0.04%)</title><rect x="902.9" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="905.9" y="590.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (4 samples, 0.04%)</title><rect x="902.9" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.9" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (4 samples, 0.04%)</title><rect x="902.9" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="905.9" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (4 samples, 0.04%)</title><rect x="902.9" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.9" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.04%)</title><rect x="902.9" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="905.9" y="526.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.04%)</title><rect x="902.9" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="905.9" y="510.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.03%)</title><rect x="902.9" y="483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="905.9" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (3 samples, 0.03%)</title><rect x="902.9" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.9" y="478.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (3 samples, 0.03%)</title><rect x="902.9" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.9" y="462.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (3 samples, 0.03%)</title><rect x="902.9" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.9" y="446.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (3 samples, 0.03%)</title><rect x="902.9" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.9" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.03%)</title><rect x="902.9" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="905.9" y="414.0"></text>
</g>
<g>
<title>java/security/Signature.sign (127 samples, 1.15%)</title><rect x="903.3" y="595.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.3" y="606.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (127 samples, 1.15%)</title><rect x="903.3" y="579.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.3" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (127 samples, 1.15%)</title><rect x="903.3" y="563.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.3" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (122 samples, 1.11%)</title><rect x="903.3" y="547.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.3" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (122 samples, 1.11%)</title><rect x="903.3" y="531.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="906.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (116 samples, 1.05%)</title><rect x="903.4" y="515.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.4" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (115 samples, 1.04%)</title><rect x="903.5" y="499.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="906.5" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (17 samples, 0.15%)</title><rect x="903.7" y="483.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="906.7" y="494.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (14 samples, 0.13%)</title><rect x="904.0" y="467.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="907.0" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (77 samples, 0.70%)</title><rect x="905.5" y="483.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.5" y="494.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (73 samples, 0.66%)</title><rect x="906.0" y="467.0" width="7.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="909.0" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (17 samples, 0.15%)</title><rect x="913.9" y="483.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="916.9" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (17 samples, 0.15%)</title><rect x="913.9" y="467.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="916.9" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (17 samples, 0.15%)</title><rect x="913.9" y="451.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.9" y="462.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (15 samples, 0.14%)</title><rect x="914.1" y="435.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="917.1" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (5 samples, 0.05%)</title><rect x="915.8" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.8" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (5 samples, 0.05%)</title><rect x="915.8" y="499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="918.8" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (5 samples, 0.05%)</title><rect x="915.8" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="918.8" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (5 samples, 0.05%)</title><rect x="915.8" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="918.8" y="478.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.encodeSignature (4 samples, 0.04%)</title><rect x="916.5" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.5" y="558.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.encode (3 samples, 0.03%)</title><rect x="916.6" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.6" y="542.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.derEncode (3 samples, 0.03%)</title><rect x="916.6" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="919.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (11 samples, 0.10%)</title><rect x="917.0" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.0" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (10 samples, 0.09%)</title><rect x="917.0" y="611.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (10 samples, 0.09%)</title><rect x="917.0" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (4 samples, 0.04%)</title><rect x="917.0" y="579.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (3 samples, 0.03%)</title><rect x="917.0" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (3 samples, 0.03%)</title><rect x="917.0" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.0" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="917.0" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (3 samples, 0.03%)</title><rect x="917.0" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (6 samples, 0.05%)</title><rect x="917.4" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.4" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (4 samples, 0.04%)</title><rect x="917.4" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.4" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (4 samples, 0.04%)</title><rect x="917.4" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (4 samples, 0.04%)</title><rect x="917.4" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.4" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (4 samples, 0.04%)</title><rect x="917.4" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (4 samples, 0.04%)</title><rect x="917.4" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (4 samples, 0.04%)</title><rect x="917.4" y="483.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.4" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (4 samples, 0.04%)</title><rect x="917.4" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.4" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (4 samples, 0.04%)</title><rect x="917.4" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.4" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (3 samples, 0.03%)</title><rect x="917.5" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.5" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (3 samples, 0.03%)</title><rect x="917.5" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.5" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (3 samples, 0.03%)</title><rect x="917.5" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.5" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (3 samples, 0.03%)</title><rect x="917.5" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.5" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (3 samples, 0.03%)</title><rect x="917.5" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.5" y="382.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (3 samples, 0.03%)</title><rect x="918.3" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.3" y="638.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (3 samples, 0.03%)</title><rect x="918.3" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.3" y="622.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (3 samples, 0.03%)</title><rect x="918.3" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.3" y="606.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (30 samples, 0.27%)</title><rect x="918.7" y="643.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.7" y="654.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (30 samples, 0.27%)</title><rect x="918.7" y="627.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.7" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (30 samples, 0.27%)</title><rect x="918.7" y="611.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.7" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (28 samples, 0.25%)</title><rect x="918.9" y="595.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.9" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (28 samples, 0.25%)</title><rect x="918.9" y="579.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="921.9" y="590.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (5 samples, 0.05%)</title><rect x="918.9" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.9" y="574.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (5 samples, 0.05%)</title><rect x="918.9" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.9" y="558.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (4 samples, 0.04%)</title><rect x="919.0" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.0" y="542.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (4 samples, 0.04%)</title><rect x="919.0" y="515.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="922.0" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (4 samples, 0.04%)</title><rect x="919.0" y="499.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.0" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="919.0" y="483.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.0" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="919.0" y="467.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.0" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (3 samples, 0.03%)</title><rect x="919.0" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.0" y="462.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (21 samples, 0.19%)</title><rect x="919.7" y="563.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.7" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (21 samples, 0.19%)</title><rect x="919.7" y="547.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.7" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (9 samples, 0.08%)</title><rect x="919.7" y="531.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.7" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (9 samples, 0.08%)</title><rect x="919.7" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="922.7" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (5 samples, 0.05%)</title><rect x="919.7" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.7" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (5 samples, 0.05%)</title><rect x="919.7" y="483.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="922.7" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (5 samples, 0.05%)</title><rect x="919.7" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.7" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="919.7" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.7" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="919.7" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.7" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (3 samples, 0.03%)</title><rect x="919.8" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.8" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (12 samples, 0.11%)</title><rect x="920.6" y="531.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.6" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (9 samples, 0.08%)</title><rect x="921.0" y="515.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.0" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (9 samples, 0.08%)</title><rect x="921.0" y="499.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.0" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (5 samples, 0.05%)</title><rect x="921.1" y="483.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.1" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (5 samples, 0.05%)</title><rect x="921.1" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.1" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="921.3" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.3" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (3 samples, 0.03%)</title><rect x="921.6" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.6" y="494.0"></text>
</g>
<g>
<title>thread_start (2,498 samples, 22.67%)</title><rect x="922.5" y="883.0" width="267.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="925.5" y="894.0">thread_start</text>
</g>
<g>
<title>_pthread_start (2,498 samples, 22.67%)</title><rect x="922.5" y="867.0" width="267.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="925.5" y="878.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (2,498 samples, 22.67%)</title><rect x="922.5" y="851.0" width="267.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="925.5" y="862.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (2,498 samples, 22.67%)</title><rect x="922.5" y="835.0" width="267.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="925.5" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (90 samples, 0.82%)</title><rect x="922.5" y="819.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="925.5" y="830.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (23 samples, 0.21%)</title><rect x="922.5" y="803.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="925.5" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (23 samples, 0.21%)</title><rect x="922.5" y="787.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="925.5" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (23 samples, 0.21%)</title><rect x="922.5" y="771.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.5" y="782.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (19 samples, 0.17%)</title><rect x="922.5" y="755.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="925.5" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (19 samples, 0.17%)</title><rect x="922.5" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.5" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.15%)</title><rect x="922.5" y="723.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="925.5" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="924.6" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="927.6" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="924.6" y="739.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="927.6" y="750.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.07%)</title><rect x="925.1" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.1" y="814.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (8 samples, 0.07%)</title><rect x="925.1" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.1" y="798.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (5 samples, 0.05%)</title><rect x="925.3" y="771.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.3" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (5 samples, 0.05%)</title><rect x="925.3" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="928.3" y="766.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.06%)</title><rect x="926.0" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.0" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (6 samples, 0.05%)</title><rect x="926.0" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.0" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (4 samples, 0.04%)</title><rect x="926.0" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.0" y="782.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (4 samples, 0.04%)</title><rect x="926.0" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.0" y="766.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (39 samples, 0.35%)</title><rect x="926.8" y="803.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.8" y="814.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (3 samples, 0.03%)</title><rect x="926.8" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.8" y="798.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (3 samples, 0.03%)</title><rect x="926.8" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.8" y="782.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="926.8" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="929.8" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (30 samples, 0.27%)</title><rect x="927.2" y="787.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="930.2" y="798.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (28 samples, 0.25%)</title><rect x="927.4" y="771.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="930.4" y="782.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.05%)</title><rect x="930.4" y="787.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="933.4" y="798.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.07%)</title><rect x="930.9" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (8 samples, 0.07%)</title><rect x="930.9" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.9" y="798.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (5 samples, 0.05%)</title><rect x="931.3" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.3" y="782.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (4 samples, 0.04%)</title><rect x="931.4" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (4 samples, 0.04%)</title><rect x="931.4" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.4" y="750.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (3 samples, 0.03%)</title><rect x="931.5" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="734.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="931.8" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.8" y="814.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="931.8" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.8" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="931.8" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.8" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="931.8" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.8" y="766.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="931.8" y="739.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="934.8" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="931.8" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.8" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="931.8" y="707.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="934.8" y="718.0"></text>
</g>
<g>
<title>JavaThread::run() (2,303 samples, 20.90%)</title><rect x="932.1" y="819.0" width="246.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.1" y="830.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,303 samples, 20.90%)</title><rect x="932.1" y="803.0" width="246.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.1" y="814.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,294 samples, 20.82%)</title><rect x="932.1" y="787.0" width="245.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.1" y="798.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,275 samples, 20.65%)</title><rect x="932.1" y="771.0" width="243.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.1" y="782.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (2,217 samples, 20.12%)</title><rect x="932.1" y="755.0" width="237.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.1" y="766.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (2,216 samples, 20.11%)</title><rect x="932.1" y="739.0" width="237.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.1" y="750.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (6 samples, 0.05%)</title><rect x="932.1" y="723.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.1" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (5 samples, 0.05%)</title><rect x="932.1" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="935.1" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (5 samples, 0.05%)</title><rect x="932.1" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (5 samples, 0.05%)</title><rect x="932.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.1" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (5 samples, 0.05%)</title><rect x="932.1" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="932.2" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.2" y="654.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (394 samples, 3.58%)</title><rect x="932.8" y="723.0" width="42.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.8" y="734.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (16 samples, 0.15%)</title><rect x="932.8" y="707.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.8" y="718.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (8 samples, 0.07%)</title><rect x="932.8" y="691.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.8" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (8 samples, 0.07%)</title><rect x="933.6" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.6" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (7 samples, 0.06%)</title><rect x="933.7" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.7" y="686.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.03%)</title><rect x="934.0" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="937.0" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (15 samples, 0.14%)</title><rect x="934.5" y="707.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.5" y="718.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.04%)</title><rect x="934.6" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.6" y="702.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (7 samples, 0.06%)</title><rect x="935.0" y="691.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.0" y="702.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (5 samples, 0.05%)</title><rect x="935.2" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.2" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.05%)</title><rect x="935.2" y="659.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.2" y="670.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.04%)</title><rect x="935.3" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.3" y="654.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (3 samples, 0.03%)</title><rect x="935.3" y="627.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.3" y="638.0"></text>
</g>
<g>
<title>Matcher::match() (31 samples, 0.28%)</title><rect x="936.2" y="707.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.2" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (6 samples, 0.05%)</title><rect x="936.4" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.4" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (22 samples, 0.20%)</title><rect x="937.1" y="691.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="940.1" y="702.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.06%)</title><rect x="937.6" y="675.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="940.6" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.05%)</title><rect x="938.5" y="675.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.5" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.03%)</title><rect x="938.7" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.7" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.03%)</title><rect x="938.7" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.7" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (21 samples, 0.19%)</title><rect x="939.8" y="707.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (19 samples, 0.17%)</title><rect x="940.0" y="691.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (4 samples, 0.04%)</title><rect x="940.0" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.0" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (11 samples, 0.10%)</title><rect x="940.5" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.5" y="686.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.03%)</title><rect x="940.5" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.5" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (5 samples, 0.05%)</title><rect x="940.8" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.8" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.03%)</title><rect x="941.3" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.3" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="941.6" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.6" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (3 samples, 0.03%)</title><rect x="942.1" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="945.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (304 samples, 2.76%)</title><rect x="942.4" y="707.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="945.4" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (8 samples, 0.07%)</title><rect x="942.5" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (23 samples, 0.21%)</title><rect x="943.4" y="691.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.4" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="943.7" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.7" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.05%)</title><rect x="944.0" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.0" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (11 samples, 0.10%)</title><rect x="944.6" y="675.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.6" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="944.6" y="659.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.6" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="945.4" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.4" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (17 samples, 0.15%)</title><rect x="945.8" y="691.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="946.1" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.1" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (9 samples, 0.08%)</title><rect x="946.6" y="675.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.6" y="686.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="946.8" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (40 samples, 0.36%)</title><rect x="947.6" y="691.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.6" y="702.0"></text>
</g>
<g>
<title>Block::end_idx() const (4 samples, 0.04%)</title><rect x="950.5" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="953.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (65 samples, 0.59%)</title><rect x="951.9" y="691.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="954.1" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (28 samples, 0.25%)</title><rect x="954.6" y="675.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.6" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (9 samples, 0.08%)</title><rect x="954.8" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.8" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.06%)</title><rect x="955.9" y="659.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.9" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.05%)</title><rect x="956.6" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="959.6" y="670.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.04%)</title><rect x="957.2" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.2" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.05%)</title><rect x="957.6" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.03%)</title><rect x="958.9" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="961.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (26 samples, 0.24%)</title><rect x="959.7" y="691.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (24 samples, 0.22%)</title><rect x="962.7" y="691.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (10 samples, 0.09%)</title><rect x="963.9" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.9" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (27 samples, 0.25%)</title><rect x="965.5" y="691.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.5" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (25 samples, 0.23%)</title><rect x="965.7" y="675.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (5 samples, 0.05%)</title><rect x="966.2" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.2" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (16 samples, 0.15%)</title><rect x="966.7" y="659.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.7" y="670.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.03%)</title><rect x="966.7" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.7" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (8 samples, 0.07%)</title><rect x="967.2" y="643.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="970.2" y="654.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="967.3" y="627.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.3" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (10 samples, 0.09%)</title><rect x="968.4" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (10 samples, 0.09%)</title><rect x="968.4" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.4" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="968.8" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.8" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (9 samples, 0.08%)</title><rect x="969.5" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.5" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="969.5" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.5" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="970.0" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.0" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (7 samples, 0.06%)</title><rect x="970.5" y="691.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.5" y="702.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="970.8" y="675.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="973.8" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (31 samples, 0.28%)</title><rect x="971.2" y="691.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.2" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (14 samples, 0.13%)</title><rect x="972.9" y="675.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.9" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="973.2" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.2" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="973.6" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.6" y="670.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (3 samples, 0.03%)</title><rect x="974.1" y="659.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.1" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="974.6" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.6" y="702.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="974.6" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.6" y="686.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="974.6" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="977.6" y="670.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="974.6" y="643.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="977.6" y="654.0"></text>
</g>
<g>
<title>Compile::Optimize() (1,764 samples, 16.01%)</title><rect x="974.9" y="723.0" width="189.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.9" y="734.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.03%)</title><rect x="974.9" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.9" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.03%)</title><rect x="974.9" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.9" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.03%)</title><rect x="975.3" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.06%)</title><rect x="975.6" y="707.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.05%)</title><rect x="975.7" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.03%)</title><rect x="975.8" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="975.8" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.8" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.05%)</title><rect x="976.3" y="707.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1,690 samples, 15.34%)</title><rect x="977.4" y="707.0" width="181.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.4" y="718.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (11 samples, 0.10%)</title><rect x="977.6" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.6" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (6 samples, 0.05%)</title><rect x="977.6" y="675.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.6" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="977.6" y="659.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.6" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="977.6" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.6" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="977.6" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.6" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="977.9" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (3 samples, 0.03%)</title><rect x="977.9" y="643.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (3 samples, 0.03%)</title><rect x="977.9" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.9" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="978.3" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.3" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="978.8" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.8" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="978.8" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.8" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="978.8" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (18 samples, 0.16%)</title><rect x="979.1" y="691.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.1" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (5 samples, 0.05%)</title><rect x="979.9" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 0.20%)</title><rect x="981.1" y="691.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.03%)</title><rect x="982.1" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (5 samples, 0.05%)</title><rect x="982.4" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1,566 samples, 14.21%)</title><rect x="983.4" y="691.0" width="167.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="702.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>Node_List::push(Node*) (3 samples, 0.03%)</title><rect x="986.1" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1,536 samples, 13.94%)</title><rect x="986.4" y="675.0" width="164.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.4" y="686.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1,526 samples, 13.85%)</title><rect x="986.7" y="659.0" width="163.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.7" y="670.0">PhaseIdealLoop::get_l..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (18 samples, 0.16%)</title><rect x="992.6" y="643.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.6" y="654.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (11 samples, 0.10%)</title><rect x="992.6" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.6" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="992.6" y="611.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.6" y="622.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (3 samples, 0.03%)</title><rect x="992.6" y="595.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.6" y="606.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (3 samples, 0.03%)</title><rect x="992.6" y="579.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.6" y="590.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (8 samples, 0.07%)</title><rect x="992.9" y="611.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="995.9" y="622.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (7 samples, 0.06%)</title><rect x="993.8" y="627.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="996.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (7 samples, 0.06%)</title><rect x="994.5" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.05%)</title><rect x="994.8" y="627.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="997.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.04%)</title><rect x="994.9" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (36 samples, 0.33%)</title><rect x="995.3" y="643.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (12 samples, 0.11%)</title><rect x="999.2" y="643.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (12 samples, 0.11%)</title><rect x="999.2" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (6 samples, 0.05%)</title><rect x="1000.5" y="643.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1,391 samples, 12.62%)</title><rect x="1001.2" y="643.0" width="149.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.2" y="654.0">PhaseIdealLoop::is_..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (205 samples, 1.86%)</title><rect x="1023.1" y="627.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.1" y="638.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (981 samples, 8.90%)</title><rect x="1045.1" y="627.0" width="105.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.1" y="638.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (5 samples, 0.05%)</title><rect x="1150.4" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (13 samples, 0.12%)</title><rect x="1151.1" y="691.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (23 samples, 0.21%)</title><rect x="1152.8" y="691.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (7 samples, 0.06%)</title><rect x="1153.7" y="675.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.05%)</title><rect x="1154.4" y="675.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.4" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 0.16%)</title><rect x="1155.3" y="691.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 0.16%)</title><rect x="1155.3" y="675.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="686.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1155.4" y="659.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.4" y="670.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1155.4" y="643.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.4" y="654.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.03%)</title><rect x="1155.4" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.4" y="638.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (3 samples, 0.03%)</title><rect x="1155.4" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.03%)</title><rect x="1156.5" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1156.9" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.03%)</title><rect x="1156.9" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="627.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.9" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.9" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.9" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.9" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.9" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="387.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.9" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.9" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.9" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (7 samples, 0.06%)</title><rect x="1157.4" y="691.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="702.0"></text>
</g>
<g>
<title>Chunk::next_chop() (7 samples, 0.06%)</title><rect x="1157.4" y="675.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (7 samples, 0.06%)</title><rect x="1157.4" y="659.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>free_large (6 samples, 0.05%)</title><rect x="1157.4" y="643.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (5 samples, 0.05%)</title><rect x="1157.5" y="627.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1160.5" y="638.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (5 samples, 0.05%)</title><rect x="1157.5" y="611.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1160.5" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (39 samples, 0.35%)</title><rect x="1158.6" y="707.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.6" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (34 samples, 0.31%)</title><rect x="1158.8" y="691.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1159.4" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (6 samples, 0.05%)</title><rect x="1160.3" y="675.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (5 samples, 0.05%)</title><rect x="1160.4" y="659.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (9 samples, 0.08%)</title><rect x="1161.2" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (6 samples, 0.05%)</title><rect x="1161.5" y="659.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="670.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.03%)</title><rect x="1163.2" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.03%)</title><rect x="1163.2" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (41 samples, 0.37%)</title><rect x="1164.3" y="723.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (41 samples, 0.37%)</title><rect x="1164.3" y="707.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (40 samples, 0.36%)</title><rect x="1164.4" y="691.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (40 samples, 0.36%)</title><rect x="1164.4" y="675.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (39 samples, 0.35%)</title><rect x="1164.5" y="659.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (38 samples, 0.34%)</title><rect x="1164.5" y="643.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (32 samples, 0.29%)</title><rect x="1164.5" y="627.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (32 samples, 0.29%)</title><rect x="1164.5" y="611.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (30 samples, 0.27%)</title><rect x="1164.5" y="595.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (30 samples, 0.27%)</title><rect x="1164.5" y="579.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (30 samples, 0.27%)</title><rect x="1164.5" y="563.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 0.25%)</title><rect x="1164.5" y="547.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 0.19%)</title><rect x="1164.7" y="531.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 0.19%)</title><rect x="1164.7" y="515.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.17%)</title><rect x="1164.7" y="499.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.17%)</title><rect x="1164.7" y="483.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (19 samples, 0.17%)</title><rect x="1164.7" y="467.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.16%)</title><rect x="1164.7" y="451.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.15%)</title><rect x="1164.9" y="435.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.15%)</title><rect x="1164.9" y="419.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.15%)</title><rect x="1164.9" y="403.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.15%)</title><rect x="1164.9" y="387.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 0.15%)</title><rect x="1164.9" y="371.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.10%)</title><rect x="1165.2" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.10%)</title><rect x="1165.2" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.10%)</title><rect x="1165.2" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.08%)</title><rect x="1165.2" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.08%)</title><rect x="1165.2" y="291.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.08%)</title><rect x="1165.2" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.07%)</title><rect x="1165.3" y="259.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="1165.4" y="243.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.06%)</title><rect x="1165.4" y="227.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.06%)</title><rect x="1165.4" y="211.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="1165.4" y="195.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.06%)</title><rect x="1165.4" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.05%)</title><rect x="1165.4" y="163.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1165.4" y="147.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1165.4" y="131.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1165.4" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1165.4" y="99.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1165.4" y="83.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1165.4" y="67.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1165.4" y="51.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1165.4" y="35.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.0" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.0" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1167.0" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1167.0" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1167.0" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1167.0" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1167.0" y="435.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.0" y="419.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1167.0" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1167.0" y="387.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1167.0" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1167.0" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1167.0" y="339.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1167.0" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1167.0" y="307.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1167.0" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1167.0" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1167.0" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1167.0" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.0" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.0" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1167.0" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1167.0" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1167.0" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1167.0" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.0" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.0" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.0" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1167.0" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1167.0" y="83.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1167.0" y="67.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1167.0" y="51.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1167.9" y="627.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1167.9" y="611.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1167.9" y="595.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.05%)</title><rect x="1167.9" y="579.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.05%)</title><rect x="1167.9" y="563.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.05%)</title><rect x="1167.9" y="547.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1167.9" y="531.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1168.0" y="515.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1168.0" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1168.0" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1168.0" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1168.0" y="451.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.04%)</title><rect x="1168.7" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1169.1" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="734.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (3 samples, 0.03%)</title><rect x="1169.1" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (50 samples, 0.45%)</title><rect x="1169.5" y="755.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (50 samples, 0.45%)</title><rect x="1169.5" y="739.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.5" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (50 samples, 0.45%)</title><rect x="1169.5" y="723.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (44 samples, 0.40%)</title><rect x="1169.5" y="707.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() (22 samples, 0.20%)</title><rect x="1169.5" y="691.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (20 samples, 0.18%)</title><rect x="1169.5" y="675.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.5" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (20 samples, 0.18%)</title><rect x="1169.5" y="659.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (18 samples, 0.16%)</title><rect x="1169.5" y="643.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (17 samples, 0.15%)</title><rect x="1169.7" y="627.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (16 samples, 0.15%)</title><rect x="1169.7" y="611.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (14 samples, 0.13%)</title><rect x="1169.8" y="595.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.8" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (11 samples, 0.10%)</title><rect x="1169.9" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (9 samples, 0.08%)</title><rect x="1170.1" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (8 samples, 0.07%)</title><rect x="1170.1" y="547.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 0.07%)</title><rect x="1170.1" y="531.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.06%)</title><rect x="1170.2" y="515.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1170.2" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1170.2" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.04%)</title><rect x="1170.2" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.04%)</title><rect x="1170.2" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (5 samples, 0.05%)</title><rect x="1171.9" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (3 samples, 0.03%)</title><rect x="1172.1" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (3 samples, 0.03%)</title><rect x="1172.1" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (13 samples, 0.12%)</title><rect x="1172.4" y="691.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (4 samples, 0.04%)</title><rect x="1172.4" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (4 samples, 0.04%)</title><rect x="1172.4" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="670.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (3 samples, 0.03%)</title><rect x="1172.5" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (9 samples, 0.08%)</title><rect x="1172.9" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="686.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.03%)</title><rect x="1173.2" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (3 samples, 0.03%)</title><rect x="1173.9" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (3 samples, 0.03%)</title><rect x="1173.9" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (5 samples, 0.05%)</title><rect x="1174.4" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (5 samples, 0.05%)</title><rect x="1174.4" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.05%)</title><rect x="1174.9" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>Chunk::next_chop() (6 samples, 0.05%)</title><rect x="1174.9" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (6 samples, 0.05%)</title><rect x="1174.9" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>free_large (6 samples, 0.05%)</title><rect x="1174.9" y="707.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (5 samples, 0.05%)</title><rect x="1175.0" y="691.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (5 samples, 0.05%)</title><rect x="1175.0" y="675.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (19 samples, 0.17%)</title><rect x="1175.8" y="771.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (16 samples, 0.15%)</title><rect x="1176.0" y="755.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (16 samples, 0.15%)</title><rect x="1176.0" y="739.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (16 samples, 0.15%)</title><rect x="1176.0" y="723.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.12%)</title><rect x="1176.1" y="707.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.1" y="718.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (9 samples, 0.08%)</title><rect x="1177.8" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.05%)</title><rect x="1177.9" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.05%)</title><rect x="1177.9" y="755.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (3 samples, 0.03%)</title><rect x="1177.9" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1178.4" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1178.4" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="1178.4" y="739.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="1178.4" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1178.4" y="707.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>VMThread::run() (37 samples, 0.34%)</title><rect x="1178.9" y="819.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (37 samples, 0.34%)</title><rect x="1178.9" y="803.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1178.9" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1178.9" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.03%)</title><rect x="1178.9" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.03%)</title><rect x="1179.2" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="798.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (29 samples, 0.26%)</title><rect x="1179.7" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (29 samples, 0.26%)</title><rect x="1179.7" y="771.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="782.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (29 samples, 0.26%)</title><rect x="1179.7" y="755.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (29 samples, 0.26%)</title><rect x="1179.7" y="739.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (29 samples, 0.26%)</title><rect x="1179.7" y="723.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (28 samples, 0.25%)</title><rect x="1179.7" y="707.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (3 samples, 0.03%)</title><rect x="1179.9" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>GCTaskManager::task_idle_workers() (3 samples, 0.03%)</title><rect x="1180.4" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>GCTaskManager::add_list(GCTaskQueue*) (3 samples, 0.03%)</title><rect x="1180.4" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1180.4" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1180.4" y="643.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1183.4" y="654.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (14 samples, 0.13%)</title><rect x="1181.0" y="691.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (14 samples, 0.13%)</title><rect x="1181.0" y="675.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="686.0"></text>
</g>
<g>
<title>WatcherThread::run() (66 samples, 0.60%)</title><rect x="1182.8" y="819.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (63 samples, 0.57%)</title><rect x="1183.1" y="803.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (63 samples, 0.57%)</title><rect x="1183.1" y="787.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (63 samples, 0.57%)</title><rect x="1183.1" y="771.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (63 samples, 0.57%)</title><rect x="1183.1" y="755.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (62 samples, 0.56%)</title><rect x="1183.3" y="739.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
</g>
</svg>

