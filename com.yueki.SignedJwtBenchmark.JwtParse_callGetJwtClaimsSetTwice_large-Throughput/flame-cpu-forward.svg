<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (10,025 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (8,813 samples, 87.91%)</title><rect x="10.2" y="931.0" width="1037.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.2" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,813 samples, 87.91%)</title><rect x="10.2" y="915.0" width="1037.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.2" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,813 samples, 87.91%)</title><rect x="10.2" y="899.0" width="1037.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.2" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,810 samples, 87.88%)</title><rect x="10.2" y="883.0" width="1037.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="894.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,810 samples, 87.88%)</title><rect x="10.2" y="867.0" width="1037.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="878.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,810 samples, 87.88%)</title><rect x="10.2" y="851.0" width="1037.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="862.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,810 samples, 87.88%)</title><rect x="10.2" y="835.0" width="1037.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="846.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,810 samples, 87.88%)</title><rect x="10.2" y="819.0" width="1037.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="830.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,810 samples, 87.88%)</title><rect x="10.2" y="803.0" width="1037.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.2" y="814.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,810 samples, 87.88%)</title><rect x="10.2" y="787.0" width="1037.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.2" y="798.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,810 samples, 87.88%)</title><rect x="10.2" y="771.0" width="1037.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="782.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,810 samples, 87.88%)</title><rect x="10.2" y="755.0" width="1037.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.2" y="766.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_large_Throughput (8,810 samples, 87.88%)</title><rect x="10.2" y="739.0" width="1037.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="750.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_large_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_large_thrpt_jmhStub (8,623 samples, 86.01%)</title><rect x="10.2" y="723.0" width="1015.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="734.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_large_thrpt_jmhStub</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_large (8,609 samples, 85.88%)</title><rect x="11.9" y="707.0" width="1013.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.9" y="718.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_large</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,604 samples, 85.83%)</title><rect x="12.1" y="691.0" width="1012.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.1" y="702.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (2,374 samples, 23.68%)</title><rect x="12.6" y="675.0" width="279.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="686.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (103 samples, 1.03%)</title><rect x="13.3" y="659.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (100 samples, 1.00%)</title><rect x="13.3" y="643.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (99 samples, 0.99%)</title><rect x="13.4" y="627.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.4" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.05%)</title><rect x="14.0" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.0" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="14.0" y="595.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (5 samples, 0.05%)</title><rect x="14.0" y="579.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (4 samples, 0.04%)</title><rect x="14.9" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.9" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="14.9" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (67 samples, 0.67%)</title><rect x="15.5" y="611.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (13 samples, 0.13%)</title><rect x="23.4" y="611.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (13 samples, 0.13%)</title><rect x="23.4" y="595.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (13 samples, 0.13%)</title><rect x="23.4" y="579.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.4" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (12 samples, 0.12%)</title><rect x="23.5" y="563.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (12 samples, 0.12%)</title><rect x="23.5" y="547.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.5" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (11 samples, 0.11%)</title><rect x="23.7" y="531.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.7" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.10%)</title><rect x="23.7" y="515.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.7" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (2,263 samples, 22.57%)</title><rect x="25.4" y="659.0" width="266.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.4" y="670.0">com/nimbusds/jose/crypto/RSASSAVerif..</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (34 samples, 0.34%)</title><rect x="25.5" y="643.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.5" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (34 samples, 0.34%)</title><rect x="25.5" y="627.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.5" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (28 samples, 0.28%)</title><rect x="26.1" y="611.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.1" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (25 samples, 0.25%)</title><rect x="26.5" y="595.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.5" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (25 samples, 0.25%)</title><rect x="26.5" y="579.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.5" y="590.0"></text>
</g>
<g>
<title>java/security/Provider.getService (20 samples, 0.20%)</title><rect x="26.5" y="563.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.5" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (9 samples, 0.09%)</title><rect x="27.1" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (9 samples, 0.09%)</title><rect x="27.1" y="531.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (9 samples, 0.09%)</title><rect x="27.1" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (3 samples, 0.03%)</title><rect x="27.8" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.8" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (3 samples, 0.03%)</title><rect x="27.8" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.8" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.04%)</title><rect x="28.4" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.4" y="558.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (5 samples, 0.05%)</title><rect x="28.8" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.8" y="574.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (5 samples, 0.05%)</title><rect x="28.8" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (59 samples, 0.59%)</title><rect x="29.5" y="643.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (59 samples, 0.59%)</title><rect x="29.5" y="627.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (27 samples, 0.27%)</title><rect x="31.4" y="611.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (11 samples, 0.11%)</title><rect x="34.6" y="611.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 0.10%)</title><rect x="34.6" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (6 samples, 0.06%)</title><rect x="35.0" y="579.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.0" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="35.9" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (64 samples, 0.64%)</title><rect x="36.5" y="643.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.5" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (64 samples, 0.64%)</title><rect x="36.5" y="627.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.5" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (64 samples, 0.64%)</title><rect x="36.5" y="611.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.5" y="622.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (38 samples, 0.38%)</title><rect x="36.6" y="595.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.6" y="606.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (16 samples, 0.16%)</title><rect x="36.7" y="579.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.7" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 0.14%)</title><rect x="37.0" y="563.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="40.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 0.20%)</title><rect x="38.6" y="579.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (19 samples, 0.19%)</title><rect x="38.7" y="563.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (19 samples, 0.19%)</title><rect x="38.7" y="547.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.7" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (19 samples, 0.19%)</title><rect x="38.7" y="531.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="41.7" y="542.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (3 samples, 0.03%)</title><rect x="41.1" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.1" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (3 samples, 0.03%)</title><rect x="41.1" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.1" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (3 samples, 0.03%)</title><rect x="41.1" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (21 samples, 0.21%)</title><rect x="41.4" y="595.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.4" y="606.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (20 samples, 0.20%)</title><rect x="41.5" y="579.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (5 samples, 0.05%)</title><rect x="41.7" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (5 samples, 0.05%)</title><rect x="41.7" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.7" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 0.13%)</title><rect x="42.3" y="563.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.3" y="574.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 0.11%)</title><rect x="42.3" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.3" y="558.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (10 samples, 0.10%)</title><rect x="42.4" y="531.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.4" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (9 samples, 0.09%)</title><rect x="42.5" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.5" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (9 samples, 0.09%)</title><rect x="42.5" y="499.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.5" y="510.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (9 samples, 0.09%)</title><rect x="42.5" y="483.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.5" y="494.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (9 samples, 0.09%)</title><rect x="42.5" y="467.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.5" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (8 samples, 0.08%)</title><rect x="42.6" y="451.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.6" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (5 samples, 0.05%)</title><rect x="42.6" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.6" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (4 samples, 0.04%)</title><rect x="42.6" y="419.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.6" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (3 samples, 0.03%)</title><rect x="43.2" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.2" y="446.0"></text>
</g>
<g>
<title>java/security/Signature.update (902 samples, 9.00%)</title><rect x="44.0" y="643.0" width="106.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.0" y="654.0">java/security..</text>
</g>
<g>
<title>java/security/Signature.update (902 samples, 9.00%)</title><rect x="44.0" y="627.0" width="106.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.0" y="638.0">java/security..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (901 samples, 8.99%)</title><rect x="44.1" y="611.0" width="106.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.1" y="622.0">java/security..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (901 samples, 8.99%)</title><rect x="44.1" y="595.0" width="106.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.1" y="606.0">sun/security/..</text>
</g>
<g>
<title>java/security/MessageDigest.update (901 samples, 8.99%)</title><rect x="44.1" y="579.0" width="106.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.1" y="590.0">java/security..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (898 samples, 8.96%)</title><rect x="44.5" y="563.0" width="105.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.5" y="574.0">java/security..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (898 samples, 8.96%)</title><rect x="44.5" y="547.0" width="105.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.5" y="558.0">sun/security/..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (897 samples, 8.95%)</title><rect x="44.6" y="531.0" width="105.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.6" y="542.0">sun/security/..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (890 samples, 8.88%)</title><rect x="45.4" y="515.0" width="104.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.4" y="526.0">sun/security..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (35 samples, 0.35%)</title><rect x="136.7" y="499.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.7" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (80 samples, 0.80%)</title><rect x="140.8" y="499.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.8" y="510.0"></text>
</g>
<g>
<title>java/security/Signature.verify (1,203 samples, 12.00%)</title><rect x="150.2" y="643.0" width="141.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.2" y="654.0">java/security/Sign..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (1,203 samples, 12.00%)</title><rect x="150.2" y="627.0" width="141.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.2" y="638.0">java/security/Sign..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (1,202 samples, 11.99%)</title><rect x="150.3" y="611.0" width="141.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.3" y="622.0">sun/security/rsa/R..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (938 samples, 9.36%)</title><rect x="150.8" y="595.0" width="110.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.8" y="606.0">sun/security/..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (938 samples, 9.36%)</title><rect x="150.8" y="579.0" width="110.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.8" y="590.0">sun/security/..</text>
</g>
<g>
<title>java/math/BigInteger.modPow (920 samples, 9.18%)</title><rect x="150.8" y="563.0" width="108.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.8" y="574.0">java/math/Big..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (912 samples, 9.10%)</title><rect x="151.7" y="547.0" width="107.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.7" y="558.0">java/math/Big..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (50 samples, 0.50%)</title><rect x="154.0" y="531.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.0" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (48 samples, 0.48%)</title><rect x="154.2" y="515.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="157.2" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (44 samples, 0.44%)</title><rect x="159.8" y="531.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="162.8" y="542.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (40 samples, 0.40%)</title><rect x="160.3" y="515.0" width="4.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="163.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (8 samples, 0.08%)</title><rect x="165.1" y="531.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.1" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="166.3" y="531.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="169.3" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (123 samples, 1.23%)</title><rect x="167.3" y="531.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.3" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (123 samples, 1.23%)</title><rect x="167.3" y="515.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.3" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (123 samples, 1.23%)</title><rect x="167.3" y="499.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.3" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (118 samples, 1.18%)</title><rect x="167.6" y="483.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.6" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (5 samples, 0.05%)</title><rect x="169.1" y="467.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.1" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (96 samples, 0.96%)</title><rect x="169.7" y="467.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.7" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="181.0" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.0" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (616 samples, 6.14%)</title><rect x="181.7" y="531.0" width="72.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.7" y="542.0">java/mat..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (615 samples, 6.13%)</title><rect x="181.7" y="515.0" width="72.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="184.7" y="526.0">SharedRu..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (597 samples, 5.96%)</title><rect x="183.9" y="499.0" width="70.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="186.9" y="510.0">montgome..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="254.5" y="531.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="257.5" y="542.0"></text>
</g>
<g>
<title>mulAdd (31 samples, 0.31%)</title><rect x="255.4" y="531.0" width="3.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="258.4" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (4 samples, 0.04%)</title><rect x="259.1" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.1" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (12 samples, 0.12%)</title><rect x="259.5" y="563.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.5" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (4 samples, 0.04%)</title><rect x="260.4" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.4" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (199 samples, 1.99%)</title><rect x="261.2" y="595.0" width="23.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.2" y="606.0">s..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (198 samples, 1.98%)</title><rect x="261.3" y="579.0" width="23.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.3" y="590.0">s..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (186 samples, 1.86%)</title><rect x="262.7" y="563.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.7" y="574.0">j..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (186 samples, 1.86%)</title><rect x="262.7" y="547.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.7" y="558.0">j..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (186 samples, 1.86%)</title><rect x="262.7" y="531.0" width="21.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.7" y="542.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (186 samples, 1.86%)</title><rect x="262.7" y="515.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.7" y="526.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (185 samples, 1.85%)</title><rect x="262.8" y="499.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.8" y="510.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (184 samples, 1.84%)</title><rect x="262.9" y="483.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.9" y="494.0">j..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (178 samples, 1.78%)</title><rect x="263.7" y="467.0" width="20.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="266.7" y="478.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (177 samples, 1.77%)</title><rect x="263.7" y="451.0" width="20.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="266.7" y="462.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (169 samples, 1.69%)</title><rect x="264.5" y="435.0" width="19.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="267.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.05%)</title><rect x="264.8" y="419.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="267.8" y="430.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (156 samples, 1.56%)</title><rect x="265.5" y="419.0" width="18.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="268.5" y="430.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (14 samples, 0.14%)</title><rect x="269.2" y="403.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="272.2" y="414.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (13 samples, 0.13%)</title><rect x="269.2" y="387.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="272.2" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="269.8" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="272.8" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="270.0" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="273.0" y="366.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (35 samples, 0.35%)</title><rect x="270.8" y="403.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.8" y="414.0"></text>
</g>
<g>
<title>JDK_Version::current() (4 samples, 0.04%)</title><rect x="275.1" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="278.1" y="414.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.08%)</title><rect x="275.8" y="403.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="278.8" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.05%)</title><rect x="275.8" y="387.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="278.8" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (5 samples, 0.05%)</title><rect x="275.8" y="371.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="278.8" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.03%)</title><rect x="276.0" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.0" y="366.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (5 samples, 0.05%)</title><rect x="276.7" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="279.7" y="414.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (8 samples, 0.08%)</title><rect x="277.3" y="403.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="280.3" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (36 samples, 0.36%)</title><rect x="279.1" y="403.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="282.1" y="414.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (17 samples, 0.17%)</title><rect x="279.5" y="387.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (13 samples, 0.13%)</title><rect x="279.8" y="371.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="282.8" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (12 samples, 0.12%)</title><rect x="279.8" y="355.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="282.8" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (11 samples, 0.11%)</title><rect x="279.9" y="339.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="282.9" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (8 samples, 0.08%)</title><rect x="281.5" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="284.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (7 samples, 0.07%)</title><rect x="281.7" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.7" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (7 samples, 0.07%)</title><rect x="281.7" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="284.7" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (7 samples, 0.07%)</title><rect x="281.7" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="284.7" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (7 samples, 0.07%)</title><rect x="282.5" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="285.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="283.0" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.0" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="283.0" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="286.0" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.03%)</title><rect x="283.0" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="286.0" y="350.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (56 samples, 0.56%)</title><rect x="284.6" y="595.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.6" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (14 samples, 0.14%)</title><rect x="285.1" y="579.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.1" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (13 samples, 0.13%)</title><rect x="285.2" y="563.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.2" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (3 samples, 0.03%)</title><rect x="286.3" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.3" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (3 samples, 0.03%)</title><rect x="286.3" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.3" y="542.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (3 samples, 0.03%)</title><rect x="286.3" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.3" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (9 samples, 0.09%)</title><rect x="286.7" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="287.0" y="563.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="290.0" y="574.0"></text>
</g>
<g>
<title>java/io/InputStream.read (4 samples, 0.04%)</title><rect x="287.3" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="290.3" y="574.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="287.4" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.4" y="558.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (28 samples, 0.28%)</title><rect x="287.9" y="579.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.9" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (6 samples, 0.06%)</title><rect x="287.9" y="563.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.9" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (6 samples, 0.06%)</title><rect x="287.9" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.9" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (19 samples, 0.19%)</title><rect x="288.6" y="563.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.6" y="574.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (19 samples, 0.19%)</title><rect x="288.6" y="547.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.6" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.09%)</title><rect x="289.1" y="531.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="292.1" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (4 samples, 0.04%)</title><rect x="290.4" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.4" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (4 samples, 0.04%)</title><rect x="290.4" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.4" y="526.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="290.5" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.5" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (5 samples, 0.05%)</title><rect x="291.2" y="595.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.2" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (5 samples, 0.05%)</title><rect x="291.2" y="579.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.2" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (5 samples, 0.05%)</title><rect x="291.2" y="563.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.2" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.04%)</title><rect x="291.3" y="547.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.3" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.04%)</title><rect x="291.3" y="531.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.3" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (4 samples, 0.04%)</title><rect x="291.3" y="515.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.3" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (3 samples, 0.03%)</title><rect x="291.4" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (222 samples, 2.21%)</title><rect x="292.0" y="675.0" width="26.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.0" y="686.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (69 samples, 0.69%)</title><rect x="292.1" y="659.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.&lt;init&gt; (5 samples, 0.05%)</title><rect x="292.4" y="643.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="293.0" y="643.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="293.0" y="627.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (54 samples, 0.54%)</title><rect x="293.7" y="643.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (34 samples, 0.34%)</title><rect x="295.4" y="627.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.4" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.19%)</title><rect x="296.0" y="611.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (3 samples, 0.03%)</title><rect x="297.2" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.2" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.08%)</title><rect x="298.3" y="611.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="301.3" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="299.6" y="627.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="302.6" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (143 samples, 1.43%)</title><rect x="300.3" y="659.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.3" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (143 samples, 1.43%)</title><rect x="300.3" y="643.0" width="16.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (138 samples, 1.38%)</title><rect x="300.5" y="627.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (116 samples, 1.16%)</title><rect x="300.5" y="611.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (87 samples, 0.87%)</title><rect x="300.6" y="595.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (48 samples, 0.48%)</title><rect x="300.6" y="579.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (8 samples, 0.08%)</title><rect x="301.4" y="563.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.4" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (5 samples, 0.05%)</title><rect x="301.6" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.6" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.05%)</title><rect x="301.6" y="531.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="301.7" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="301.7" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.7" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (25 samples, 0.25%)</title><rect x="302.7" y="563.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.7" y="574.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (24 samples, 0.24%)</title><rect x="302.9" y="547.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.9" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (24 samples, 0.24%)</title><rect x="302.9" y="531.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.9" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (3 samples, 0.03%)</title><rect x="303.1" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.1" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="303.1" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="303.1" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.1" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (8 samples, 0.08%)</title><rect x="303.7" y="515.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.7" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (6 samples, 0.06%)</title><rect x="303.9" y="499.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.9" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (6 samples, 0.06%)</title><rect x="303.9" y="483.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.9" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="304.6" y="515.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="304.6" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="304.6" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.6" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (3 samples, 0.03%)</title><rect x="305.2" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="305.2" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.2" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="305.7" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.03%)</title><rect x="305.7" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (39 samples, 0.39%)</title><rect x="306.3" y="579.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (36 samples, 0.36%)</title><rect x="306.5" y="563.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (7 samples, 0.07%)</title><rect x="306.5" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (7 samples, 0.07%)</title><rect x="306.5" y="531.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (7 samples, 0.07%)</title><rect x="306.5" y="515.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.5" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (29 samples, 0.29%)</title><rect x="307.3" y="547.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (29 samples, 0.29%)</title><rect x="307.3" y="531.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (29 samples, 0.29%)</title><rect x="307.3" y="515.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.3" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (18 samples, 0.18%)</title><rect x="308.6" y="499.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.6" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (18 samples, 0.18%)</title><rect x="308.6" y="483.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (11 samples, 0.11%)</title><rect x="309.0" y="467.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.0" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (10 samples, 0.10%)</title><rect x="309.1" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (7 samples, 0.07%)</title><rect x="309.2" y="435.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.2" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (3 samples, 0.03%)</title><rect x="309.3" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.3" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (27 samples, 0.27%)</title><rect x="310.9" y="595.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (15 samples, 0.15%)</title><rect x="310.9" y="579.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.9" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (15 samples, 0.15%)</title><rect x="310.9" y="563.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (5 samples, 0.05%)</title><rect x="311.4" y="547.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.04%)</title><rect x="312.0" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.04%)</title><rect x="312.0" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.0" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.12%)</title><rect x="312.6" y="579.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.12%)</title><rect x="312.6" y="563.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (6 samples, 0.06%)</title><rect x="312.6" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.6" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="313.3" y="547.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="316.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (17 samples, 0.17%)</title><rect x="314.2" y="611.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 0.09%)</title><rect x="314.3" y="595.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.3" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.09%)</title><rect x="314.3" y="579.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.06%)</title><rect x="314.3" y="563.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.3" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="314.3" y="547.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="314.6" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="317.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (7 samples, 0.07%)</title><rect x="315.3" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.07%)</title><rect x="315.3" y="579.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.3" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="316.3" y="611.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="319.3" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.&lt;init&gt; (3 samples, 0.03%)</title><rect x="316.7" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.7" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (9 samples, 0.09%)</title><rect x="317.1" y="659.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="320.1" y="670.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (2,964 samples, 29.57%)</title><rect x="318.2" y="675.0" width="348.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.2" y="686.0">com/yueki/SignedJwtBenchmark.getClaimsSet1</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (2,964 samples, 29.57%)</title><rect x="318.2" y="659.0" width="348.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.2" y="670.0">com/nimbusds/jwt/SignedJWT.getJWTClaimsSet</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (2,932 samples, 29.25%)</title><rect x="318.4" y="643.0" width="345.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.4" y="654.0">com/nimbusds/jose/Payload.toJSONObject</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (1,957 samples, 19.52%)</title><rect x="318.4" y="627.0" width="230.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.4" y="638.0">com/nimbusds/jose/Payload.toSt..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (1,957 samples, 19.52%)</title><rect x="318.4" y="611.0" width="230.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.4" y="622.0">com/nimbusds/jose/util/Base64...</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (1,880 samples, 18.75%)</title><rect x="318.7" y="595.0" width="221.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.7" y="606.0">com/nimbusds/jose/util/Base64..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (1,880 samples, 18.75%)</title><rect x="318.7" y="579.0" width="221.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.7" y="590.0">com/nimbusds/jose/util/Base64..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (1,122 samples, 11.19%)</title><rect x="393.0" y="563.0" width="132.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.0" y="574.0">com/nimbusds/jos..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (56 samples, 0.56%)</title><rect x="518.5" y="547.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="521.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (119 samples, 1.19%)</title><rect x="525.1" y="563.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (118 samples, 1.18%)</title><rect x="525.1" y="547.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.08%)</title><rect x="527.2" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="530.2" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.08%)</title><rect x="527.2" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="530.2" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (8 samples, 0.08%)</title><rect x="527.2" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (16 samples, 0.16%)</title><rect x="528.1" y="531.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.1" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.15%)</title><rect x="528.1" y="515.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.1" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (12 samples, 0.12%)</title><rect x="528.5" y="499.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="531.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (75 samples, 0.75%)</title><rect x="530.0" y="531.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.0" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="539.2" y="563.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="542.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (74 samples, 0.74%)</title><rect x="540.0" y="595.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (72 samples, 0.72%)</title><rect x="540.3" y="579.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (72 samples, 0.72%)</title><rect x="540.3" y="563.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="541.9" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (3 samples, 0.03%)</title><rect x="541.9" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (48 samples, 0.48%)</title><rect x="542.3" y="547.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.07%)</title><rect x="547.9" y="547.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="547.9" y="531.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="547.9" y="515.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="550.9" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="547.9" y="499.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.9" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="547.9" y="483.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.9" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="548.3" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (975 samples, 9.73%)</title><rect x="548.7" y="627.0" width="114.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.7" y="638.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (974 samples, 9.72%)</title><rect x="548.9" y="611.0" width="114.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.9" y="622.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (973 samples, 9.71%)</title><rect x="549.0" y="595.0" width="114.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.0" y="606.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (973 samples, 9.71%)</title><rect x="549.0" y="579.0" width="114.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.0" y="590.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (973 samples, 9.71%)</title><rect x="549.0" y="563.0" width="114.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.0" y="574.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (971 samples, 9.69%)</title><rect x="549.1" y="547.0" width="114.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.1" y="558.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (971 samples, 9.69%)</title><rect x="549.1" y="531.0" width="114.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.1" y="542.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (956 samples, 9.54%)</title><rect x="549.3" y="515.0" width="112.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.3" y="526.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (4 samples, 0.04%)</title><rect x="550.0" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (946 samples, 9.44%)</title><rect x="550.5" y="499.0" width="111.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.5" y="510.0">com/nimbusds/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (946 samples, 9.44%)</title><rect x="550.5" y="483.0" width="111.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.5" y="494.0">com/nimbusds/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (317 samples, 3.16%)</title><rect x="577.8" y="467.0" width="37.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.8" y="478.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (26 samples, 0.26%)</title><rect x="615.1" y="467.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.1" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (24 samples, 0.24%)</title><rect x="615.4" y="451.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="618.4" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (370 samples, 3.69%)</title><rect x="618.2" y="467.0" width="43.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.2" y="478.0">com/..</text>
</g>
<g>
<title>java/lang/String.charAt (252 samples, 2.51%)</title><rect x="632.1" y="451.0" width="29.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.1" y="462.0">ja..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (39 samples, 0.39%)</title><rect x="657.1" y="435.0" width="4.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="660.1" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (9 samples, 0.09%)</title><rect x="661.9" y="515.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (5 samples, 0.05%)</title><rect x="661.9" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="661.9" y="483.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="663.0" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (30 samples, 0.30%)</title><rect x="663.5" y="643.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (4 samples, 0.04%)</title><rect x="663.6" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.6" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (4 samples, 0.04%)</title><rect x="663.6" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.6" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (3 samples, 0.03%)</title><rect x="664.1" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.1" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (12 samples, 0.12%)</title><rect x="664.4" y="627.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.4" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (12 samples, 0.12%)</title><rect x="664.4" y="611.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (12 samples, 0.12%)</title><rect x="664.4" y="595.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (11 samples, 0.11%)</title><rect x="664.4" y="579.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (11 samples, 0.11%)</title><rect x="664.4" y="563.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.06%)</title><rect x="664.7" y="547.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.7" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (5 samples, 0.05%)</title><rect x="664.8" y="531.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (3 samples, 0.03%)</title><rect x="665.9" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="665.9" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="665.9" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (4 samples, 0.04%)</title><rect x="666.2" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="666.2" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="666.2" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.2" y="606.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (3,039 samples, 30.31%)</title><rect x="667.0" y="675.0" width="357.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.0" y="686.0">com/yueki/SignedJwtBenchmark.getClaimsSet2</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (3,038 samples, 30.30%)</title><rect x="667.2" y="659.0" width="357.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.2" y="670.0">com/nimbusds/jwt/SignedJWT.getJWTClaimsSet</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (3,000 samples, 29.93%)</title><rect x="667.4" y="643.0" width="353.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.4" y="654.0">com/nimbusds/jose/Payload.toJSONObject</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (2,008 samples, 20.03%)</title><rect x="667.4" y="627.0" width="236.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.4" y="638.0">com/nimbusds/jose/Payload.toStr..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (2,008 samples, 20.03%)</title><rect x="667.4" y="611.0" width="236.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="670.4" y="622.0">com/nimbusds/jose/util/Base64.d..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (1,931 samples, 19.26%)</title><rect x="667.5" y="595.0" width="227.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.5" y="606.0">com/nimbusds/jose/util/Base64...</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (1,931 samples, 19.26%)</title><rect x="667.5" y="579.0" width="227.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.5" y="590.0">com/nimbusds/jose/util/Base64C..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (1,126 samples, 11.23%)</title><rect x="746.6" y="563.0" width="132.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.6" y="574.0">com/nimbusds/jos..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (69 samples, 0.69%)</title><rect x="871.0" y="547.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (119 samples, 1.19%)</title><rect x="879.1" y="563.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="882.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (118 samples, 1.18%)</title><rect x="879.1" y="547.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="882.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.04%)</title><rect x="882.0" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.0" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.04%)</title><rect x="882.0" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.0" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (4 samples, 0.04%)</title><rect x="882.0" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (25 samples, 0.25%)</title><rect x="882.6" y="531.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.6" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 0.24%)</title><rect x="882.6" y="515.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.6" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (20 samples, 0.20%)</title><rect x="883.0" y="499.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="886.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (62 samples, 0.62%)</title><rect x="885.5" y="531.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.5" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (11 samples, 0.11%)</title><rect x="893.5" y="563.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="896.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (76 samples, 0.76%)</title><rect x="894.8" y="595.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (75 samples, 0.75%)</title><rect x="894.9" y="579.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (75 samples, 0.75%)</title><rect x="894.9" y="563.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (55 samples, 0.55%)</title><rect x="896.7" y="547.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="899.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (5 samples, 0.05%)</title><rect x="903.2" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="903.2" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="903.2" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="906.2" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="903.2" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.2" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="903.2" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (992 samples, 9.90%)</title><rect x="903.7" y="627.0" width="116.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.7" y="638.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (991 samples, 9.89%)</title><rect x="903.9" y="611.0" width="116.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="906.9" y="622.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (991 samples, 9.89%)</title><rect x="903.9" y="595.0" width="116.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.9" y="606.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (991 samples, 9.89%)</title><rect x="903.9" y="579.0" width="116.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.9" y="590.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (991 samples, 9.89%)</title><rect x="903.9" y="563.0" width="116.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.9" y="574.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (989 samples, 9.87%)</title><rect x="904.1" y="547.0" width="116.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="907.1" y="558.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (989 samples, 9.87%)</title><rect x="904.1" y="531.0" width="116.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.1" y="542.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (971 samples, 9.69%)</title><rect x="905.0" y="515.0" width="114.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="908.0" y="526.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (6 samples, 0.06%)</title><rect x="905.4" y="499.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (962 samples, 9.60%)</title><rect x="906.1" y="499.0" width="113.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="909.1" y="510.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (956 samples, 9.54%)</title><rect x="906.1" y="483.0" width="112.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.1" y="494.0">com/nimbusds/j..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (323 samples, 3.22%)</title><rect x="935.5" y="467.0" width="38.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.5" y="478.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.06%)</title><rect x="972.6" y="451.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.04%)</title><rect x="972.6" y="435.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.6" y="446.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.04%)</title><rect x="972.6" y="419.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.6" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (25 samples, 0.25%)</title><rect x="973.5" y="467.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.5" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (22 samples, 0.22%)</title><rect x="973.9" y="451.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="976.9" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (358 samples, 3.57%)</title><rect x="976.5" y="467.0" width="42.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.5" y="478.0">com/..</text>
</g>
<g>
<title>java/lang/String.charAt (248 samples, 2.47%)</title><rect x="989.4" y="451.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="992.4" y="462.0">ja..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (37 samples, 0.37%)</title><rect x="1014.3" y="435.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1017.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="1018.6" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="1018.6" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1018.6" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1021.6" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (7 samples, 0.07%)</title><rect x="1019.3" y="515.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.3" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="1019.7" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="1019.7" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1019.8" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.8" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1019.8" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1022.8" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (36 samples, 0.36%)</title><rect x="1020.5" y="643.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1023.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.06%)</title><rect x="1021.2" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.2" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.05%)</title><rect x="1021.3" y="611.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.3" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (10 samples, 0.10%)</title><rect x="1021.9" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.9" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (10 samples, 0.10%)</title><rect x="1021.9" y="611.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1024.9" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (10 samples, 0.10%)</title><rect x="1021.9" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1024.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (8 samples, 0.08%)</title><rect x="1022.0" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (8 samples, 0.08%)</title><rect x="1022.0" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1025.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (4 samples, 0.04%)</title><rect x="1023.1" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1026.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="1023.1" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="1023.2" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (3 samples, 0.03%)</title><rect x="1023.7" y="627.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="1023.7" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1026.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="1023.7" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1026.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (5 samples, 0.05%)</title><rect x="1024.0" y="627.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1027.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.05%)</title><rect x="1024.0" y="611.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1027.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="1024.0" y="595.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.0" y="606.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (3 samples, 0.03%)</title><rect x="1024.9" y="691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1027.9" y="702.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_large_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (187 samples, 1.87%)</title><rect x="1025.2" y="723.0" width="22.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1028.2" y="734.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (187 samples, 1.87%)</title><rect x="1025.2" y="707.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1028.2" y="718.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (142 samples, 1.42%)</title><rect x="1025.4" y="691.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1028.4" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (115 samples, 1.15%)</title><rect x="1025.8" y="675.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1028.8" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (115 samples, 1.15%)</title><rect x="1025.8" y="659.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1028.8" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (3 samples, 0.03%)</title><rect x="1026.0" y="643.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.0" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (3 samples, 0.03%)</title><rect x="1026.0" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.0" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (3 samples, 0.03%)</title><rect x="1026.0" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1029.0" y="622.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (3 samples, 0.03%)</title><rect x="1026.0" y="595.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.0" y="606.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (3 samples, 0.03%)</title><rect x="1026.0" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.0" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.03%)</title><rect x="1026.0" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1029.0" y="574.0"></text>
</g>
<g>
<title>java/security/Signature.sign (106 samples, 1.06%)</title><rect x="1026.4" y="643.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.4" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (106 samples, 1.06%)</title><rect x="1026.4" y="627.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.4" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (106 samples, 1.06%)</title><rect x="1026.4" y="611.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1029.4" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (106 samples, 1.06%)</title><rect x="1026.4" y="595.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1029.4" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (106 samples, 1.06%)</title><rect x="1026.4" y="579.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1029.4" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (99 samples, 0.99%)</title><rect x="1026.6" y="563.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.6" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (98 samples, 0.98%)</title><rect x="1026.7" y="547.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.7" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (8 samples, 0.08%)</title><rect x="1027.1" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.1" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (8 samples, 0.08%)</title><rect x="1027.1" y="515.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1030.1" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="1028.3" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1031.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (4 samples, 0.04%)</title><rect x="1028.3" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.3" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (4 samples, 0.04%)</title><rect x="1028.3" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1031.3" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="1028.3" y="483.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1031.3" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (14 samples, 0.14%)</title><rect x="1028.7" y="531.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.7" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (12 samples, 0.12%)</title><rect x="1029.0" y="515.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1032.0" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (12 samples, 0.12%)</title><rect x="1029.0" y="499.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.0" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (12 samples, 0.12%)</title><rect x="1029.0" y="483.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1032.0" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (67 samples, 0.67%)</title><rect x="1030.4" y="531.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.4" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (67 samples, 0.67%)</title><rect x="1030.4" y="515.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.4" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (61 samples, 0.61%)</title><rect x="1030.9" y="499.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1033.9" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1038.4" y="563.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1041.4" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="1038.5" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1041.5" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (3 samples, 0.03%)</title><rect x="1038.5" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1041.5" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3 samples, 0.03%)</title><rect x="1038.5" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1041.5" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.04%)</title><rect x="1038.9" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1041.9" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.04%)</title><rect x="1038.9" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.9" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (4 samples, 0.04%)</title><rect x="1038.9" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1041.9" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (4 samples, 0.04%)</title><rect x="1038.9" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.9" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (4 samples, 0.04%)</title><rect x="1038.9" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1041.9" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (4 samples, 0.04%)</title><rect x="1038.9" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1041.9" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (4 samples, 0.04%)</title><rect x="1038.9" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1041.9" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (4 samples, 0.04%)</title><rect x="1038.9" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.9" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (4 samples, 0.04%)</title><rect x="1038.9" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1041.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (14 samples, 0.14%)</title><rect x="1039.3" y="675.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1042.3" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (11 samples, 0.11%)</title><rect x="1039.3" y="659.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1042.3" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (11 samples, 0.11%)</title><rect x="1039.3" y="643.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (3 samples, 0.03%)</title><rect x="1039.5" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (3 samples, 0.03%)</title><rect x="1039.5" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (3 samples, 0.03%)</title><rect x="1039.5" y="595.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1042.5" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="1039.5" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.5" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (3 samples, 0.03%)</title><rect x="1039.5" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1042.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (6 samples, 0.06%)</title><rect x="1039.8" y="627.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.8" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (5 samples, 0.05%)</title><rect x="1039.8" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (4 samples, 0.04%)</title><rect x="1039.9" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (4 samples, 0.04%)</title><rect x="1039.9" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.9" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (4 samples, 0.04%)</title><rect x="1039.9" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (4 samples, 0.04%)</title><rect x="1039.9" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1042.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (4 samples, 0.04%)</title><rect x="1039.9" y="531.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1042.9" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (4 samples, 0.04%)</title><rect x="1039.9" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (4 samples, 0.04%)</title><rect x="1039.9" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1042.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (4 samples, 0.04%)</title><rect x="1039.9" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1042.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (4 samples, 0.04%)</title><rect x="1039.9" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (4 samples, 0.04%)</title><rect x="1039.9" y="451.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.9" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (4 samples, 0.04%)</title><rect x="1039.9" y="435.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1042.9" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (4 samples, 0.04%)</title><rect x="1039.9" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.9" y="430.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1041.1" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.1" y="686.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (3 samples, 0.03%)</title><rect x="1041.1" y="659.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1044.1" y="670.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (6 samples, 0.06%)</title><rect x="1041.5" y="675.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1044.5" y="686.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (6 samples, 0.06%)</title><rect x="1041.5" y="659.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.5" y="670.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (6 samples, 0.06%)</title><rect x="1041.5" y="643.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1044.5" y="654.0"></text>
</g>
<g>
<title>java/util/Random.nextInt (3 samples, 0.03%)</title><rect x="1041.7" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.7" y="638.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (40 samples, 0.40%)</title><rect x="1042.4" y="691.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1045.4" y="702.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (40 samples, 0.40%)</title><rect x="1042.4" y="675.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.4" y="686.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (40 samples, 0.40%)</title><rect x="1042.4" y="659.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1045.4" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (39 samples, 0.39%)</title><rect x="1042.4" y="643.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.4" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (39 samples, 0.39%)</title><rect x="1042.4" y="627.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.4" y="638.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="1042.4" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.4" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1042.4" y="595.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.4" y="606.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (3 samples, 0.03%)</title><rect x="1042.5" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1045.5" y="590.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (3 samples, 0.03%)</title><rect x="1042.5" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.5" y="574.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (34 samples, 0.34%)</title><rect x="1043.0" y="611.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.0" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (34 samples, 0.34%)</title><rect x="1043.0" y="595.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.0" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (4 samples, 0.04%)</title><rect x="1043.0" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.0" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (4 samples, 0.04%)</title><rect x="1043.0" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.0" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (30 samples, 0.30%)</title><rect x="1043.5" y="579.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.5" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (29 samples, 0.29%)</title><rect x="1043.6" y="563.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.6" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (29 samples, 0.29%)</title><rect x="1043.6" y="547.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (6 samples, 0.06%)</title><rect x="1043.9" y="531.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.9" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (3 samples, 0.03%)</title><rect x="1043.9" y="515.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1046.9" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="1044.3" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.3" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (3 samples, 0.03%)</title><rect x="1044.3" y="499.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.3" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="1044.3" y="483.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1047.3" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (20 samples, 0.20%)</title><rect x="1044.6" y="531.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.6" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (19 samples, 0.19%)</title><rect x="1044.8" y="515.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.8" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (19 samples, 0.19%)</title><rect x="1044.8" y="499.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.8" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (18 samples, 0.18%)</title><rect x="1044.9" y="483.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1047.9" y="494.0"></text>
</g>
<g>
<title>thread_start (1,208 samples, 12.05%)</title><rect x="1047.8" y="931.0" width="142.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1050.8" y="942.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,208 samples, 12.05%)</title><rect x="1047.8" y="915.0" width="142.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1050.8" y="926.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,208 samples, 12.05%)</title><rect x="1047.8" y="899.0" width="142.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1050.8" y="910.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (1,208 samples, 12.05%)</title><rect x="1047.8" y="883.0" width="142.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1050.8" y="894.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (170 samples, 1.70%)</title><rect x="1047.8" y="867.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="878.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (40 samples, 0.40%)</title><rect x="1047.8" y="851.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.8" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (34 samples, 0.34%)</title><rect x="1047.8" y="835.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.8" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (34 samples, 0.34%)</title><rect x="1047.8" y="819.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.8" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (30 samples, 0.30%)</title><rect x="1047.9" y="803.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1050.9" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (30 samples, 0.30%)</title><rect x="1047.9" y="787.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.9" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (27 samples, 0.27%)</title><rect x="1047.9" y="771.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1050.9" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1051.5" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.5" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1051.5" y="787.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1054.5" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (5 samples, 0.05%)</title><rect x="1051.9" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.9" y="846.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.05%)</title><rect x="1051.9" y="819.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1054.9" y="830.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.05%)</title><rect x="1052.5" y="851.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.5" y="862.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (5 samples, 0.05%)</title><rect x="1052.5" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.5" y="846.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (16 samples, 0.16%)</title><rect x="1053.1" y="851.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.1" y="862.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (13 samples, 0.13%)</title><rect x="1053.1" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.1" y="846.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (11 samples, 0.11%)</title><rect x="1053.1" y="819.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.1" y="830.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (11 samples, 0.11%)</title><rect x="1053.1" y="803.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.1" y="814.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (96 samples, 0.96%)</title><rect x="1055.0" y="851.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.0" y="862.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (5 samples, 0.05%)</title><rect x="1055.2" y="835.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.2" y="846.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (5 samples, 0.05%)</title><rect x="1055.2" y="819.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.2" y="830.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (4 samples, 0.04%)</title><rect x="1055.3" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.3" y="814.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="1055.3" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.3" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1055.3" y="771.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1058.3" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (79 samples, 0.79%)</title><rect x="1055.9" y="835.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.9" y="846.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (76 samples, 0.76%)</title><rect x="1056.3" y="819.0" width="8.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1059.3" y="830.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.09%)</title><rect x="1065.2" y="835.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1068.2" y="846.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (10 samples, 0.10%)</title><rect x="1066.3" y="851.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.3" y="862.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (10 samples, 0.10%)</title><rect x="1066.3" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.3" y="846.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (5 samples, 0.05%)</title><rect x="1066.8" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.8" y="830.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (3 samples, 0.03%)</title><rect x="1067.0" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (3 samples, 0.03%)</title><rect x="1067.0" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.0" y="798.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (3 samples, 0.03%)</title><rect x="1067.0" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.0" y="782.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="1067.5" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.5" y="862.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="1067.5" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1067.5" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.5" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1067.5" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.5" y="814.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="1067.5" y="787.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1070.5" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="1067.5" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (928 samples, 9.26%)</title><rect x="1067.8" y="867.0" width="109.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.8" y="878.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (928 samples, 9.26%)</title><rect x="1067.8" y="851.0" width="109.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.8" y="862.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (916 samples, 9.14%)</title><rect x="1067.8" y="835.0" width="107.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.8" y="846.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (898 samples, 8.96%)</title><rect x="1067.8" y="819.0" width="105.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.8" y="830.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (859 samples, 8.57%)</title><rect x="1067.9" y="803.0" width="101.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.9" y="814.0">C2Compiler::..</text>
</g>
<g>
<title>Arena::~Arena() (3 samples, 0.03%)</title><rect x="1067.9" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.9" y="798.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (3 samples, 0.03%)</title><rect x="1067.9" y="771.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.9" y="782.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1067.9" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.9" y="766.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="1067.9" y="739.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1070.9" y="750.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="1067.9" y="723.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1070.9" y="734.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.03%)</title><rect x="1067.9" y="707.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1070.9" y="718.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (855 samples, 8.53%)</title><rect x="1068.3" y="787.0" width="100.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.3" y="798.0">Compile::Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (6 samples, 0.06%)</title><rect x="1068.3" y="771.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.3" y="782.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (6 samples, 0.06%)</title><rect x="1068.3" y="755.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (6 samples, 0.06%)</title><rect x="1068.3" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (6 samples, 0.06%)</title><rect x="1068.3" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (6 samples, 0.06%)</title><rect x="1068.3" y="707.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.04%)</title><rect x="1068.4" y="691.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1068.5" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.03%)</title><rect x="1068.5" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.5" y="670.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (305 samples, 3.04%)</title><rect x="1069.0" y="771.0" width="35.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.0" y="782.0">Com..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.04%)</title><rect x="1069.0" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.0" y="766.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.03%)</title><rect x="1069.0" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.0" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.09%)</title><rect x="1069.5" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.5" y="766.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.03%)</title><rect x="1069.6" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.6" y="750.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (4 samples, 0.04%)</title><rect x="1069.9" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.9" y="750.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (4 samples, 0.04%)</title><rect x="1069.9" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.9" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.03%)</title><rect x="1070.1" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.1" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.03%)</title><rect x="1070.1" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.1" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (26 samples, 0.26%)</title><rect x="1070.5" y="755.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.5" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.04%)</title><rect x="1070.6" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.6" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (20 samples, 0.20%)</title><rect x="1071.1" y="739.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.1" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.04%)</title><rect x="1071.4" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.4" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.06%)</title><rect x="1072.1" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.1" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1072.1" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.1" y="718.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (3 samples, 0.03%)</title><rect x="1073.7" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.7" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (14 samples, 0.14%)</title><rect x="1074.2" y="755.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (14 samples, 0.14%)</title><rect x="1074.2" y="739.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.2" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (8 samples, 0.08%)</title><rect x="1074.4" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (6 samples, 0.06%)</title><rect x="1074.6" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="718.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (3 samples, 0.03%)</title><rect x="1075.0" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1075.4" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (244 samples, 2.43%)</title><rect x="1076.1" y="755.0" width="28.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.1" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (13 samples, 0.13%)</title><rect x="1077.0" y="739.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (20 samples, 0.20%)</title><rect x="1078.5" y="739.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1078.8" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.8" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (9 samples, 0.09%)</title><rect x="1079.6" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.6" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1079.7" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.7" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1080.3" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (17 samples, 0.17%)</title><rect x="1080.9" y="739.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.9" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1081.4" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.4" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.07%)</title><rect x="1082.1" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.1" y="734.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (4 samples, 0.04%)</title><rect x="1082.2" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (26 samples, 0.26%)</title><rect x="1082.9" y="739.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.9" y="750.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.05%)</title><rect x="1084.9" y="723.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (44 samples, 0.44%)</title><rect x="1085.9" y="739.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.9" y="750.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.03%)</title><rect x="1087.9" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (12 samples, 0.12%)</title><rect x="1089.0" y="723.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.0" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1089.0" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.0" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1089.6" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (25 samples, 0.25%)</title><rect x="1091.4" y="739.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.4" y="750.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (5 samples, 0.05%)</title><rect x="1093.5" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.03%)</title><rect x="1093.7" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (17 samples, 0.17%)</title><rect x="1094.5" y="739.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.07%)</title><rect x="1095.6" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.6" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 0.11%)</title><rect x="1096.8" y="739.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.8" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 0.08%)</title><rect x="1097.1" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.1" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.06%)</title><rect x="1097.4" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.4" y="718.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1097.4" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.05%)</title><rect x="1098.1" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.1" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 0.05%)</title><rect x="1098.1" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.1" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.04%)</title><rect x="1098.7" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (9 samples, 0.09%)</title><rect x="1099.1" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.1" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.07%)</title><rect x="1099.4" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.4" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (35 samples, 0.35%)</title><rect x="1100.2" y="739.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.2" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (14 samples, 0.14%)</title><rect x="1102.5" y="723.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.5" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.06%)</title><rect x="1103.1" y="707.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (3 samples, 0.03%)</title><rect x="1103.5" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.5" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (3 samples, 0.03%)</title><rect x="1103.5" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.5" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (506 samples, 5.05%)</title><rect x="1105.0" y="771.0" width="59.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.0" y="782.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.03%)</title><rect x="1105.0" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.03%)</title><rect x="1105.6" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.03%)</title><rect x="1105.6" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.6" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (7 samples, 0.07%)</title><rect x="1106.0" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (465 samples, 4.64%)</title><rect x="1106.9" y="755.0" width="54.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.9" y="766.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1107.0" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.0" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1107.0" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.0" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1107.4" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.4" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1107.4" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (16 samples, 0.16%)</title><rect x="1107.8" y="739.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.8" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.04%)</title><rect x="1109.0" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.10%)</title><rect x="1109.7" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.03%)</title><rect x="1110.3" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (394 samples, 3.93%)</title><rect x="1110.9" y="739.0" width="46.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.9" y="750.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (379 samples, 3.78%)</title><rect x="1112.7" y="723.0" width="44.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.7" y="734.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (367 samples, 3.66%)</title><rect x="1113.3" y="707.0" width="43.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.3" y="718.0">Phas..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (3 samples, 0.03%)</title><rect x="1115.4" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.07%)</title><rect x="1116.0" y="691.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (3 samples, 0.03%)</title><rect x="1117.1" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (331 samples, 3.30%)</title><rect x="1117.5" y="691.0" width="39.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.5" y="702.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (59 samples, 0.59%)</title><rect x="1122.3" y="675.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (231 samples, 2.30%)</title><rect x="1129.3" y="675.0" width="27.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.3" y="686.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (3 samples, 0.03%)</title><rect x="1156.5" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (4 samples, 0.04%)</title><rect x="1156.8" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.07%)</title><rect x="1157.3" y="739.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (12 samples, 0.12%)</title><rect x="1158.3" y="739.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.07%)</title><rect x="1158.9" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.03%)</title><rect x="1159.4" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.10%)</title><rect x="1159.7" y="739.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.10%)</title><rect x="1159.7" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.7" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1160.5" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (15 samples, 0.15%)</title><rect x="1161.8" y="755.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 0.15%)</title><rect x="1161.8" y="739.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.8" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1163.0" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.03%)</title><rect x="1163.0" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1163.0" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1163.0" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.03%)</title><rect x="1163.6" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="1163.6" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.03%)</title><rect x="1163.6" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1164.2" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.2" y="766.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1164.2" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1164.2" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="1164.2" y="707.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="1164.2" y="691.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1167.2" y="702.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.03%)</title><rect x="1164.2" y="675.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (33 samples, 0.33%)</title><rect x="1164.8" y="771.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (33 samples, 0.33%)</title><rect x="1164.8" y="755.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (31 samples, 0.31%)</title><rect x="1164.8" y="739.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (31 samples, 0.31%)</title><rect x="1164.8" y="723.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (31 samples, 0.31%)</title><rect x="1164.8" y="707.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (31 samples, 0.31%)</title><rect x="1164.8" y="691.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.23%)</title><rect x="1165.2" y="675.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.23%)</title><rect x="1165.2" y="659.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (22 samples, 0.22%)</title><rect x="1165.2" y="643.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (22 samples, 0.22%)</title><rect x="1165.2" y="627.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (22 samples, 0.22%)</title><rect x="1165.2" y="611.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.19%)</title><rect x="1165.2" y="595.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.16%)</title><rect x="1165.4" y="579.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.16%)</title><rect x="1165.4" y="563.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.15%)</title><rect x="1165.4" y="547.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.14%)</title><rect x="1165.5" y="531.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.13%)</title><rect x="1165.6" y="515.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.13%)</title><rect x="1165.6" y="499.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.11%)</title><rect x="1165.6" y="483.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.11%)</title><rect x="1165.6" y="467.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.11%)</title><rect x="1165.6" y="451.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.11%)</title><rect x="1165.6" y="435.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.11%)</title><rect x="1165.6" y="419.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.09%)</title><rect x="1165.6" y="403.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1165.6" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1165.6" y="371.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1165.6" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1165.6" y="339.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.07%)</title><rect x="1165.6" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.07%)</title><rect x="1165.6" y="307.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1165.8" y="291.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1165.8" y="275.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1165.8" y="259.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1165.8" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1165.8" y="227.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1165.8" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1165.8" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1165.8" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1165.8" y="163.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1165.8" y="147.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1165.8" y="131.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1165.8" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.8" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1165.8" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1165.8" y="83.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1165.8" y="67.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.8" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1165.8" y="51.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1165.8" y="35.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.9" y="675.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1168.0" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1168.0" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1168.0" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1168.0" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1168.0" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1168.0" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1168.0" y="563.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1168.0" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1168.0" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1168.0" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1168.0" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1168.0" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1168.0" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1168.0" y="451.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1168.0" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1168.0" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1168.0" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (34 samples, 0.34%)</title><rect x="1169.2" y="803.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (33 samples, 0.33%)</title><rect x="1169.2" y="787.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (33 samples, 0.33%)</title><rect x="1169.2" y="771.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (27 samples, 0.27%)</title><rect x="1169.2" y="755.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() (16 samples, 0.16%)</title><rect x="1169.2" y="739.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (13 samples, 0.13%)</title><rect x="1169.2" y="723.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.2" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (13 samples, 0.13%)</title><rect x="1169.2" y="707.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (13 samples, 0.13%)</title><rect x="1169.2" y="691.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (12 samples, 0.12%)</title><rect x="1169.2" y="675.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (10 samples, 0.10%)</title><rect x="1169.3" y="659.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (8 samples, 0.08%)</title><rect x="1169.5" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1169.5" y="627.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1169.5" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (5 samples, 0.05%)</title><rect x="1171.0" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (4 samples, 0.04%)</title><rect x="1171.2" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (4 samples, 0.04%)</title><rect x="1171.2" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 0.06%)</title><rect x="1171.6" y="739.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.06%)</title><rect x="1171.6" y="723.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.03%)</title><rect x="1171.8" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.03%)</title><rect x="1171.8" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (6 samples, 0.06%)</title><rect x="1172.3" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (6 samples, 0.06%)</title><rect x="1172.3" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1172.6" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (18 samples, 0.18%)</title><rect x="1173.5" y="819.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (16 samples, 0.16%)</title><rect x="1173.5" y="803.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (16 samples, 0.16%)</title><rect x="1173.5" y="787.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.15%)</title><rect x="1173.5" y="771.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.15%)</title><rect x="1173.5" y="755.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (12 samples, 0.12%)</title><rect x="1175.6" y="835.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.04%)</title><rect x="1175.6" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.04%)</title><rect x="1175.6" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.04%)</title><rect x="1175.6" y="787.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.08%)</title><rect x="1176.1" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.08%)</title><rect x="1176.1" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (8 samples, 0.08%)</title><rect x="1176.1" y="787.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1179.1" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (8 samples, 0.08%)</title><rect x="1176.1" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.08%)</title><rect x="1176.1" y="755.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1179.1" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (44 samples, 0.44%)</title><rect x="1177.2" y="867.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (44 samples, 0.44%)</title><rect x="1177.2" y="851.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.03%)</title><rect x="1177.5" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (37 samples, 0.37%)</title><rect x="1178.0" y="835.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (37 samples, 0.37%)</title><rect x="1178.0" y="819.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (37 samples, 0.37%)</title><rect x="1178.0" y="803.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (37 samples, 0.37%)</title><rect x="1178.0" y="787.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="798.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (37 samples, 0.37%)</title><rect x="1178.0" y="771.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (36 samples, 0.36%)</title><rect x="1178.1" y="755.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="766.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (4 samples, 0.04%)</title><rect x="1178.2" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::print_on(outputStream*) const (3 samples, 0.03%)</title><rect x="1178.3" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>MemoryService::gc_begin(bool, bool, bool, bool, bool) (4 samples, 0.04%)</title><rect x="1179.1" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (4 samples, 0.04%)</title><rect x="1179.1" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (19 samples, 0.19%)</title><rect x="1179.9" y="739.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (18 samples, 0.18%)</title><rect x="1179.9" y="723.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>WatcherThread::run() (65 samples, 0.65%)</title><rect x="1182.3" y="867.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.03%)</title><rect x="1182.3" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (60 samples, 0.60%)</title><rect x="1182.8" y="851.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (60 samples, 0.60%)</title><rect x="1182.8" y="835.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (60 samples, 0.60%)</title><rect x="1182.8" y="819.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (59 samples, 0.59%)</title><rect x="1182.9" y="803.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 0.59%)</title><rect x="1182.9" y="787.0" width="7.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
</g>
</svg>

