<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (9,827 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (8,600 samples, 87.51%)</title><rect x="10.2" y="755.0" width="1032.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.2" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,600 samples, 87.51%)</title><rect x="10.2" y="739.0" width="1032.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.2" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,600 samples, 87.51%)</title><rect x="10.2" y="723.0" width="1032.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.2" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,600 samples, 87.51%)</title><rect x="10.2" y="707.0" width="1032.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="718.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,599 samples, 87.50%)</title><rect x="10.2" y="691.0" width="1032.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="702.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,599 samples, 87.50%)</title><rect x="10.2" y="675.0" width="1032.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="686.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,599 samples, 87.50%)</title><rect x="10.2" y="659.0" width="1032.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="670.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,599 samples, 87.50%)</title><rect x="10.2" y="643.0" width="1032.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="654.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,599 samples, 87.50%)</title><rect x="10.2" y="627.0" width="1032.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.2" y="638.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,599 samples, 87.50%)</title><rect x="10.2" y="611.0" width="1032.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.2" y="622.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,599 samples, 87.50%)</title><rect x="10.2" y="595.0" width="1032.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="606.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,599 samples, 87.50%)</title><rect x="10.2" y="579.0" width="1032.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.2" y="590.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_medium_jmhTest.JwtParse_medium_Throughput (8,599 samples, 87.50%)</title><rect x="10.2" y="563.0" width="1032.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="574.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_medium_jmhTest.JwtParse_medium_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_medium_jmhTest.JwtParse_medium_thrpt_jmhStub (8,447 samples, 85.96%)</title><rect x="10.2" y="547.0" width="1014.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="558.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_medium_jmhTest.JwtParse_medium_thrpt_jmhStub</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_medium (8,440 samples, 85.89%)</title><rect x="11.1" y="531.0" width="1013.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.1" y="542.0">com/yueki/SignedJwtBenchmark.JwtParse_medium</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (14 samples, 0.14%)</title><rect x="11.2" y="515.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.2" y="526.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.parseSignedJwt (8,425 samples, 85.73%)</title><rect x="12.9" y="515.0" width="1011.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.9" y="526.0">com/yueki/SignedJwtBenchmark.parseSignedJwt</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (6,136 samples, 62.44%)</title><rect x="13.4" y="499.0" width="736.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.4" y="510.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (76 samples, 0.77%)</title><rect x="14.8" y="483.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (76 samples, 0.77%)</title><rect x="14.8" y="467.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (60 samples, 0.61%)</title><rect x="16.7" y="451.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="17.3" y="435.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.3" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="17.3" y="419.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="17.3" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="20.3" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="17.3" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="17.8" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="446.0"></text>
</g>
<g>
<title>java/lang/System.getSecurityManager (3 samples, 0.03%)</title><rect x="18.2" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="18.2" y="419.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="21.2" y="430.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.onUnmappableCharacter (3 samples, 0.03%)</title><rect x="18.5" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (38 samples, 0.39%)</title><rect x="18.9" y="435.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="23.4" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="23.4" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="23.4" y="403.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.4" y="414.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="23.4" y="387.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.4" y="398.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="23.4" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.4" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (6,044 samples, 61.50%)</title><rect x="23.9" y="483.0" width="725.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.9" y="494.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/CriticalHeaderParamsDeferral.headerPasses (3 samples, 0.03%)</title><rect x="24.8" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.8" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (3 samples, 0.03%)</title><rect x="24.8" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.8" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (49 samples, 0.50%)</title><rect x="25.1" y="467.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (46 samples, 0.47%)</title><rect x="25.5" y="451.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.5" y="462.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (6 samples, 0.06%)</title><rect x="25.5" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.03%)</title><rect x="25.9" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.9" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getServices (3 samples, 0.03%)</title><rect x="26.2" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.2" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (35 samples, 0.36%)</title><rect x="26.6" y="435.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.6" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (35 samples, 0.36%)</title><rect x="26.6" y="419.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.6" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (35 samples, 0.36%)</title><rect x="26.6" y="403.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.6" y="414.0"></text>
</g>
<g>
<title>java/security/Provider.getService (31 samples, 0.32%)</title><rect x="26.7" y="387.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.7" y="398.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (11 samples, 0.11%)</title><rect x="27.7" y="371.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="382.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (11 samples, 0.11%)</title><rect x="27.7" y="355.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (11 samples, 0.11%)</title><rect x="27.7" y="339.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (4 samples, 0.04%)</title><rect x="28.3" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.3" y="334.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (4 samples, 0.04%)</title><rect x="28.3" y="307.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.3" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.11%)</title><rect x="29.1" y="371.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.08%)</title><rect x="29.1" y="355.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.1" y="366.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (6 samples, 0.06%)</title><rect x="29.3" y="339.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="30.1" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="366.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (3 samples, 0.03%)</title><rect x="30.1" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.1" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="30.4" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.4" y="398.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="30.4" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.4" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jca/JCAContext.getProvider (4 samples, 0.04%)</title><rect x="31.0" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (266 samples, 2.71%)</title><rect x="31.5" y="467.0" width="31.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.5" y="478.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (266 samples, 2.71%)</title><rect x="31.5" y="451.0" width="31.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.5" y="462.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (152 samples, 1.55%)</title><rect x="41.3" y="435.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (8 samples, 0.08%)</title><rect x="58.6" y="419.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (31 samples, 0.32%)</title><rect x="59.6" y="435.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (31 samples, 0.32%)</title><rect x="59.6" y="419.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="60.1" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="60.1" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (21 samples, 0.21%)</title><rect x="60.4" y="403.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (3 samples, 0.03%)</title><rect x="63.0" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.0" y="414.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (141 samples, 1.43%)</title><rect x="63.4" y="467.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.4" y="478.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (141 samples, 1.43%)</title><rect x="63.4" y="451.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.4" y="462.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (140 samples, 1.42%)</title><rect x="63.6" y="435.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.6" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (33 samples, 0.34%)</title><rect x="64.2" y="419.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (23 samples, 0.23%)</title><rect x="65.2" y="403.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.13%)</title><rect x="66.2" y="387.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.2" y="398.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (7 samples, 0.07%)</title><rect x="68.1" y="419.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (7 samples, 0.07%)</title><rect x="68.1" y="403.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.1" y="414.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (5 samples, 0.05%)</title><rect x="68.4" y="387.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.4" y="398.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (71 samples, 0.72%)</title><rect x="69.0" y="419.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.0" y="430.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (70 samples, 0.71%)</title><rect x="69.1" y="403.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (16 samples, 0.16%)</title><rect x="69.1" y="387.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="72.1" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (16 samples, 0.16%)</title><rect x="69.1" y="371.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (6 samples, 0.06%)</title><rect x="69.4" y="355.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Class.checkInitted (3 samples, 0.03%)</title><rect x="69.4" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (3 samples, 0.03%)</title><rect x="69.8" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.8" y="350.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (6 samples, 0.06%)</title><rect x="70.3" y="355.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.3" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (53 samples, 0.54%)</title><rect x="71.0" y="387.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.0" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (52 samples, 0.53%)</title><rect x="71.0" y="371.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (51 samples, 0.52%)</title><rect x="71.1" y="355.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.1" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (50 samples, 0.51%)</title><rect x="71.2" y="339.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.2" y="350.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (50 samples, 0.51%)</title><rect x="71.2" y="323.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.2" y="334.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (50 samples, 0.51%)</title><rect x="71.2" y="307.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.2" y="318.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (50 samples, 0.51%)</title><rect x="71.2" y="291.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.2" y="302.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (5 samples, 0.05%)</title><rect x="71.2" y="275.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.05%)</title><rect x="71.2" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.2" y="270.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (44 samples, 0.45%)</title><rect x="72.0" y="275.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.0" y="286.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (24 samples, 0.24%)</title><rect x="72.0" y="259.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.0" y="270.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (21 samples, 0.21%)</title><rect x="72.0" y="243.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (4 samples, 0.04%)</title><rect x="72.1" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="75.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (4 samples, 0.04%)</title><rect x="72.1" y="211.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.1" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 0.13%)</title><rect x="72.6" y="227.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.6" y="238.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 0.11%)</title><rect x="72.6" y="211.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.6" y="222.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.03%)</title><rect x="72.7" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.7" y="206.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="72.7" y="179.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="75.7" y="190.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (7 samples, 0.07%)</title><rect x="73.0" y="195.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.0" y="206.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.&lt;init&gt; (7 samples, 0.07%)</title><rect x="73.0" y="179.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.0" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.&lt;init&gt; (7 samples, 0.07%)</title><rect x="73.0" y="163.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.0" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.&lt;init&gt; (3 samples, 0.03%)</title><rect x="73.5" y="147.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.5" y="158.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (3 samples, 0.03%)</title><rect x="74.5" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.5" y="254.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (19 samples, 0.19%)</title><rect x="74.8" y="259.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.8" y="270.0"></text>
</g>
<g>
<title>java/security/Provider.getService (17 samples, 0.17%)</title><rect x="74.8" y="243.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.8" y="254.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (4 samples, 0.04%)</title><rect x="75.4" y="227.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.4" y="238.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (4 samples, 0.04%)</title><rect x="75.4" y="211.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (4 samples, 0.04%)</title><rect x="75.4" y="195.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.4" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (8 samples, 0.08%)</title><rect x="75.9" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.08%)</title><rect x="75.9" y="211.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.9" y="222.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (5 samples, 0.05%)</title><rect x="76.3" y="195.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.3" y="206.0"></text>
</g>
<g>
<title>java/security/Signature.access$200 (22 samples, 0.22%)</title><rect x="77.5" y="419.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.5" y="430.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (22 samples, 0.22%)</title><rect x="77.5" y="403.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (22 samples, 0.22%)</title><rect x="77.5" y="387.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (12 samples, 0.12%)</title><rect x="78.0" y="371.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.0" y="382.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (7 samples, 0.07%)</title><rect x="78.6" y="355.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (6 samples, 0.06%)</title><rect x="79.4" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="82.4" y="382.0"></text>
</g>
<g>
<title>java/security/Signature.update (461 samples, 4.69%)</title><rect x="80.4" y="467.0" width="55.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.4" y="478.0">java/..</text>
</g>
<g>
<title>java/security/Signature.update (461 samples, 4.69%)</title><rect x="80.4" y="451.0" width="55.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.4" y="462.0">java/..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (461 samples, 4.69%)</title><rect x="80.4" y="435.0" width="55.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.4" y="446.0">java/..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (459 samples, 4.67%)</title><rect x="80.6" y="419.0" width="55.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.6" y="430.0">sun/s..</text>
</g>
<g>
<title>java/security/MessageDigest.update (459 samples, 4.67%)</title><rect x="80.6" y="403.0" width="55.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.6" y="414.0">java/..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (459 samples, 4.67%)</title><rect x="80.6" y="387.0" width="55.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.6" y="398.0">java/..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (459 samples, 4.67%)</title><rect x="80.6" y="371.0" width="55.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.6" y="382.0">sun/s..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (457 samples, 4.65%)</title><rect x="80.8" y="355.0" width="54.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.8" y="366.0">sun/s..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (456 samples, 4.64%)</title><rect x="81.0" y="339.0" width="54.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="350.0">sun/s..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (19 samples, 0.19%)</title><rect x="129.1" y="323.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.1" y="334.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (36 samples, 0.37%)</title><rect x="131.4" y="323.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.4" y="334.0"></text>
</g>
<g>
<title>java/security/Signature.verify (5,113 samples, 52.03%)</title><rect x="135.7" y="467.0" width="614.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.7" y="478.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (5,113 samples, 52.03%)</title><rect x="135.7" y="451.0" width="614.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.7" y="462.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (5,113 samples, 52.03%)</title><rect x="135.7" y="435.0" width="614.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="138.7" y="446.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (4,469 samples, 45.48%)</title><rect x="136.4" y="419.0" width="536.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.4" y="430.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (4,468 samples, 45.47%)</title><rect x="136.6" y="403.0" width="536.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.6" y="414.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (4,452 samples, 45.30%)</title><rect x="136.6" y="387.0" width="534.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.6" y="398.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4,446 samples, 45.24%)</title><rect x="137.3" y="371.0" width="533.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.3" y="382.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (228 samples, 2.32%)</title><rect x="142.0" y="355.0" width="27.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="145.0" y="366.0">S..</text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (217 samples, 2.21%)</title><rect x="143.3" y="339.0" width="26.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="146.3" y="350.0">m..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (3,139 samples, 31.94%)</title><rect x="169.3" y="355.0" width="377.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="172.3" y="366.0">SharedRuntime::montgomery_square(int*, int*, int, l..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3,075 samples, 31.29%)</title><rect x="177.0" y="339.0" width="369.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="180.0" y="350.0">montgomery_square(unsigned long*, unsigned long*, ..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.05%)</title><rect x="546.4" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="549.4" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="546.6" y="339.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.6" y="350.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (5 samples, 0.05%)</title><rect x="547.1" y="355.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.1" y="366.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="547.2" y="339.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="550.2" y="350.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (174 samples, 1.77%)</title><rect x="547.7" y="355.0" width="20.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="550.7" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (165 samples, 1.68%)</title><rect x="548.5" y="339.0" width="19.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.5" y="350.0"></text>
</g>
<g>
<title>mulAdd (152 samples, 1.55%)</title><rect x="550.1" y="323.0" width="18.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="553.1" y="334.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (6 samples, 0.06%)</title><rect x="568.6" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.6" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="568.6" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.6" y="350.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (556 samples, 5.66%)</title><rect x="569.3" y="355.0" width="66.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.3" y="366.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (556 samples, 5.66%)</title><rect x="569.3" y="339.0" width="66.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="572.3" y="350.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (556 samples, 5.66%)</title><rect x="569.3" y="323.0" width="66.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.3" y="334.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (547 samples, 5.57%)</title><rect x="569.8" y="307.0" width="65.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.8" y="318.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (5 samples, 0.05%)</title><rect x="578.3" y="291.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.3" y="302.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (455 samples, 4.63%)</title><rect x="578.9" y="291.0" width="54.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="581.9" y="302.0">java/..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (3 samples, 0.03%)</title><rect x="633.6" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.6" y="302.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.unsignedLongCompare (6 samples, 0.06%)</title><rect x="633.9" y="291.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.9" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="634.6" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.6" y="302.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="634.6" y="275.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="637.6" y="286.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (5 samples, 0.05%)</title><rect x="635.5" y="307.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.5" y="318.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (8 samples, 0.08%)</title><rect x="636.2" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.2" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (261 samples, 2.66%)</title><rect x="637.2" y="355.0" width="31.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.2" y="366.0">ja..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (256 samples, 2.61%)</title><rect x="637.3" y="339.0" width="30.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.3" y="350.0">Sh..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (251 samples, 2.55%)</title><rect x="637.9" y="323.0" width="30.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="640.9" y="334.0">mo..</text>
</g>
<g>
<title>java/math/BigInteger.montReduce (4 samples, 0.04%)</title><rect x="668.0" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.0" y="350.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (15 samples, 0.15%)</title><rect x="668.6" y="355.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="671.6" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="670.4" y="355.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="673.4" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (13 samples, 0.13%)</title><rect x="671.1" y="387.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="674.1" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (12 samples, 0.12%)</title><rect x="671.3" y="371.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.3" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (12 samples, 0.12%)</title><rect x="671.3" y="355.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.3" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (3 samples, 0.03%)</title><rect x="672.7" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.7" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (3 samples, 0.03%)</title><rect x="672.7" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.7" y="382.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (531 samples, 5.40%)</title><rect x="673.1" y="419.0" width="63.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="676.1" y="430.0">sun/sec..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (516 samples, 5.25%)</title><rect x="674.9" y="403.0" width="61.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.9" y="414.0">sun/se..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (505 samples, 5.14%)</title><rect x="676.2" y="387.0" width="60.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.2" y="398.0">javax/..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (503 samples, 5.12%)</title><rect x="676.3" y="371.0" width="60.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.3" y="382.0">java/s..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (503 samples, 5.12%)</title><rect x="676.3" y="355.0" width="60.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.3" y="366.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (502 samples, 5.11%)</title><rect x="676.4" y="339.0" width="60.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.4" y="350.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (502 samples, 5.11%)</title><rect x="676.4" y="323.0" width="60.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.4" y="334.0">java/l..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (499 samples, 5.08%)</title><rect x="676.8" y="307.0" width="59.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.8" y="318.0">java/l..</text>
</g>
<g>
<title>JVM_FillInStackTrace (3 samples, 0.03%)</title><rect x="677.6" y="291.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="680.6" y="302.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (482 samples, 4.90%)</title><rect x="678.0" y="291.0" width="57.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="681.0" y="302.0">Java_j..</text>
</g>
<g>
<title>JVM_FillInStackTrace (471 samples, 4.79%)</title><rect x="678.6" y="275.0" width="56.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="681.6" y="286.0">JVM_Fi..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="678.6" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="681.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::active() (4 samples, 0.04%)</title><rect x="679.0" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.04%)</title><rect x="680.3" y="259.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.3" y="270.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (4 samples, 0.04%)</title><rect x="680.8" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="683.8" y="270.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (447 samples, 4.55%)</title><rect x="681.2" y="259.0" width="53.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="684.2" y="270.0">java_..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="682.2" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="685.2" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.07%)</title><rect x="682.6" y="243.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="685.6" y="254.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="683.8" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="686.8" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="684.4" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="687.4" y="254.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (5 samples, 0.05%)</title><rect x="684.7" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="687.7" y="254.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (399 samples, 4.06%)</title><rect x="685.4" y="243.0" width="47.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="688.4" y="254.0">java..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (49 samples, 0.50%)</title><rect x="695.9" y="227.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="698.9" y="238.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (46 samples, 0.47%)</title><rect x="696.0" y="211.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="699.0" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (16 samples, 0.16%)</title><rect x="696.6" y="195.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.6" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (4 samples, 0.04%)</title><rect x="697.4" y="179.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="700.4" y="190.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.04%)</title><rect x="697.9" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="700.9" y="190.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (6 samples, 0.06%)</title><rect x="698.5" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="701.5" y="206.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (4 samples, 0.04%)</title><rect x="698.8" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="701.8" y="190.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 0.14%)</title><rect x="699.2" y="195.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.2" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (5 samples, 0.05%)</title><rect x="700.2" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="703.2" y="190.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (3 samples, 0.03%)</title><rect x="701.2" y="195.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="704.2" y="206.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (96 samples, 0.98%)</title><rect x="702.0" y="227.0" width="11.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="705.0" y="238.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (7 samples, 0.07%)</title><rect x="712.7" y="211.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="715.7" y="222.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (5 samples, 0.05%)</title><rect x="713.7" y="227.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.7" y="238.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (19 samples, 0.19%)</title><rect x="714.3" y="227.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.3" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (14 samples, 0.14%)</title><rect x="714.4" y="211.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="717.4" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (10 samples, 0.10%)</title><rect x="714.5" y="195.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="717.5" y="206.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (7 samples, 0.07%)</title><rect x="714.9" y="179.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="717.9" y="190.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (4 samples, 0.04%)</title><rect x="716.5" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.5" y="238.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (18 samples, 0.18%)</title><rect x="717.0" y="227.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="720.0" y="238.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (4 samples, 0.04%)</title><rect x="719.4" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="722.4" y="238.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.05%)</title><rect x="720.0" y="227.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.0" y="238.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (79 samples, 0.80%)</title><rect x="720.6" y="227.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="723.6" y="238.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (39 samples, 0.40%)</title><rect x="721.5" y="211.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="724.5" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (30 samples, 0.31%)</title><rect x="721.8" y="195.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="724.8" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (21 samples, 0.21%)</title><rect x="722.1" y="179.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="725.1" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (21 samples, 0.21%)</title><rect x="722.1" y="163.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.1" y="174.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (7 samples, 0.07%)</title><rect x="724.6" y="179.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.6" y="190.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.04%)</title><rect x="725.7" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.7" y="206.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (6 samples, 0.06%)</title><rect x="726.1" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.1" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.05%)</title><rect x="726.3" y="195.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="729.3" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (5 samples, 0.05%)</title><rect x="726.3" y="179.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="729.3" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.05%)</title><rect x="726.3" y="163.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="729.3" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (23 samples, 0.23%)</title><rect x="726.9" y="211.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.9" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (18 samples, 0.18%)</title><rect x="727.1" y="195.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.1" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (16 samples, 0.16%)</title><rect x="727.2" y="179.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="730.2" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (15 samples, 0.15%)</title><rect x="727.3" y="163.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.3" y="174.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*) (3 samples, 0.03%)</title><rect x="730.2" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="733.2" y="238.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc(unsigned char*, bool) (5 samples, 0.05%)</title><rect x="730.6" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="733.6" y="238.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (5 samples, 0.05%)</title><rect x="731.2" y="227.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="734.2" y="238.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (5 samples, 0.05%)</title><rect x="731.2" y="211.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.2" y="222.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (10 samples, 0.10%)</title><rect x="732.0" y="227.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="735.0" y="238.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*) (5 samples, 0.05%)</title><rect x="733.3" y="243.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.3" y="254.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_stacktrace(oopDesc*, oopDesc*) (4 samples, 0.04%)</title><rect x="733.9" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.05%)</title><rect x="735.3" y="275.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.3" y="286.0"></text>
</g>
<g>
<title>jsqrt (7 samples, 0.07%)</title><rect x="735.9" y="291.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.9" y="302.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (72 samples, 0.73%)</title><rect x="736.8" y="419.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="739.8" y="430.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (6 samples, 0.06%)</title><rect x="737.4" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.4" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.init (6 samples, 0.06%)</title><rect x="737.4" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.4" y="398.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (19 samples, 0.19%)</title><rect x="738.4" y="403.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.4" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (19 samples, 0.19%)</title><rect x="738.4" y="387.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.4" y="398.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (11 samples, 0.11%)</title><rect x="739.3" y="371.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.3" y="382.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (11 samples, 0.11%)</title><rect x="739.3" y="355.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.3" y="366.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (7 samples, 0.07%)</title><rect x="739.7" y="339.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.7" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="740.0" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.0" y="334.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (5 samples, 0.05%)</title><rect x="740.7" y="403.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.7" y="414.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (32 samples, 0.33%)</title><rect x="741.6" y="403.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.6" y="414.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (8 samples, 0.08%)</title><rect x="742.1" y="387.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.1" y="398.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (8 samples, 0.08%)</title><rect x="742.1" y="371.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.1" y="382.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (18 samples, 0.18%)</title><rect x="743.1" y="387.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.1" y="398.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (18 samples, 0.18%)</title><rect x="743.1" y="371.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.1" y="382.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (7 samples, 0.07%)</title><rect x="743.1" y="355.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="746.1" y="366.0"></text>
</g>
<g>
<title>java/io/InputStream.read (6 samples, 0.06%)</title><rect x="743.2" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.2" y="350.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (6 samples, 0.06%)</title><rect x="743.2" y="323.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.2" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="743.6" y="307.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="746.6" y="318.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (3 samples, 0.03%)</title><rect x="743.9" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.9" y="366.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.check (8 samples, 0.08%)</title><rect x="744.3" y="355.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.3" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (35 samples, 0.36%)</title><rect x="745.5" y="419.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.5" y="430.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (34 samples, 0.35%)</title><rect x="745.6" y="403.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="748.6" y="414.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (32 samples, 0.33%)</title><rect x="745.8" y="387.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.8" y="398.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (32 samples, 0.33%)</title><rect x="745.8" y="371.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.8" y="382.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (32 samples, 0.33%)</title><rect x="745.8" y="355.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.8" y="366.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (31 samples, 0.32%)</title><rect x="746.0" y="339.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.0" y="350.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (3 samples, 0.03%)</title><rect x="746.1" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.1" y="334.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (5 samples, 0.05%)</title><rect x="746.4" y="323.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.4" y="334.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (22 samples, 0.22%)</title><rect x="747.0" y="323.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.0" y="334.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (4 samples, 0.04%)</title><rect x="749.2" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.2" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (4 samples, 0.04%)</title><rect x="750.2" y="499.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (4 samples, 0.04%)</title><rect x="750.2" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (4 samples, 0.04%)</title><rect x="750.2" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/BaseJWSProvider.&lt;init&gt; (4 samples, 0.04%)</title><rect x="750.2" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (1,915 samples, 19.49%)</title><rect x="750.8" y="499.0" width="229.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.8" y="510.0">com/nimbusds/jwt/SignedJWT.get..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (1,825 samples, 18.57%)</title><rect x="750.8" y="483.0" width="219.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.8" y="494.0">com/nimbusds/jose/Payload.toJ..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (1,191 samples, 12.12%)</title><rect x="751.2" y="467.0" width="143.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.2" y="478.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (1,189 samples, 12.10%)</title><rect x="751.4" y="451.0" width="142.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.4" y="462.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (1,132 samples, 11.52%)</title><rect x="752.0" y="435.0" width="135.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.0" y="446.0">com/nimbusds/jose..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (1,132 samples, 11.52%)</title><rect x="752.0" y="419.0" width="135.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.0" y="430.0">com/nimbusds/jose..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (648 samples, 6.59%)</title><rect x="797.9" y="403.0" width="77.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="800.9" y="414.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (24 samples, 0.24%)</title><rect x="872.9" y="387.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (90 samples, 0.92%)</title><rect x="875.8" y="403.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (90 samples, 0.92%)</title><rect x="875.8" y="387.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="878.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (7 samples, 0.07%)</title><rect x="877.4" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.4" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="877.4" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="880.4" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="877.6" y="339.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="880.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (61 samples, 0.62%)</title><rect x="878.5" y="371.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="881.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (6 samples, 0.06%)</title><rect x="885.8" y="371.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="886.0" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="889.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="886.0" y="339.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.0" y="350.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="886.0" y="323.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.0" y="334.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="886.0" y="307.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="889.0" y="318.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (4 samples, 0.04%)</title><rect x="886.0" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.0" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.09%)</title><rect x="886.8" y="403.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="889.8" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="887.4" y="387.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="890.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (52 samples, 0.53%)</title><rect x="887.9" y="435.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="890.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (52 samples, 0.53%)</title><rect x="887.9" y="419.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="890.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (52 samples, 0.53%)</title><rect x="887.9" y="403.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="890.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (29 samples, 0.30%)</title><rect x="889.2" y="387.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (12 samples, 0.12%)</title><rect x="892.7" y="387.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="895.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (11 samples, 0.11%)</title><rect x="892.8" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (11 samples, 0.11%)</title><rect x="892.8" y="355.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="895.8" y="366.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="893.4" y="339.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.4" y="350.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="893.4" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="896.4" y="334.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="893.5" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.5" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (630 samples, 6.41%)</title><rect x="894.2" y="467.0" width="75.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.2" y="478.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (630 samples, 6.41%)</title><rect x="894.2" y="451.0" width="75.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.2" y="462.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (626 samples, 6.37%)</title><rect x="894.7" y="435.0" width="75.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="897.7" y="446.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (626 samples, 6.37%)</title><rect x="894.7" y="419.0" width="75.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.7" y="430.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (626 samples, 6.37%)</title><rect x="894.7" y="403.0" width="75.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.7" y="414.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (625 samples, 6.36%)</title><rect x="894.7" y="387.0" width="75.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.7" y="398.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (620 samples, 6.31%)</title><rect x="895.3" y="371.0" width="74.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.3" y="382.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (576 samples, 5.86%)</title><rect x="896.3" y="355.0" width="69.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="899.3" y="366.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (19 samples, 0.19%)</title><rect x="897.3" y="339.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.3" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (4 samples, 0.04%)</title><rect x="897.6" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="900.6" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.skipDigits (3 samples, 0.03%)</title><rect x="898.1" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.1" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (9 samples, 0.09%)</title><rect x="898.5" y="323.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.5" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (9 samples, 0.09%)</title><rect x="898.5" y="307.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.08%)</title><rect x="898.6" y="291.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="898.7" y="275.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="901.7" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (5 samples, 0.05%)</title><rect x="898.7" y="259.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.7" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (549 samples, 5.59%)</title><rect x="899.5" y="339.0" width="66.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.5" y="350.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (527 samples, 5.36%)</title><rect x="899.9" y="323.0" width="63.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.9" y="334.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (208 samples, 2.12%)</title><rect x="918.1" y="307.0" width="25.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="921.1" y="318.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (16 samples, 0.16%)</title><rect x="943.1" y="307.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.1" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (14 samples, 0.14%)</title><rect x="943.4" y="291.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="946.4" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (151 samples, 1.54%)</title><rect x="945.0" y="307.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (94 samples, 0.96%)</title><rect x="951.9" y="291.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.9" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 0.14%)</title><rect x="961.5" y="275.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="964.5" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (12 samples, 0.12%)</title><rect x="963.2" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="966.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.12%)</title><rect x="963.2" y="307.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.11%)</title><rect x="963.3" y="291.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="966.3" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.07%)</title><rect x="963.8" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="966.8" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="963.9" y="259.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="966.9" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (6 samples, 0.06%)</title><rect x="964.6" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="967.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="964.6" y="307.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.6" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (19 samples, 0.19%)</title><rect x="965.5" y="355.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="968.5" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (10 samples, 0.10%)</title><rect x="965.7" y="339.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="968.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.10%)</title><rect x="965.7" y="323.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.08%)</title><rect x="965.9" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="968.9" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.08%)</title><rect x="965.9" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.9" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="966.3" y="275.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="969.3" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="966.9" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="969.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="966.9" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="969.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 0.14%)</title><rect x="968.1" y="355.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="971.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="968.1" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="971.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="968.1" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.11%)</title><rect x="968.5" y="339.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="971.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.03%)</title><rect x="968.7" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.06%)</title><rect x="969.1" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.1" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (90 samples, 0.92%)</title><rect x="969.9" y="483.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="972.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (7 samples, 0.07%)</title><rect x="971.0" y="467.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.0" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (7 samples, 0.07%)</title><rect x="971.0" y="451.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="974.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (18 samples, 0.18%)</title><rect x="971.8" y="467.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.8" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (16 samples, 0.16%)</title><rect x="972.1" y="451.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="975.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.10%)</title><rect x="972.8" y="435.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.06%)</title><rect x="972.9" y="419.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="975.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="973.6" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="973.6" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="976.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (25 samples, 0.25%)</title><rect x="974.1" y="467.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="977.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (25 samples, 0.25%)</title><rect x="974.1" y="451.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="977.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (25 samples, 0.25%)</title><rect x="974.1" y="435.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="977.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (24 samples, 0.24%)</title><rect x="974.2" y="419.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (24 samples, 0.24%)</title><rect x="974.2" y="403.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="977.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.09%)</title><rect x="974.9" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="977.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="974.9" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.9" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (5 samples, 0.05%)</title><rect x="975.4" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.4" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="976.0" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="979.0" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (6 samples, 0.06%)</title><rect x="976.4" y="387.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="979.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="976.7" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="979.7" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (14 samples, 0.14%)</title><rect x="977.6" y="467.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.13%)</title><rect x="977.7" y="451.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.12%)</title><rect x="977.8" y="435.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.8" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (3 samples, 0.03%)</title><rect x="979.3" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="982.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="979.3" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="982.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="979.3" y="435.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="982.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (7 samples, 0.07%)</title><rect x="979.6" y="467.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (6 samples, 0.06%)</title><rect x="979.7" y="451.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="982.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (365 samples, 3.71%)</title><rect x="980.7" y="499.0" width="43.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.7" y="510.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (48 samples, 0.49%)</title><rect x="980.8" y="483.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="983.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (22 samples, 0.22%)</title><rect x="981.1" y="467.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (22 samples, 0.22%)</title><rect x="981.1" y="451.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="984.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (24 samples, 0.24%)</title><rect x="983.7" y="467.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="986.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.20%)</title><rect x="984.2" y="451.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="987.2" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.13%)</title><rect x="985.0" y="435.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="988.0" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="986.2" y="419.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="989.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (302 samples, 3.07%)</title><rect x="986.7" y="483.0" width="36.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.7" y="494.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (302 samples, 3.07%)</title><rect x="986.7" y="467.0" width="36.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.7" y="478.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (301 samples, 3.06%)</title><rect x="986.7" y="451.0" width="36.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="989.7" y="462.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (281 samples, 2.86%)</title><rect x="987.2" y="435.0" width="33.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.2" y="446.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (206 samples, 2.10%)</title><rect x="987.3" y="419.0" width="24.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="990.3" y="430.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (125 samples, 1.27%)</title><rect x="987.3" y="403.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="990.3" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (10 samples, 0.10%)</title><rect x="989.4" y="387.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.4" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (6 samples, 0.06%)</title><rect x="989.6" y="371.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.6" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="990.6" y="387.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="993.6" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.build (7 samples, 0.07%)</title><rect x="991.2" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="994.2" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.&lt;init&gt; (4 samples, 0.04%)</title><rect x="991.5" y="371.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="994.5" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (70 samples, 0.71%)</title><rect x="992.0" y="387.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="995.0" y="398.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (69 samples, 0.70%)</title><rect x="992.1" y="371.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.1" y="382.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (68 samples, 0.69%)</title><rect x="992.2" y="355.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.2" y="366.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (4 samples, 0.04%)</title><rect x="993.1" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="996.1" y="350.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (4 samples, 0.04%)</title><rect x="993.1" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="996.1" y="334.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="993.2" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="996.2" y="318.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (7 samples, 0.07%)</title><rect x="993.6" y="339.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="996.6" y="350.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="993.8" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="996.8" y="334.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (3 samples, 0.03%)</title><rect x="994.0" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.0" y="318.0"></text>
</g>
<g>
<title>java/net/URI.match (3 samples, 0.03%)</title><rect x="994.0" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="997.0" y="302.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (33 samples, 0.34%)</title><rect x="994.4" y="339.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="997.4" y="350.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (31 samples, 0.32%)</title><rect x="994.4" y="323.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="997.4" y="334.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (25 samples, 0.25%)</title><rect x="994.5" y="307.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.5" y="318.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (17 samples, 0.17%)</title><rect x="994.8" y="291.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="997.8" y="302.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (9 samples, 0.09%)</title><rect x="995.2" y="275.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="998.2" y="286.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="995.5" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="998.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="995.5" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="998.5" y="254.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (4 samples, 0.04%)</title><rect x="995.8" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.8" y="270.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (4 samples, 0.04%)</title><rect x="996.3" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="999.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="996.3" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="999.3" y="270.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="997.0" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1000.0" y="302.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="997.5" y="307.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1000.5" y="318.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (4 samples, 0.04%)</title><rect x="997.6" y="291.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1000.6" y="302.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.06%)</title><rect x="998.4" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="998.4" y="323.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1001.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="998.6" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.6" y="318.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (11 samples, 0.11%)</title><rect x="999.1" y="339.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1002.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.11%)</title><rect x="999.1" y="323.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1002.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.10%)</title><rect x="999.2" y="307.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1002.2" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.07%)</title><rect x="999.3" y="291.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1002.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (9 samples, 0.09%)</title><rect x="1000.4" y="387.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1003.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (8 samples, 0.08%)</title><rect x="1000.5" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1003.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.07%)</title><rect x="1001.5" y="387.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1004.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1001.5" y="371.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1004.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1001.6" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.6" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (81 samples, 0.82%)</title><rect x="1002.3" y="403.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.3" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (81 samples, 0.82%)</title><rect x="1002.3" y="387.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1005.3" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1002.3" y="371.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1005.3" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1002.3" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.3" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1002.3" y="339.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.3" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (76 samples, 0.77%)</title><rect x="1002.9" y="371.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.9" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (76 samples, 0.77%)</title><rect x="1002.9" y="355.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1005.9" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (76 samples, 0.77%)</title><rect x="1002.9" y="339.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1005.9" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (52 samples, 0.53%)</title><rect x="1005.6" y="323.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1008.6" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (50 samples, 0.51%)</title><rect x="1005.8" y="307.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1008.8" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (36 samples, 0.37%)</title><rect x="1006.0" y="291.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1009.0" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (35 samples, 0.36%)</title><rect x="1006.2" y="275.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1009.2" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (28 samples, 0.28%)</title><rect x="1006.2" y="259.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1009.2" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (6 samples, 0.06%)</title><rect x="1006.6" y="243.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1009.6" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (5 samples, 0.05%)</title><rect x="1007.4" y="243.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1010.4" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1007.6" y="227.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1010.6" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (13 samples, 0.13%)</title><rect x="1008.0" y="243.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1011.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.08%)</title><rect x="1008.6" y="227.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1011.6" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="1009.5" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1012.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="1009.5" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1009.5" y="227.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1012.5" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1009.6" y="211.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1012.6" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (6 samples, 0.06%)</title><rect x="1010.4" y="291.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1013.4" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="1010.5" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="1010.5" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1013.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1010.5" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1013.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1010.5" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1013.5" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="1011.3" y="291.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1014.3" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (74 samples, 0.75%)</title><rect x="1012.0" y="419.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.0" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (61 samples, 0.62%)</title><rect x="1012.0" y="403.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1015.0" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (61 samples, 0.62%)</title><rect x="1012.0" y="387.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.0" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (33 samples, 0.34%)</title><rect x="1013.8" y="371.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1016.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (11 samples, 0.11%)</title><rect x="1017.8" y="371.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.8" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (11 samples, 0.11%)</title><rect x="1017.8" y="355.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (3 samples, 0.03%)</title><rect x="1018.3" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="1018.6" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1021.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1018.8" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1018.8" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1021.8" y="318.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1018.8" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1021.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.13%)</title><rect x="1019.4" y="403.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1019.4" y="387.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.4" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="1019.6" y="371.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1022.6" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="1020.1" y="387.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1023.1" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (8 samples, 0.08%)</title><rect x="1020.9" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (6 samples, 0.06%)</title><rect x="1021.2" y="419.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1021.3" y="403.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1024.3" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="1021.4" y="387.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1024.4" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.08%)</title><rect x="1021.9" y="435.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1024.9" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (13 samples, 0.13%)</title><rect x="1023.0" y="483.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1026.0" y="494.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_medium_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (152 samples, 1.55%)</title><rect x="1024.5" y="547.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.5" y="558.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (152 samples, 1.55%)</title><rect x="1024.5" y="531.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.5" y="542.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (128 samples, 1.30%)</title><rect x="1024.5" y="515.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.5" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (106 samples, 1.08%)</title><rect x="1024.8" y="499.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (106 samples, 1.08%)</title><rect x="1024.8" y="483.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.8" y="494.0"></text>
</g>
<g>
<title>java/security/Signature.sign (98 samples, 1.00%)</title><rect x="1025.3" y="467.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1028.3" y="478.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (98 samples, 1.00%)</title><rect x="1025.3" y="451.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1028.3" y="462.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (98 samples, 1.00%)</title><rect x="1025.3" y="435.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.3" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (97 samples, 0.99%)</title><rect x="1025.3" y="419.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.3" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (97 samples, 0.99%)</title><rect x="1025.3" y="403.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1028.3" y="414.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (91 samples, 0.93%)</title><rect x="1025.3" y="387.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1028.3" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (91 samples, 0.93%)</title><rect x="1025.3" y="371.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1028.3" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (9 samples, 0.09%)</title><rect x="1025.5" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.5" y="366.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (8 samples, 0.08%)</title><rect x="1025.6" y="339.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1028.6" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (62 samples, 0.63%)</title><rect x="1026.6" y="355.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.6" y="366.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (56 samples, 0.57%)</title><rect x="1026.9" y="339.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1029.9" y="350.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="1033.7" y="339.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1036.7" y="350.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (3 samples, 0.03%)</title><rect x="1034.0" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1037.0" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="1034.0" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1037.0" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (3 samples, 0.03%)</title><rect x="1034.0" y="323.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.0" y="334.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="1034.0" y="307.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1037.0" y="318.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (15 samples, 0.15%)</title><rect x="1034.4" y="355.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1037.4" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (15 samples, 0.15%)</title><rect x="1034.4" y="339.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1037.4" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (15 samples, 0.15%)</title><rect x="1034.4" y="323.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.4" y="334.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (15 samples, 0.15%)</title><rect x="1034.4" y="307.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1037.4" y="318.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1036.3" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.3" y="398.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1036.3" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1039.3" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (4 samples, 0.04%)</title><rect x="1036.3" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1039.3" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4 samples, 0.04%)</title><rect x="1036.3" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.3" y="350.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="1036.3" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.3" y="334.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="1036.3" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1039.3" y="318.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="1036.3" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1039.3" y="302.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (4 samples, 0.04%)</title><rect x="1036.3" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.3" y="286.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (3 samples, 0.03%)</title><rect x="1036.4" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1039.4" y="270.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.04%)</title><rect x="1037.0" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.0" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.04%)</title><rect x="1037.0" y="451.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1040.0" y="462.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (4 samples, 0.04%)</title><rect x="1037.0" y="435.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1040.0" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (4 samples, 0.04%)</title><rect x="1037.0" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.0" y="430.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (4 samples, 0.04%)</title><rect x="1037.0" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1040.0" y="414.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (4 samples, 0.04%)</title><rect x="1037.0" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1040.0" y="398.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (4 samples, 0.04%)</title><rect x="1037.0" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1040.0" y="382.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (4 samples, 0.04%)</title><rect x="1037.0" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1040.0" y="366.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (4 samples, 0.04%)</title><rect x="1037.0" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.0" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (12 samples, 0.12%)</title><rect x="1037.6" y="499.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1040.6" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (12 samples, 0.12%)</title><rect x="1037.6" y="483.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1040.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (12 samples, 0.12%)</title><rect x="1037.6" y="467.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1040.6" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (4 samples, 0.04%)</title><rect x="1037.7" y="451.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1040.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (3 samples, 0.03%)</title><rect x="1037.7" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.7" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (3 samples, 0.03%)</title><rect x="1037.7" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.7" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (6 samples, 0.06%)</title><rect x="1038.2" y="451.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1041.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (3 samples, 0.03%)</title><rect x="1038.2" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1041.2" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (3 samples, 0.03%)</title><rect x="1038.6" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1041.6" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (3 samples, 0.03%)</title><rect x="1038.6" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.6" y="430.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (4 samples, 0.04%)</title><rect x="1039.4" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.4" y="510.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (4 samples, 0.04%)</title><rect x="1039.4" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.4" y="494.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (4 samples, 0.04%)</title><rect x="1039.4" y="467.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.4" y="478.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (23 samples, 0.23%)</title><rect x="1039.9" y="515.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1042.9" y="526.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (23 samples, 0.23%)</title><rect x="1039.9" y="499.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1042.9" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (23 samples, 0.23%)</title><rect x="1039.9" y="483.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.9" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (22 samples, 0.22%)</title><rect x="1040.0" y="467.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.0" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (22 samples, 0.22%)</title><rect x="1040.0" y="451.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.0" y="462.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="1040.0" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1043.0" y="446.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1040.0" y="419.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1043.0" y="430.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (3 samples, 0.03%)</title><rect x="1040.1" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1043.1" y="414.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (3 samples, 0.03%)</title><rect x="1040.1" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1043.1" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (3 samples, 0.03%)</title><rect x="1040.1" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1043.1" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="1040.1" y="355.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.1" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="1040.1" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.1" y="350.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (17 samples, 0.17%)</title><rect x="1040.6" y="435.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.6" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (17 samples, 0.17%)</title><rect x="1040.6" y="419.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.6" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (7 samples, 0.07%)</title><rect x="1040.6" y="403.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.6" y="414.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (7 samples, 0.07%)</title><rect x="1040.6" y="387.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1043.6" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (4 samples, 0.04%)</title><rect x="1040.7" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.7" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (4 samples, 0.04%)</title><rect x="1040.7" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.7" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (4 samples, 0.04%)</title><rect x="1040.7" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.7" y="350.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="1040.7" y="323.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.7" y="334.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="1040.7" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.7" y="318.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (4 samples, 0.04%)</title><rect x="1040.7" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1043.7" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (10 samples, 0.10%)</title><rect x="1041.5" y="403.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.5" y="414.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (9 samples, 0.09%)</title><rect x="1041.6" y="387.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1044.6" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (9 samples, 0.09%)</title><rect x="1041.6" y="371.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.6" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (3 samples, 0.03%)</title><rect x="1041.7" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.7" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (3 samples, 0.03%)</title><rect x="1041.7" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.7" y="350.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="1041.7" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.7" y="334.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (5 samples, 0.05%)</title><rect x="1042.1" y="355.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.1" y="366.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (4 samples, 0.04%)</title><rect x="1042.1" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.1" y="350.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (4 samples, 0.04%)</title><rect x="1042.9" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.9" y="766.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (4 samples, 0.04%)</title><rect x="1042.9" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1045.9" y="750.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (4 samples, 0.04%)</title><rect x="1042.9" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.9" y="734.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (4 samples, 0.04%)</title><rect x="1042.9" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1045.9" y="718.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (4 samples, 0.04%)</title><rect x="1042.9" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1045.9" y="702.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (4 samples, 0.04%)</title><rect x="1042.9" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1045.9" y="686.0"></text>
</g>
<g>
<title>thread_start (1,221 samples, 12.42%)</title><rect x="1043.4" y="755.0" width="146.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1046.4" y="766.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,221 samples, 12.42%)</title><rect x="1043.4" y="739.0" width="146.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1046.4" y="750.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,221 samples, 12.42%)</title><rect x="1043.4" y="723.0" width="146.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1046.4" y="734.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (1,221 samples, 12.42%)</title><rect x="1043.4" y="707.0" width="146.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1046.4" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (149 samples, 1.52%)</title><rect x="1043.4" y="691.0" width="17.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.4" y="702.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (39 samples, 0.40%)</title><rect x="1043.4" y="675.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.4" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (35 samples, 0.36%)</title><rect x="1043.5" y="659.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.5" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (35 samples, 0.36%)</title><rect x="1043.5" y="643.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.5" y="654.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (31 samples, 0.32%)</title><rect x="1043.5" y="627.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1046.5" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (29 samples, 0.30%)</title><rect x="1043.5" y="611.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.5" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.24%)</title><rect x="1043.5" y="595.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1046.5" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.05%)</title><rect x="1046.4" y="595.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1049.4" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.05%)</title><rect x="1046.4" y="579.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1049.4" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.05%)</title><rect x="1046.4" y="563.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1049.4" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1047.3" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.3" y="638.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1047.3" y="611.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1050.3" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1047.7" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.7" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1047.7" y="643.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1050.7" y="654.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (5 samples, 0.05%)</title><rect x="1048.1" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.1" y="686.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (6 samples, 0.06%)</title><rect x="1048.7" y="675.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.7" y="686.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (6 samples, 0.06%)</title><rect x="1048.7" y="659.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.7" y="670.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (5 samples, 0.05%)</title><rect x="1048.7" y="643.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.7" y="654.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.04%)</title><rect x="1048.8" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.8" y="638.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.08%)</title><rect x="1049.4" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.4" y="686.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (7 samples, 0.07%)</title><rect x="1049.4" y="659.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.4" y="670.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (7 samples, 0.07%)</title><rect x="1049.4" y="643.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.4" y="654.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (6 samples, 0.06%)</title><rect x="1049.5" y="627.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.5" y="638.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (73 samples, 0.74%)</title><rect x="1050.4" y="675.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.4" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (60 samples, 0.61%)</title><rect x="1050.4" y="659.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.4" y="670.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (56 samples, 0.57%)</title><rect x="1050.8" y="643.0" width="6.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.13%)</title><rect x="1057.6" y="659.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1060.6" y="670.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.07%)</title><rect x="1059.2" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.2" y="686.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (7 samples, 0.07%)</title><rect x="1059.2" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.2" y="670.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (3 samples, 0.03%)</title><rect x="1059.6" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.6" y="654.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (10 samples, 0.10%)</title><rect x="1060.1" y="675.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1063.1" y="686.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (9 samples, 0.09%)</title><rect x="1060.1" y="659.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.1" y="670.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.09%)</title><rect x="1060.1" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.1" y="654.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.09%)</title><rect x="1060.1" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.1" y="638.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (9 samples, 0.09%)</title><rect x="1060.1" y="611.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1063.1" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (9 samples, 0.09%)</title><rect x="1060.1" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.1" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.08%)</title><rect x="1060.1" y="579.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1063.1" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (956 samples, 9.73%)</title><rect x="1061.3" y="691.0" width="114.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.3" y="702.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (956 samples, 9.73%)</title><rect x="1061.3" y="675.0" width="114.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.3" y="686.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (951 samples, 9.68%)</title><rect x="1061.3" y="659.0" width="114.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.3" y="670.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (940 samples, 9.57%)</title><rect x="1061.3" y="643.0" width="112.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.3" y="654.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (895 samples, 9.11%)</title><rect x="1061.3" y="627.0" width="107.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1064.3" y="638.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (894 samples, 9.10%)</title><rect x="1061.3" y="611.0" width="107.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.3" y="622.0">Compile::Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (5 samples, 0.05%)</title><rect x="1061.3" y="595.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.3" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (5 samples, 0.05%)</title><rect x="1061.3" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.3" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (5 samples, 0.05%)</title><rect x="1061.3" y="563.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (5 samples, 0.05%)</title><rect x="1061.3" y="547.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (5 samples, 0.05%)</title><rect x="1061.3" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (5 samples, 0.05%)</title><rect x="1061.3" y="515.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (5 samples, 0.05%)</title><rect x="1061.3" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.3" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (5 samples, 0.05%)</title><rect x="1061.3" y="483.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (4 samples, 0.04%)</title><rect x="1061.4" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.4" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (4 samples, 0.04%)</title><rect x="1061.4" y="451.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.4" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1061.4" y="435.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1061.4" y="419.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="430.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (373 samples, 3.80%)</title><rect x="1061.9" y="595.0" width="44.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.9" y="606.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (13 samples, 0.13%)</title><rect x="1061.9" y="579.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.9" y="590.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (11 samples, 0.11%)</title><rect x="1061.9" y="563.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.9" y="574.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (4 samples, 0.04%)</title><rect x="1062.6" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.6" y="558.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (17 samples, 0.17%)</title><rect x="1063.4" y="579.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.4" y="590.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.03%)</title><rect x="1063.9" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.9" y="574.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (6 samples, 0.06%)</title><rect x="1064.6" y="563.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.6" y="574.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (6 samples, 0.06%)</title><rect x="1064.6" y="547.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.6" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.04%)</title><rect x="1064.9" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.9" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (23 samples, 0.23%)</title><rect x="1065.5" y="579.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.5" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (21 samples, 0.21%)</title><rect x="1065.7" y="563.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.7" y="574.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.04%)</title><rect x="1066.1" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.1" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (10 samples, 0.10%)</title><rect x="1066.6" y="547.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.6" y="558.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1066.8" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.8" y="542.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1066.8" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.8" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (18 samples, 0.18%)</title><rect x="1068.6" y="579.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.6" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (17 samples, 0.17%)</title><rect x="1068.7" y="563.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (10 samples, 0.10%)</title><rect x="1069.0" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.0" y="558.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.03%)</title><rect x="1069.1" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.1" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (3 samples, 0.03%)</title><rect x="1069.8" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1070.2" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (296 samples, 3.01%)</title><rect x="1070.8" y="579.0" width="35.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.8" y="590.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (20 samples, 0.20%)</title><rect x="1071.2" y="563.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (26 samples, 0.26%)</title><rect x="1073.6" y="563.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.6" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (15 samples, 0.15%)</title><rect x="1074.7" y="547.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.7" y="558.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.06%)</title><rect x="1075.0" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.0" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1075.7" y="531.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.7" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (21 samples, 0.21%)</title><rect x="1076.8" y="563.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (18 samples, 0.18%)</title><rect x="1077.1" y="547.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.1" y="558.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (9 samples, 0.09%)</title><rect x="1077.2" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.2" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1078.4" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.4" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (36 samples, 0.37%)</title><rect x="1079.3" y="563.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.3" y="574.0"></text>
</g>
<g>
<title>Node::rematerialize() const (7 samples, 0.07%)</title><rect x="1082.2" y="547.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.2" y="558.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 0.03%)</title><rect x="1082.5" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (55 samples, 0.56%)</title><rect x="1083.6" y="563.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.6" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="1086.4" y="547.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.4" y="558.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.03%)</title><rect x="1086.9" y="547.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.9" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (19 samples, 0.19%)</title><rect x="1087.2" y="547.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.2" y="558.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (7 samples, 0.07%)</title><rect x="1087.5" y="531.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.5" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1088.3" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.3" y="542.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.05%)</title><rect x="1088.9" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.9" y="542.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1089.5" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (5 samples, 0.05%)</title><rect x="1090.2" y="563.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (24 samples, 0.24%)</title><rect x="1091.1" y="563.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.1" y="574.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.03%)</title><rect x="1093.6" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.03%)</title><rect x="1093.9" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (21 samples, 0.21%)</title><rect x="1094.3" y="563.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (10 samples, 0.10%)</title><rect x="1095.6" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.6" y="558.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (19 samples, 0.19%)</title><rect x="1096.8" y="563.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.8" y="574.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.03%)</title><rect x="1096.8" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.8" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (16 samples, 0.16%)</title><rect x="1097.2" y="547.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.2" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (15 samples, 0.15%)</title><rect x="1097.3" y="531.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.3" y="542.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (8 samples, 0.08%)</title><rect x="1097.3" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.3" y="526.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1097.3" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.3" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="1097.7" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.7" y="510.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.06%)</title><rect x="1098.4" y="515.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.4" y="526.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.06%)</title><rect x="1098.4" y="499.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.4" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (8 samples, 0.08%)</title><rect x="1099.1" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.1" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (8 samples, 0.08%)</title><rect x="1099.1" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.1" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.06%)</title><rect x="1099.3" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.3" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (8 samples, 0.08%)</title><rect x="1100.1" y="563.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.1" y="574.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1100.1" y="547.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.1" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (10 samples, 0.10%)</title><rect x="1101.0" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.0" y="574.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.07%)</title><rect x="1101.1" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.1" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (31 samples, 0.32%)</title><rect x="1102.2" y="563.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.2" y="574.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1103.2" y="547.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.2" y="558.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (3 samples, 0.03%)</title><rect x="1103.4" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.4" y="542.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (13 samples, 0.13%)</title><rect x="1104.0" y="547.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.0" y="558.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.06%)</title><rect x="1104.4" y="531.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.4" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1105.1" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.1" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (485 samples, 4.94%)</title><rect x="1106.8" y="595.0" width="58.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.8" y="606.0">Compil..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.06%)</title><rect x="1107.3" y="579.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.06%)</title><rect x="1107.3" y="563.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.3" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.06%)</title><rect x="1108.0" y="579.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.0" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.03%)</title><rect x="1108.7" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (435 samples, 4.43%)</title><rect x="1109.2" y="579.0" width="52.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.2" y="590.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (9 samples, 0.09%)</title><rect x="1109.5" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.5" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (6 samples, 0.06%)</title><rect x="1109.5" y="547.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.5" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1109.5" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.5" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1110.3" y="547.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (14 samples, 0.14%)</title><rect x="1110.7" y="563.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.7" y="574.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.03%)</title><rect x="1111.7" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (20 samples, 0.20%)</title><rect x="1112.4" y="563.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (8 samples, 0.08%)</title><rect x="1113.4" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1114.0" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (353 samples, 3.59%)</title><rect x="1114.8" y="563.0" width="42.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="574.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (336 samples, 3.42%)</title><rect x="1116.6" y="547.0" width="40.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.6" y="558.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (329 samples, 3.35%)</title><rect x="1117.1" y="531.0" width="39.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.1" y="542.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.10%)</title><rect x="1119.5" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (4 samples, 0.04%)</title><rect x="1120.7" y="515.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.04%)</title><rect x="1120.7" y="499.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (294 samples, 2.99%)</title><rect x="1121.2" y="515.0" width="35.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.2" y="526.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (47 samples, 0.48%)</title><rect x="1127.2" y="499.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (197 samples, 2.00%)</title><rect x="1132.8" y="499.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.8" y="510.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (10 samples, 0.10%)</title><rect x="1157.2" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.08%)</title><rect x="1158.5" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.04%)</title><rect x="1159.0" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.0" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.10%)</title><rect x="1159.5" y="563.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.10%)</title><rect x="1159.5" y="547.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 0.20%)</title><rect x="1161.5" y="579.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 0.20%)</title><rect x="1161.5" y="563.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1163.3" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="558.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (4 samples, 0.04%)</title><rect x="1163.9" y="579.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (4 samples, 0.04%)</title><rect x="1163.9" y="563.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.9" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="1164.1" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="558.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (3 samples, 0.03%)</title><rect x="1164.1" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="542.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.04%)</title><rect x="1164.4" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.24%)</title><rect x="1165.3" y="595.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.24%)</title><rect x="1165.3" y="579.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.23%)</title><rect x="1165.3" y="563.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.23%)</title><rect x="1165.3" y="547.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (23 samples, 0.23%)</title><rect x="1165.3" y="531.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.20%)</title><rect x="1165.5" y="515.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.12%)</title><rect x="1166.0" y="499.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.12%)</title><rect x="1166.0" y="483.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.12%)</title><rect x="1166.0" y="467.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.12%)</title><rect x="1166.0" y="451.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.12%)</title><rect x="1166.0" y="435.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.11%)</title><rect x="1166.0" y="419.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.09%)</title><rect x="1166.2" y="403.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.09%)</title><rect x="1166.2" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.09%)</title><rect x="1166.2" y="371.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.09%)</title><rect x="1166.2" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.09%)</title><rect x="1166.2" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.08%)</title><rect x="1166.2" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.08%)</title><rect x="1166.2" y="307.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.08%)</title><rect x="1166.2" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.08%)</title><rect x="1166.2" y="275.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1166.3" y="259.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.07%)</title><rect x="1166.3" y="243.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.5" y="227.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.5" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.5" y="195.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.5" y="179.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.5" y="163.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.5" y="147.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1166.6" y="131.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1166.7" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1166.7" y="99.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1166.7" y="83.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1166.7" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1166.7" y="51.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1166.7" y="35.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.4" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.4" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.4" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.4" y="478.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.03%)</title><rect x="1168.1" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.1" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 0.37%)</title><rect x="1168.9" y="627.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (36 samples, 0.37%)</title><rect x="1168.9" y="611.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_method() (36 samples, 0.37%)</title><rect x="1168.9" y="595.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (32 samples, 0.33%)</title><rect x="1168.9" y="579.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>Compilation::build_hir() (16 samples, 0.16%)</title><rect x="1168.9" y="563.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (3 samples, 0.03%)</title><rect x="1168.9" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (3 samples, 0.03%)</title><rect x="1168.9" y="531.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (3 samples, 0.03%)</title><rect x="1168.9" y="515.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (12 samples, 0.12%)</title><rect x="1169.2" y="547.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="558.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (12 samples, 0.12%)</title><rect x="1169.2" y="531.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.2" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (12 samples, 0.12%)</title><rect x="1169.2" y="515.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (10 samples, 0.10%)</title><rect x="1169.3" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (10 samples, 0.10%)</title><rect x="1169.3" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.06%)</title><rect x="1169.5" y="467.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1169.5" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1169.5" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.03%)</title><rect x="1169.8" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1169.8" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1169.8" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.8" y="430.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (6 samples, 0.06%)</title><rect x="1170.8" y="563.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.8" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (6 samples, 0.06%)</title><rect x="1170.8" y="547.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (6 samples, 0.06%)</title><rect x="1170.8" y="531.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="542.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (3 samples, 0.03%)</title><rect x="1170.8" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.8" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (10 samples, 0.10%)</title><rect x="1171.5" y="563.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="574.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (4 samples, 0.04%)</title><rect x="1171.5" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.5" y="558.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (4 samples, 0.04%)</title><rect x="1171.5" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="542.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (4 samples, 0.04%)</title><rect x="1171.5" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="526.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.06%)</title><rect x="1172.0" y="547.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="558.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (4 samples, 0.04%)</title><rect x="1172.7" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="590.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1172.8" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1173.2" y="627.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="638.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1173.2" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (3 samples, 0.03%)</title><rect x="1173.8" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (3 samples, 0.03%)</title><rect x="1173.8" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (3 samples, 0.03%)</title><rect x="1173.8" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>CompileQueue::get() (10 samples, 0.10%)</title><rect x="1174.1" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.09%)</title><rect x="1174.1" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.09%)</title><rect x="1174.1" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.09%)</title><rect x="1174.1" y="595.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.08%)</title><rect x="1174.1" y="579.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1177.1" y="590.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (5 samples, 0.05%)</title><rect x="1175.5" y="659.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.03%)</title><rect x="1175.5" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.03%)</title><rect x="1175.5" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (50 samples, 0.51%)</title><rect x="1176.1" y="691.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="702.0"></text>
</g>
<g>
<title>VMThread::loop() (50 samples, 0.51%)</title><rect x="1176.1" y="675.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="686.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.04%)</title><rect x="1176.1" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (46 samples, 0.47%)</title><rect x="1176.6" y="659.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (46 samples, 0.47%)</title><rect x="1176.6" y="643.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (46 samples, 0.47%)</title><rect x="1176.6" y="627.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (46 samples, 0.47%)</title><rect x="1176.6" y="611.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (46 samples, 0.47%)</title><rect x="1176.6" y="595.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (44 samples, 0.45%)</title><rect x="1176.8" y="579.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (7 samples, 0.07%)</title><rect x="1177.0" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (7 samples, 0.07%)</title><rect x="1177.0" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.07%)</title><rect x="1177.0" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.06%)</title><rect x="1177.2" y="515.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="526.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (6 samples, 0.06%)</title><rect x="1177.2" y="499.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1180.2" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (6 samples, 0.06%)</title><rect x="1177.2" y="483.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1177.2" y="467.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1180.2" y="478.0"></text>
</g>
<g>
<title>GCTaskManager::task_idle_workers() (4 samples, 0.04%)</title><rect x="1177.9" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>GCTaskManager::add_list(GCTaskQueue*) (4 samples, 0.04%)</title><rect x="1177.9" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (4 samples, 0.04%)</title><rect x="1177.9" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="1177.9" y="515.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>MemoryService::gc_begin(bool, bool, bool, bool, bool) (4 samples, 0.04%)</title><rect x="1178.4" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (4 samples, 0.04%)</title><rect x="1178.4" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (24 samples, 0.24%)</title><rect x="1179.0" y="563.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (24 samples, 0.24%)</title><rect x="1179.0" y="547.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>WatcherThread::run() (66 samples, 0.67%)</title><rect x="1182.1" y="691.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (65 samples, 0.66%)</title><rect x="1182.2" y="675.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (65 samples, 0.66%)</title><rect x="1182.2" y="659.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (65 samples, 0.66%)</title><rect x="1182.2" y="643.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (64 samples, 0.65%)</title><rect x="1182.2" y="627.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (63 samples, 0.64%)</title><rect x="1182.2" y="611.0" width="7.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
</g>
</svg>

