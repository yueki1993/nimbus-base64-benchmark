<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (11,553 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.03%)</title><rect x="10.2" y="947.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.2" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,736 samples, 75.62%)</title><rect x="10.5" y="947.0" width="892.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.5" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,736 samples, 75.62%)</title><rect x="10.5" y="931.0" width="892.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.5" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,736 samples, 75.62%)</title><rect x="10.5" y="915.0" width="892.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,736 samples, 75.62%)</title><rect x="10.5" y="899.0" width="892.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.5" y="910.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,736 samples, 75.62%)</title><rect x="10.5" y="883.0" width="892.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="894.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,736 samples, 75.62%)</title><rect x="10.5" y="867.0" width="892.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.5" y="878.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,736 samples, 75.62%)</title><rect x="10.5" y="851.0" width="892.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.5" y="862.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,736 samples, 75.62%)</title><rect x="10.5" y="835.0" width="892.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.5" y="846.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,736 samples, 75.62%)</title><rect x="10.5" y="819.0" width="892.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.5" y="830.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,736 samples, 75.62%)</title><rect x="10.5" y="803.0" width="892.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="814.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,736 samples, 75.62%)</title><rect x="10.5" y="787.0" width="892.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.5" y="798.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,736 samples, 75.62%)</title><rect x="10.5" y="771.0" width="892.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="782.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_large_jmhTest.JwtProcessor_large_Throughput (8,736 samples, 75.62%)</title><rect x="10.5" y="755.0" width="892.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="766.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_large_jmhTest.JwtProcessor_large_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_large_jmhTest.JwtProcessor_large_thrpt_jmhStub (8,511 samples, 73.67%)</title><rect x="10.5" y="739.0" width="869.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="750.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_large_jmhTest.JwtProcessor_large_thrpt_jmhStub</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtProcessor_large (8,491 samples, 73.50%)</title><rect x="12.6" y="723.0" width="867.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.6" y="734.0">com/yueki/SignedJwtBenchmark.JwtProcessor_large</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet (8,489 samples, 73.48%)</title><rect x="12.8" y="707.0" width="867.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.8" y="718.0">com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (8,489 samples, 73.48%)</title><rect x="12.8" y="691.0" width="867.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="702.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/JWTParser.parse (452 samples, 3.91%)</title><rect x="12.8" y="675.0" width="46.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.8" y="686.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (14 samples, 0.12%)</title><rect x="13.3" y="659.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.3" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (3 samples, 0.03%)</title><rect x="13.5" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (8 samples, 0.07%)</title><rect x="13.8" y="643.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.8" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (8 samples, 0.07%)</title><rect x="13.8" y="627.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.03%)</title><rect x="14.2" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="14.2" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (42 samples, 0.36%)</title><rect x="14.7" y="659.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.7" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (34 samples, 0.29%)</title><rect x="14.7" y="643.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (33 samples, 0.29%)</title><rect x="14.8" y="627.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.8" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (15 samples, 0.13%)</title><rect x="15.7" y="611.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.04%)</title><rect x="17.3" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.04%)</title><rect x="17.3" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="17.3" y="579.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.07%)</title><rect x="18.2" y="643.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.06%)</title><rect x="18.3" y="627.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (7 samples, 0.06%)</title><rect x="18.3" y="611.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (4 samples, 0.03%)</title><rect x="18.6" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="18.6" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="18.6" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (40 samples, 0.35%)</title><rect x="19.1" y="659.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (39 samples, 0.34%)</title><rect x="19.1" y="643.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (35 samples, 0.30%)</title><rect x="19.5" y="627.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (35 samples, 0.30%)</title><rect x="19.5" y="611.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (35 samples, 0.30%)</title><rect x="19.5" y="595.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.5" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (32 samples, 0.28%)</title><rect x="19.7" y="579.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (31 samples, 0.27%)</title><rect x="19.8" y="563.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (20 samples, 0.17%)</title><rect x="20.3" y="547.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (18 samples, 0.16%)</title><rect x="20.5" y="531.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (15 samples, 0.13%)</title><rect x="20.5" y="515.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (5 samples, 0.04%)</title><rect x="20.8" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (6 samples, 0.05%)</title><rect x="21.4" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.03%)</title><rect x="21.6" y="483.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="22.1" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="22.1" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (4 samples, 0.03%)</title><rect x="22.4" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="22.4" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="22.4" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="22.4" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (350 samples, 3.03%)</title><rect x="23.2" y="659.0" width="35.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.2" y="670.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (49 samples, 0.42%)</title><rect x="23.2" y="643.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.21%)</title><rect x="23.5" y="627.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.21%)</title><rect x="23.5" y="611.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 0.17%)</title><rect x="25.9" y="627.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.15%)</title><rect x="26.0" y="611.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.0" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.13%)</title><rect x="26.2" y="595.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.03%)</title><rect x="27.4" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="30.4" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (287 samples, 2.48%)</title><rect x="28.2" y="643.0" width="29.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.2" y="654.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (287 samples, 2.48%)</title><rect x="28.2" y="627.0" width="29.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.2" y="638.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (281 samples, 2.43%)</title><rect x="28.4" y="611.0" width="28.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.4" y="622.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (184 samples, 1.59%)</title><rect x="29.1" y="595.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.1" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (124 samples, 1.07%)</title><rect x="29.1" y="579.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.1" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (77 samples, 0.67%)</title><rect x="29.1" y="563.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.1" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (9 samples, 0.08%)</title><rect x="29.9" y="547.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (5 samples, 0.04%)</title><rect x="30.3" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.04%)</title><rect x="30.3" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (49 samples, 0.42%)</title><rect x="31.1" y="547.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.1" y="558.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (46 samples, 0.40%)</title><rect x="31.4" y="531.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.4" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (44 samples, 0.38%)</title><rect x="31.7" y="515.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.7" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (5 samples, 0.04%)</title><rect x="31.9" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.9" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (5 samples, 0.04%)</title><rect x="31.9" y="483.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.9" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (25 samples, 0.22%)</title><rect x="32.6" y="499.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.6" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (20 samples, 0.17%)</title><rect x="32.9" y="483.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.9" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (14 samples, 0.12%)</title><rect x="33.2" y="467.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.2" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (3 samples, 0.03%)</title><rect x="33.2" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.2" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (3 samples, 0.03%)</title><rect x="33.2" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.2" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (6 samples, 0.05%)</title><rect x="33.5" y="451.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.5" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.03%)</title><rect x="33.7" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.7" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (3 samples, 0.03%)</title><rect x="34.1" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.1" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scanIPv4Address (3 samples, 0.03%)</title><rect x="34.1" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.1" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="34.1" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.1" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="34.6" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.6" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (7 samples, 0.06%)</title><rect x="35.2" y="499.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="35.2" y="483.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="35.2" y="467.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.06%)</title><rect x="36.2" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.05%)</title><rect x="36.4" y="531.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.05%)</title><rect x="36.4" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (47 samples, 0.41%)</title><rect x="37.0" y="563.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (46 samples, 0.40%)</title><rect x="37.1" y="547.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (7 samples, 0.06%)</title><rect x="37.1" y="531.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (7 samples, 0.06%)</title><rect x="37.1" y="515.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (7 samples, 0.06%)</title><rect x="37.1" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (39 samples, 0.34%)</title><rect x="37.8" y="531.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (39 samples, 0.34%)</title><rect x="37.8" y="515.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.8" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (38 samples, 0.33%)</title><rect x="37.9" y="499.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (16 samples, 0.14%)</title><rect x="40.0" y="483.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.0" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (15 samples, 0.13%)</title><rect x="40.1" y="467.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (10 samples, 0.09%)</title><rect x="40.3" y="451.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (10 samples, 0.09%)</title><rect x="40.3" y="435.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (8 samples, 0.07%)</title><rect x="40.3" y="419.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.3" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="40.8" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.8" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (60 samples, 0.52%)</title><rect x="41.8" y="579.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.8" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (26 samples, 0.23%)</title><rect x="41.9" y="563.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="44.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (26 samples, 0.23%)</title><rect x="41.9" y="547.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (11 samples, 0.10%)</title><rect x="42.6" y="531.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (7 samples, 0.06%)</title><rect x="43.7" y="531.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (7 samples, 0.06%)</title><rect x="43.7" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (33 samples, 0.29%)</title><rect x="44.5" y="563.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (33 samples, 0.29%)</title><rect x="44.5" y="547.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (3 samples, 0.03%)</title><rect x="44.5" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.5" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (30 samples, 0.26%)</title><rect x="44.8" y="531.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="47.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (74 samples, 0.64%)</title><rect x="47.9" y="595.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (43 samples, 0.37%)</title><rect x="48.3" y="579.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (42 samples, 0.36%)</title><rect x="48.4" y="563.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.4" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 0.16%)</title><rect x="48.7" y="547.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.7" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 0.14%)</title><rect x="48.9" y="531.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.9" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (20 samples, 0.17%)</title><rect x="50.7" y="547.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="53.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (27 samples, 0.23%)</title><rect x="52.7" y="579.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (27 samples, 0.23%)</title><rect x="52.7" y="563.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.7" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.03%)</title><rect x="53.0" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.03%)</title><rect x="53.0" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="56.0" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="53.1" y="515.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="56.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="53.1" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.1" y="510.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="53.1" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="56.1" y="494.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (3 samples, 0.03%)</title><rect x="53.1" y="467.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="56.1" y="478.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="53.1" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="56.1" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (20 samples, 0.17%)</title><rect x="53.4" y="547.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="56.4" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (16 samples, 0.14%)</title><rect x="55.5" y="595.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="58.5" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.&lt;init&gt; (4 samples, 0.03%)</title><rect x="57.1" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.1" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (14 samples, 0.12%)</title><rect x="57.5" y="643.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="60.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (8,037 samples, 69.57%)</title><rect x="58.9" y="675.0" width="820.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.9" y="686.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (8,035 samples, 69.55%)</title><rect x="59.1" y="659.0" width="820.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.1" y="670.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (3,331 samples, 28.83%)</title><rect x="59.9" y="643.0" width="340.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.9" y="654.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (143 samples, 1.24%)</title><rect x="60.1" y="627.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (142 samples, 1.23%)</title><rect x="60.3" y="611.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (139 samples, 1.20%)</title><rect x="60.4" y="595.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.4" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.05%)</title><rect x="61.2" y="579.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="64.2" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.05%)</title><rect x="61.2" y="563.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="64.2" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (6 samples, 0.05%)</title><rect x="61.2" y="547.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="64.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (8 samples, 0.07%)</title><rect x="61.8" y="579.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.8" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.07%)</title><rect x="61.8" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.8" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="62.3" y="547.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="65.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (93 samples, 0.80%)</title><rect x="62.8" y="579.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (22 samples, 0.19%)</title><rect x="72.3" y="579.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (22 samples, 0.19%)</title><rect x="72.3" y="563.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (22 samples, 0.19%)</title><rect x="72.3" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.3" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (22 samples, 0.19%)</title><rect x="72.3" y="531.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.3" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (21 samples, 0.18%)</title><rect x="72.4" y="515.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.4" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (21 samples, 0.18%)</title><rect x="72.4" y="499.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.4" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.07%)</title><rect x="73.7" y="483.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="76.7" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (3,186 samples, 27.58%)</title><rect x="74.8" y="627.0" width="325.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.8" y="638.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (34 samples, 0.29%)</title><rect x="75.3" y="611.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.3" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (33 samples, 0.29%)</title><rect x="75.4" y="595.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.4" y="606.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (9 samples, 0.08%)</title><rect x="75.8" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.05%)</title><rect x="76.1" y="563.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.04%)</title><rect x="76.1" y="547.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.1" y="558.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (18 samples, 0.16%)</title><rect x="76.8" y="579.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.8" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (17 samples, 0.15%)</title><rect x="76.9" y="563.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.9" y="574.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (17 samples, 0.15%)</title><rect x="76.9" y="547.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.9" y="558.0"></text>
</g>
<g>
<title>java/security/Provider.getService (15 samples, 0.13%)</title><rect x="76.9" y="531.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.9" y="542.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (9 samples, 0.08%)</title><rect x="77.0" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.0" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (9 samples, 0.08%)</title><rect x="77.0" y="499.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (9 samples, 0.08%)</title><rect x="77.0" y="483.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (4 samples, 0.03%)</title><rect x="77.5" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.5" y="478.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (4 samples, 0.03%)</title><rect x="77.5" y="451.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.5" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (5 samples, 0.04%)</title><rect x="77.9" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.04%)</title><rect x="77.9" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (77 samples, 0.67%)</title><rect x="78.7" y="611.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.7" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (77 samples, 0.67%)</title><rect x="78.7" y="595.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (42 samples, 0.36%)</title><rect x="80.8" y="579.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (12 samples, 0.10%)</title><rect x="85.1" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (11 samples, 0.10%)</title><rect x="85.1" y="563.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (5 samples, 0.04%)</title><rect x="85.7" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.9" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.9" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.9" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.9" y="499.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.9" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.9" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.9" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="85.9" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.9" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (60 samples, 0.52%)</title><rect x="86.7" y="611.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.7" y="622.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (58 samples, 0.50%)</title><rect x="86.9" y="595.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.9" y="606.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (58 samples, 0.50%)</title><rect x="86.9" y="579.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.9" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (5 samples, 0.04%)</title><rect x="87.1" y="563.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.1" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (4 samples, 0.03%)</title><rect x="87.1" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="90.1" y="558.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (49 samples, 0.42%)</title><rect x="87.8" y="563.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.8" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (49 samples, 0.42%)</title><rect x="87.8" y="547.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (11 samples, 0.10%)</title><rect x="87.8" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (9 samples, 0.08%)</title><rect x="87.8" y="515.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (5 samples, 0.04%)</title><rect x="88.0" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (5 samples, 0.04%)</title><rect x="88.0" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.0" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (4 samples, 0.03%)</title><rect x="88.1" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.1" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (35 samples, 0.30%)</title><rect x="89.0" y="531.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.0" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (32 samples, 0.28%)</title><rect x="89.0" y="515.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.0" y="526.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (31 samples, 0.27%)</title><rect x="89.1" y="499.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.1" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (31 samples, 0.27%)</title><rect x="89.1" y="483.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.1" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (31 samples, 0.27%)</title><rect x="89.1" y="467.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.1" y="478.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (31 samples, 0.27%)</title><rect x="89.1" y="451.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.1" y="462.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (30 samples, 0.26%)</title><rect x="89.2" y="435.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.2" y="446.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (5 samples, 0.04%)</title><rect x="89.2" y="419.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.04%)</title><rect x="89.2" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (25 samples, 0.22%)</title><rect x="89.7" y="419.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.7" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (17 samples, 0.15%)</title><rect x="89.7" y="403.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.7" y="414.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (14 samples, 0.12%)</title><rect x="89.8" y="387.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (7 samples, 0.06%)</title><rect x="89.8" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (5 samples, 0.04%)</title><rect x="89.8" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.8" y="366.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (5 samples, 0.04%)</title><rect x="89.8" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (5 samples, 0.04%)</title><rect x="89.8" y="323.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.8" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.03%)</title><rect x="90.5" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="382.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.03%)</title><rect x="90.5" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.5" y="366.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (4 samples, 0.03%)</title><rect x="90.5" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.5" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (7 samples, 0.06%)</title><rect x="91.4" y="403.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.4" y="414.0"></text>
</g>
<g>
<title>java/security/Provider.getService (7 samples, 0.06%)</title><rect x="91.4" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.4" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (5 samples, 0.04%)</title><rect x="91.6" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.04%)</title><rect x="91.6" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.6" y="366.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.quickCheckMemberAccess (3 samples, 0.03%)</title><rect x="92.2" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.2" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.update (1,281 samples, 11.09%)</title><rect x="92.8" y="611.0" width="130.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.8" y="622.0">java/security/Si..</text>
</g>
<g>
<title>java/security/Signature.update (1,280 samples, 11.08%)</title><rect x="92.9" y="595.0" width="130.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.9" y="606.0">java/security/Si..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (1,278 samples, 11.06%)</title><rect x="93.1" y="579.0" width="130.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.1" y="590.0">java/security/Si..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (1,275 samples, 11.04%)</title><rect x="93.4" y="563.0" width="130.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="574.0">sun/security/rsa..</text>
</g>
<g>
<title>java/security/MessageDigest.update (1,275 samples, 11.04%)</title><rect x="93.4" y="547.0" width="130.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.4" y="558.0">java/security/Me..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1,275 samples, 11.04%)</title><rect x="93.4" y="531.0" width="130.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="542.0">java/security/Me..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="93.4" y="515.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="96.4" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1,272 samples, 11.01%)</title><rect x="93.8" y="515.0" width="129.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.8" y="526.0">sun/security/pro..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (1,269 samples, 10.98%)</title><rect x="94.1" y="499.0" width="129.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.1" y="510.0">sun/security/pro..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (1,259 samples, 10.90%)</title><rect x="95.1" y="483.0" width="128.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.1" y="494.0">sun/security/pro..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (60 samples, 0.52%)</title><rect x="208.4" y="467.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.4" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (90 samples, 0.78%)</title><rect x="214.5" y="467.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.5" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.verify (1,728 samples, 14.96%)</title><rect x="223.7" y="611.0" width="176.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.7" y="622.0">java/security/Signature..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (1,727 samples, 14.95%)</title><rect x="223.8" y="595.0" width="176.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.8" y="606.0">java/security/Signature..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (1,726 samples, 14.94%)</title><rect x="223.9" y="579.0" width="176.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.9" y="590.0">sun/security/rsa/RSASig..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (1,321 samples, 11.43%)</title><rect x="223.9" y="563.0" width="134.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.9" y="574.0">sun/security/rsa/..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (1,321 samples, 11.43%)</title><rect x="223.9" y="547.0" width="134.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.9" y="558.0">sun/security/rsa/..</text>
</g>
<g>
<title>java/math/BigInteger.modPow (1,305 samples, 11.30%)</title><rect x="223.9" y="531.0" width="133.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.9" y="542.0">java/math/BigInte..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (1,302 samples, 11.27%)</title><rect x="224.2" y="515.0" width="133.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.2" y="526.0">java/math/BigInt..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (68 samples, 0.59%)</title><rect x="227.1" y="499.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="230.1" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (62 samples, 0.54%)</title><rect x="227.8" y="483.0" width="6.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="230.8" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (850 samples, 7.36%)</title><rect x="234.1" y="499.0" width="86.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="237.1" y="510.0">SharedRunt..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (815 samples, 7.05%)</title><rect x="237.7" y="483.0" width="83.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="240.7" y="494.0">montgomer..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.04%)</title><rect x="320.9" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.9" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="321.1" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.1" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.equals (4 samples, 0.03%)</title><rect x="321.5" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.5" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (66 samples, 0.57%)</title><rect x="322.1" y="499.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.1" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (61 samples, 0.53%)</title><rect x="322.6" y="483.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.6" y="494.0"></text>
</g>
<g>
<title>mulAdd (59 samples, 0.51%)</title><rect x="322.8" y="467.0" width="6.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="325.8" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (62 samples, 0.54%)</title><rect x="328.9" y="499.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.9" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (59 samples, 0.51%)</title><rect x="329.2" y="483.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.2" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (59 samples, 0.51%)</title><rect x="329.2" y="467.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="332.2" y="478.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (56 samples, 0.48%)</title><rect x="329.5" y="451.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="332.5" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (188 samples, 1.63%)</title><rect x="335.2" y="499.0" width="19.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.2" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (188 samples, 1.63%)</title><rect x="335.2" y="483.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.2" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (188 samples, 1.63%)</title><rect x="335.2" y="467.0" width="19.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.2" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (184 samples, 1.59%)</title><rect x="335.4" y="451.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.4" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (3 samples, 0.03%)</title><rect x="338.2" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.2" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (145 samples, 1.26%)</title><rect x="338.5" y="435.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.5" y="446.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="353.9" y="435.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="356.9" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (3 samples, 0.03%)</title><rect x="354.6" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.6" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.06%)</title><rect x="354.9" y="499.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.9" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (4 samples, 0.03%)</title><rect x="355.2" y="483.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.2" y="494.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (10 samples, 0.09%)</title><rect x="355.7" y="499.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="358.7" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="356.8" y="499.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="359.8" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (9 samples, 0.08%)</title><rect x="357.3" y="531.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (7 samples, 0.06%)</title><rect x="357.3" y="515.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (6 samples, 0.05%)</title><rect x="357.4" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.4" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (6 samples, 0.05%)</title><rect x="358.2" y="531.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="361.2" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (6 samples, 0.05%)</title><rect x="358.2" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.2" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (305 samples, 2.64%)</title><rect x="358.8" y="563.0" width="31.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.8" y="574.0">su..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (305 samples, 2.64%)</title><rect x="358.8" y="547.0" width="31.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.8" y="558.0">su..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (300 samples, 2.60%)</title><rect x="359.2" y="531.0" width="30.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.2" y="542.0">ja..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (299 samples, 2.59%)</title><rect x="359.3" y="515.0" width="30.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.3" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (299 samples, 2.59%)</title><rect x="359.3" y="499.0" width="30.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="362.3" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (299 samples, 2.59%)</title><rect x="359.3" y="483.0" width="30.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.3" y="494.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (299 samples, 2.59%)</title><rect x="359.3" y="467.0" width="30.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.3" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (297 samples, 2.57%)</title><rect x="359.5" y="451.0" width="30.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.5" y="462.0">ja..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (283 samples, 2.45%)</title><rect x="360.7" y="435.0" width="28.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="363.7" y="446.0">Ja..</text>
</g>
<g>
<title>JVM_FillInStackTrace (273 samples, 2.36%)</title><rect x="361.3" y="419.0" width="27.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="364.3" y="430.0">J..</text>
</g>
<g>
<title>JavaThread::active() (4 samples, 0.03%)</title><rect x="361.7" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="364.7" y="414.0"></text>
</g>
<g>
<title>PreserveExceptionMark::~PreserveExceptionMark() (3 samples, 0.03%)</title><rect x="362.3" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="365.3" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.03%)</title><rect x="362.6" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="365.6" y="414.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (256 samples, 2.22%)</title><rect x="363.0" y="403.0" width="26.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="366.0" y="414.0">j..</text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (4 samples, 0.03%)</title><rect x="364.1" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.1" y="398.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (4 samples, 0.03%)</title><rect x="364.8" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="367.8" y="398.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (231 samples, 2.00%)</title><rect x="365.3" y="387.0" width="23.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="368.3" y="398.0">j..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (19 samples, 0.16%)</title><rect x="371.2" y="371.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.2" y="382.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (16 samples, 0.14%)</title><rect x="371.3" y="355.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="374.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (5 samples, 0.04%)</title><rect x="371.3" y="339.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.3" y="350.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.03%)</title><rect x="371.8" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.8" y="350.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (4 samples, 0.03%)</title><rect x="371.8" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="374.8" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.03%)</title><rect x="372.2" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="375.2" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="372.3" y="323.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.3" y="334.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (66 samples, 0.57%)</title><rect x="373.1" y="371.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="376.1" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="379.8" y="371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="382.8" y="382.0"></text>
</g>
<g>
<title>JDK_Version::is_gte_jdk14x_version() (4 samples, 0.03%)</title><rect x="380.5" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="383.5" y="382.0"></text>
</g>
<g>
<title>JDK_Version::current() (4 samples, 0.03%)</title><rect x="380.5" y="355.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="383.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.07%)</title><rect x="380.9" y="371.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="383.9" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.03%)</title><rect x="380.9" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="383.9" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="380.9" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="383.9" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.03%)</title><rect x="380.9" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.9" y="334.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (5 samples, 0.04%)</title><rect x="381.7" y="371.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="384.7" y="382.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (12 samples, 0.10%)</title><rect x="382.2" y="371.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="385.2" y="382.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="383.4" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.4" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (39 samples, 0.34%)</title><rect x="383.7" y="371.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.7" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (21 samples, 0.18%)</title><rect x="384.0" y="355.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="387.0" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.14%)</title><rect x="384.2" y="339.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="387.2" y="350.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (15 samples, 0.13%)</title><rect x="384.2" y="323.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="387.2" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (15 samples, 0.13%)</title><rect x="384.2" y="307.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.2" y="318.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (3 samples, 0.03%)</title><rect x="386.2" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="389.2" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (11 samples, 0.10%)</title><rect x="386.5" y="355.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="389.5" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.07%)</title><rect x="386.8" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="389.8" y="350.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.07%)</title><rect x="386.8" y="323.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="389.8" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.07%)</title><rect x="386.8" y="307.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="389.8" y="318.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (3 samples, 0.03%)</title><rect x="388.1" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="391.1" y="382.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (3 samples, 0.03%)</title><rect x="388.1" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="391.1" y="366.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (4 samples, 0.03%)</title><rect x="388.5" y="371.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="391.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.03%)</title><rect x="389.1" y="419.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="392.1" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (81 samples, 0.70%)</title><rect x="390.0" y="563.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.0" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (4 samples, 0.03%)</title><rect x="390.5" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.5" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.init (4 samples, 0.03%)</title><rect x="390.5" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.5" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="390.6" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.6" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (23 samples, 0.20%)</title><rect x="391.0" y="547.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.0" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="391.1" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.1" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (19 samples, 0.16%)</title><rect x="391.4" y="531.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.4" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (5 samples, 0.04%)</title><rect x="392.7" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.7" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (5 samples, 0.04%)</title><rect x="392.7" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.7" y="510.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (4 samples, 0.03%)</title><rect x="392.8" y="483.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.8" y="494.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (47 samples, 0.41%)</title><rect x="393.4" y="547.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.4" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (31 samples, 0.27%)</title><rect x="393.9" y="531.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.9" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (30 samples, 0.26%)</title><rect x="394.0" y="515.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.0" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (12 samples, 0.10%)</title><rect x="395.7" y="499.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Object.clone (11 samples, 0.10%)</title><rect x="395.8" y="483.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.8" y="494.0"></text>
</g>
<g>
<title>JVM_Clone (6 samples, 0.05%)</title><rect x="396.1" y="467.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="399.1" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (9 samples, 0.08%)</title><rect x="397.1" y="531.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.1" y="542.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (7 samples, 0.06%)</title><rect x="397.3" y="515.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.3" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (19 samples, 0.16%)</title><rect x="398.2" y="563.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.2" y="574.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (19 samples, 0.16%)</title><rect x="398.2" y="547.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.2" y="558.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (19 samples, 0.16%)</title><rect x="398.2" y="531.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.2" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (18 samples, 0.16%)</title><rect x="398.3" y="515.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.3" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (18 samples, 0.16%)</title><rect x="398.3" y="499.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.3" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (17 samples, 0.15%)</title><rect x="398.4" y="483.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.4" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (3 samples, 0.03%)</title><rect x="398.8" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.8" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (10 samples, 0.09%)</title><rect x="399.1" y="467.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/factories/DefaultJWSVerifierFactory.createJWSVerifier (92 samples, 0.80%)</title><rect x="400.2" y="643.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.2" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jca/JCAContext.getSecureRandom (53 samples, 0.46%)</title><rect x="400.4" y="627.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.4" y="638.0"></text>
</g>
<g>
<title>java/security/SecureRandom.&lt;init&gt; (53 samples, 0.46%)</title><rect x="400.4" y="611.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.4" y="622.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getDefaultPRNG (52 samples, 0.45%)</title><rect x="400.5" y="595.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.5" y="606.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getInstance (40 samples, 0.35%)</title><rect x="400.5" y="579.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.5" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (36 samples, 0.31%)</title><rect x="400.9" y="563.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="403.9" y="574.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (18 samples, 0.16%)</title><rect x="401.0" y="547.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.0" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (16 samples, 0.14%)</title><rect x="401.1" y="531.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (8 samples, 0.07%)</title><rect x="401.1" y="515.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (7 samples, 0.06%)</title><rect x="401.1" y="499.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (5 samples, 0.04%)</title><rect x="401.2" y="483.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.2" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (4 samples, 0.03%)</title><rect x="401.3" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.3" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (4 samples, 0.03%)</title><rect x="401.3" y="451.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.3" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.03%)</title><rect x="401.9" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="402.4" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="402.4" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.4" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (17 samples, 0.15%)</title><rect x="402.8" y="547.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.8" y="558.0"></text>
</g>
<g>
<title>java/security/Provider.getService (16 samples, 0.14%)</title><rect x="402.8" y="531.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.8" y="542.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.07%)</title><rect x="403.2" y="515.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.2" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.07%)</title><rect x="403.2" y="499.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (8 samples, 0.07%)</title><rect x="403.2" y="483.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.2" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.03%)</title><rect x="404.0" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.03%)</title><rect x="404.0" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.0" y="510.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (4 samples, 0.03%)</title><rect x="404.0" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="404.2" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.2" y="478.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getPrngAlgorithm (12 samples, 0.10%)</title><rect x="404.6" y="579.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.6" y="590.0"></text>
</g>
<g>
<title>java/security/Provider.getServices (3 samples, 0.03%)</title><rect x="404.9" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.9" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (36 samples, 0.31%)</title><rect x="405.9" y="627.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (29 samples, 0.25%)</title><rect x="406.0" y="611.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (29 samples, 0.25%)</title><rect x="406.0" y="595.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (28 samples, 0.24%)</title><rect x="406.1" y="579.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (22 samples, 0.19%)</title><rect x="406.5" y="563.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (3 samples, 0.03%)</title><rect x="406.7" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.7" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (12 samples, 0.10%)</title><rect x="407.4" y="547.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="410.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (6 samples, 0.05%)</title><rect x="409.0" y="611.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (6 samples, 0.05%)</title><rect x="409.0" y="595.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="409.0" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="409.3" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.hashCode (3 samples, 0.03%)</title><rect x="409.3" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.3" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/proc/DefaultJOSEObjectTypeVerifier.verify (5 samples, 0.04%)</title><rect x="409.6" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.03%)</title><rect x="409.8" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.03%)</title><rect x="409.8" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.extractJWTClaimsSet (4,196 samples, 36.32%)</title><rect x="410.1" y="643.0" width="428.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.1" y="654.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.extractJWTClaimsSet</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (4,196 samples, 36.32%)</title><rect x="410.1" y="627.0" width="428.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.1" y="638.0">com/nimbusds/jwt/SignedJWT.getJWTClaimsSet</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (4,145 samples, 35.88%)</title><rect x="410.1" y="611.0" width="423.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.1" y="622.0">com/nimbusds/jose/Payload.toJSONObject</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (2,683 samples, 23.22%)</title><rect x="410.1" y="595.0" width="274.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.1" y="606.0">com/nimbusds/jose/Payload.toString</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (2,672 samples, 23.13%)</title><rect x="410.1" y="579.0" width="272.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.1" y="590.0">com/nimbusds/jose/util/Base64.decode..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (2,570 samples, 22.25%)</title><rect x="410.1" y="563.0" width="262.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.1" y="574.0">com/nimbusds/jose/util/Base64.decode</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (2,570 samples, 22.25%)</title><rect x="410.1" y="547.0" width="262.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="413.1" y="558.0">com/nimbusds/jose/util/Base64Codec...</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (1,541 samples, 13.34%)</title><rect x="495.3" y="531.0" width="157.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.3" y="542.0">com/nimbusds/jose/ut..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (79 samples, 0.68%)</title><rect x="644.6" y="515.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (167 samples, 1.45%)</title><rect x="652.7" y="531.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (167 samples, 1.45%)</title><rect x="652.7" y="515.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.7" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.07%)</title><rect x="656.5" y="499.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.5" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.06%)</title><rect x="656.5" y="483.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="659.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (7 samples, 0.06%)</title><rect x="656.5" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (22 samples, 0.19%)</title><rect x="657.4" y="499.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.4" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 0.19%)</title><rect x="657.4" y="483.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.4" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (20 samples, 0.17%)</title><rect x="657.6" y="467.0" width="2.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="660.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (98 samples, 0.85%)</title><rect x="659.6" y="499.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.6" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="669.9" y="531.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.9" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (21 samples, 0.18%)</title><rect x="670.4" y="531.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="673.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (102 samples, 0.88%)</title><rect x="672.6" y="563.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (100 samples, 0.87%)</title><rect x="672.8" y="547.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (100 samples, 0.87%)</title><rect x="672.8" y="531.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (73 samples, 0.63%)</title><rect x="674.7" y="515.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (8 samples, 0.07%)</title><rect x="682.2" y="515.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="682.3" y="499.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="682.3" y="483.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.3" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="682.3" y="467.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="685.3" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="682.3" y="451.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.3" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.10%)</title><rect x="683.0" y="579.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="686.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (1,462 samples, 12.65%)</title><rect x="684.1" y="595.0" width="149.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="687.1" y="606.0">com/nimbusds/jose/u..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (1,462 samples, 12.65%)</title><rect x="684.1" y="579.0" width="149.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="687.1" y="590.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (3 samples, 0.03%)</title><rect x="684.1" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.1" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (3 samples, 0.03%)</title><rect x="684.1" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="687.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (3 samples, 0.03%)</title><rect x="684.1" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (1,459 samples, 12.63%)</title><rect x="684.4" y="563.0" width="149.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.4" y="574.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (1,459 samples, 12.63%)</title><rect x="684.4" y="547.0" width="149.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="687.4" y="558.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (1,459 samples, 12.63%)</title><rect x="684.4" y="531.0" width="149.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.4" y="542.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (1,458 samples, 12.62%)</title><rect x="684.5" y="515.0" width="148.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.5" y="526.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (1,457 samples, 12.61%)</title><rect x="684.6" y="499.0" width="148.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.6" y="510.0">com/nimbusds/jose/s..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (1,430 samples, 12.38%)</title><rect x="684.9" y="483.0" width="146.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.9" y="494.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (14 samples, 0.12%)</title><rect x="685.2" y="467.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (4 samples, 0.03%)</title><rect x="685.6" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.6" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (4 samples, 0.03%)</title><rect x="686.3" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.03%)</title><rect x="686.3" y="435.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.03%)</title><rect x="686.3" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="689.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="686.3" y="403.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.3" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (3 samples, 0.03%)</title><rect x="686.3" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.3" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (1,413 samples, 12.23%)</title><rect x="686.7" y="467.0" width="144.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.7" y="478.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (1,405 samples, 12.16%)</title><rect x="686.8" y="451.0" width="143.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.8" y="462.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (496 samples, 4.29%)</title><rect x="723.8" y="435.0" width="50.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="726.8" y="446.0">com/n..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.06%)</title><rect x="773.5" y="419.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.04%)</title><rect x="773.7" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="773.8" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="776.8" y="398.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="773.8" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.8" y="382.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (3 samples, 0.03%)</title><rect x="773.8" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="776.8" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="774.2" y="419.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="777.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (55 samples, 0.48%)</title><rect x="774.5" y="435.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="777.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="774.6" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.6" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="774.6" y="403.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="774.8" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="777.8" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (48 samples, 0.42%)</title><rect x="775.2" y="419.0" width="4.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="778.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (490 samples, 4.24%)</title><rect x="780.1" y="435.0" width="50.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="783.1" y="446.0">com/n..</text>
</g>
<g>
<title>java/lang/String.charAt (337 samples, 2.92%)</title><rect x="795.7" y="419.0" width="34.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.7" y="430.0">ja..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (3 samples, 0.03%)</title><rect x="823.7" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.7" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (60 samples, 0.52%)</title><rect x="824.0" y="403.0" width="6.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="827.0" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="830.3" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="830.3" y="435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="830.3" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.3" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.03%)</title><rect x="830.6" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="830.6" y="435.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.6" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (13 samples, 0.11%)</title><rect x="831.0" y="483.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.0" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (9 samples, 0.08%)</title><rect x="831.1" y="467.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="831.3" y="451.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="831.6" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.6" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.03%)</title><rect x="831.6" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.08%)</title><rect x="832.5" y="483.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="832.8" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.8" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (51 samples, 0.44%)</title><rect x="833.4" y="611.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (3 samples, 0.03%)</title><rect x="833.7" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="833.7" y="579.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.05%)</title><rect x="834.0" y="595.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (6 samples, 0.05%)</title><rect x="834.0" y="579.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.03%)</title><rect x="834.3" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="834.3" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (16 samples, 0.14%)</title><rect x="834.7" y="595.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (16 samples, 0.14%)</title><rect x="834.7" y="579.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (16 samples, 0.14%)</title><rect x="834.7" y="563.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (14 samples, 0.12%)</title><rect x="834.7" y="547.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (14 samples, 0.12%)</title><rect x="834.7" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.03%)</title><rect x="835.4" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="835.4" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="838.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (4 samples, 0.03%)</title><rect x="836.3" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.03%)</title><rect x="836.3" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="836.4" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="839.4" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (6 samples, 0.05%)</title><rect x="836.8" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="836.8" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="836.8" y="563.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (5 samples, 0.04%)</title><rect x="837.4" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.04%)</title><rect x="837.4" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.04%)</title><rect x="837.4" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.03%)</title><rect x="838.3" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.03%)</title><rect x="838.3" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.selectKeys (360 samples, 3.12%)</title><rect x="838.6" y="643.0" width="36.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.6" y="654.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.selectJWSKeys (360 samples, 3.12%)</title><rect x="838.6" y="627.0" width="36.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="841.6" y="638.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyConverter.toJavaKeys (237 samples, 2.05%)</title><rect x="839.4" y="611.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="842.4" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toKeyPair (235 samples, 2.03%)</title><rect x="839.5" y="595.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="842.5" y="606.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toRSAPublicKey (233 samples, 2.02%)</title><rect x="839.7" y="579.0" width="23.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="842.7" y="590.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToBigInteger (99 samples, 0.86%)</title><rect x="839.7" y="563.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.7" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (85 samples, 0.74%)</title><rect x="840.6" y="547.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.6" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (85 samples, 0.74%)</title><rect x="840.6" y="531.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.6" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (47 samples, 0.41%)</title><rect x="842.4" y="515.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (5 samples, 0.04%)</title><rect x="846.7" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="849.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (16 samples, 0.14%)</title><rect x="847.2" y="515.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (16 samples, 0.14%)</title><rect x="847.2" y="499.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (3 samples, 0.03%)</title><rect x="848.0" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (5 samples, 0.04%)</title><rect x="848.3" y="483.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="848.5" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="848.5" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.5" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="848.5" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.5" y="446.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.03%)</title><rect x="848.5" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.5" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.04%)</title><rect x="849.3" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.3" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (5 samples, 0.04%)</title><rect x="849.3" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.3" y="542.0"></text>
</g>
<g>
<title>java/security/KeyFactory.generatePublic (64 samples, 0.55%)</title><rect x="849.8" y="563.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.8" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.engineGeneratePublic (64 samples, 0.55%)</title><rect x="849.8" y="547.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.8" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.generatePublic (64 samples, 0.55%)</title><rect x="849.8" y="531.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.8" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.&lt;init&gt; (63 samples, 0.55%)</title><rect x="849.9" y="515.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.9" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.checkExponentRange (8 samples, 0.07%)</title><rect x="850.5" y="499.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.5" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (6 samples, 0.05%)</title><rect x="850.7" y="483.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="853.7" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (5 samples, 0.04%)</title><rect x="850.8" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.8" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putInteger (25 samples, 0.22%)</title><rect x="851.4" y="499.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.4" y="510.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (10 samples, 0.09%)</title><rect x="851.8" y="483.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.8" y="494.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (7 samples, 0.06%)</title><rect x="852.0" y="467.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.0" y="478.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (6 samples, 0.05%)</title><rect x="852.1" y="451.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.1" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.05%)</title><rect x="852.1" y="435.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.1" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="852.3" y="419.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="855.3" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (4 samples, 0.03%)</title><rect x="852.8" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.8" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putLength (7 samples, 0.06%)</title><rect x="853.3" y="483.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.3" y="494.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (4 samples, 0.03%)</title><rect x="853.6" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.6" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (10 samples, 0.09%)</title><rect x="854.0" y="499.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.0" y="510.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (10 samples, 0.09%)</title><rect x="854.0" y="483.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.clone (5 samples, 0.04%)</title><rect x="854.3" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="857.3" y="478.0"></text>
</g>
<g>
<title>JVM_Clone (4 samples, 0.03%)</title><rect x="854.4" y="451.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="857.4" y="462.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.toByteArray (12 samples, 0.10%)</title><rect x="855.0" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.0" y="510.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.encode (12 samples, 0.10%)</title><rect x="855.0" y="483.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.0" y="494.0"></text>
</g>
<g>
<title>java/io/OutputStream.write (6 samples, 0.05%)</title><rect x="855.5" y="467.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.5" y="478.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (6 samples, 0.05%)</title><rect x="855.5" y="451.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="858.5" y="462.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (5 samples, 0.04%)</title><rect x="855.6" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.6" y="446.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (5 samples, 0.04%)</title><rect x="855.6" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.6" y="430.0"></text>
</g>
<g>
<title>java/security/KeyFactory.getInstance (70 samples, 0.61%)</title><rect x="856.3" y="563.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.3" y="574.0"></text>
</g>
<g>
<title>java/security/KeyFactory.&lt;init&gt; (69 samples, 0.60%)</title><rect x="856.4" y="547.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="859.4" y="558.0"></text>
</g>
<g>
<title>java/security/KeyFactory.nextSpi (66 samples, 0.57%)</title><rect x="856.7" y="531.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="859.7" y="542.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (28 samples, 0.24%)</title><rect x="857.2" y="515.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (20 samples, 0.17%)</title><rect x="857.3" y="499.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (18 samples, 0.16%)</title><rect x="857.3" y="483.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="860.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (13 samples, 0.11%)</title><rect x="857.4" y="467.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (13 samples, 0.11%)</title><rect x="857.4" y="451.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.4" y="462.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (8 samples, 0.07%)</title><rect x="857.7" y="435.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.7" y="446.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (4 samples, 0.03%)</title><rect x="858.8" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.8" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyConstructor (3 samples, 0.03%)</title><rect x="858.8" y="451.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.8" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (3 samples, 0.03%)</title><rect x="858.8" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="861.8" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (3 samples, 0.03%)</title><rect x="859.5" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="862.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="859.8" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="862.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="859.8" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.8" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (29 samples, 0.25%)</title><rect x="860.1" y="515.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="863.1" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (26 samples, 0.23%)</title><rect x="860.4" y="499.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.4" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (26 samples, 0.23%)</title><rect x="860.4" y="483.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.4" y="494.0"></text>
</g>
<g>
<title>java/security/Provider.getService (17 samples, 0.15%)</title><rect x="860.8" y="467.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.8" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.matches (3 samples, 0.03%)</title><rect x="861.9" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.9" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 0.03%)</title><rect x="862.2" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="865.2" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="862.2" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.2" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (5 samples, 0.04%)</title><rect x="862.5" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="865.5" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (5 samples, 0.04%)</title><rect x="862.5" y="451.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="865.5" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (4 samples, 0.03%)</title><rect x="863.1" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.1" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (4 samples, 0.03%)</title><rect x="863.1" y="499.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.1" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (4 samples, 0.03%)</title><rect x="863.1" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.1" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/source/ImmutableJWKSet.get (23 samples, 0.20%)</title><rect x="863.6" y="611.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.6" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKSelector.select (23 samples, 0.20%)</title><rect x="863.6" y="595.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="866.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.matches (17 samples, 0.15%)</title><rect x="863.6" y="579.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (9 samples, 0.08%)</title><rect x="864.4" y="563.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (8 samples, 0.07%)</title><rect x="864.5" y="547.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.05%)</title><rect x="864.5" y="531.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (3 samples, 0.03%)</title><rect x="865.5" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="865.5" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.createJWKMatcher (67 samples, 0.58%)</title><rect x="865.9" y="611.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.9" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.forJWSHeader (66 samples, 0.57%)</title><rect x="866.0" y="595.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.algorithms (6 samples, 0.05%)</title><rect x="866.2" y="579.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.2" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (5 samples, 0.04%)</title><rect x="866.3" y="563.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="869.3" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (4 samples, 0.03%)</title><rect x="866.3" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="869.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="866.4" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="866.4" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyID (3 samples, 0.03%)</title><rect x="866.8" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.03%)</title><rect x="866.8" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.8" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.03%)</title><rect x="866.8" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="869.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyType (19 samples, 0.16%)</title><rect x="867.1" y="579.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (18 samples, 0.16%)</title><rect x="867.2" y="563.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.2" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (17 samples, 0.15%)</title><rect x="867.2" y="547.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.2" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (7 samples, 0.06%)</title><rect x="867.3" y="531.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="870.3" y="542.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (7 samples, 0.06%)</title><rect x="867.3" y="515.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="868.1" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.05%)</title><rect x="868.4" y="531.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="868.4" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.04%)</title><rect x="868.5" y="499.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.04%)</title><rect x="868.5" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.5" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyUses (17 samples, 0.15%)</title><rect x="869.1" y="579.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="872.1" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (17 samples, 0.15%)</title><rect x="869.1" y="563.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="872.1" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (15 samples, 0.13%)</title><rect x="869.1" y="547.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.1" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractList.iterator (5 samples, 0.04%)</title><rect x="869.3" y="531.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="872.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.07%)</title><rect x="869.8" y="531.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="872.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.07%)</title><rect x="869.8" y="515.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="872.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.05%)</title><rect x="869.8" y="499.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="872.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyUse.hashCode (3 samples, 0.03%)</title><rect x="870.1" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.1" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.forAlgorithm (9 samples, 0.08%)</title><rect x="870.8" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="873.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (6 samples, 0.05%)</title><rect x="871.1" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (6 samples, 0.05%)</title><rect x="871.1" y="547.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="871.1" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="871.4" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (8 samples, 0.07%)</title><rect x="871.7" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (8 samples, 0.07%)</title><rect x="871.7" y="563.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.03%)</title><rect x="871.9" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="874.9" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (18 samples, 0.16%)</title><rect x="872.9" y="611.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.9" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (6 samples, 0.05%)</title><rect x="874.8" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.8" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (6 samples, 0.05%)</title><rect x="874.8" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.8" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (6 samples, 0.05%)</title><rect x="874.8" y="579.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="877.8" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.verifyClaims (34 samples, 0.29%)</title><rect x="875.4" y="643.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTClaimsVerifier.verify (33 samples, 0.29%)</title><rect x="875.5" y="627.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getClaims (3 samples, 0.03%)</title><rect x="875.9" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.9" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (3 samples, 0.03%)</title><rect x="875.9" y="595.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="878.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.containsAll (13 samples, 0.11%)</title><rect x="876.4" y="611.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="879.4" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (13 samples, 0.11%)</title><rect x="876.4" y="595.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (10 samples, 0.09%)</title><rect x="876.4" y="579.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="879.4" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.06%)</title><rect x="876.7" y="563.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.7" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.03%)</title><rect x="877.0" y="547.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="880.0" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (3 samples, 0.03%)</title><rect x="877.5" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="880.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.keySet (5 samples, 0.04%)</title><rect x="877.9" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="880.9" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (5 samples, 0.04%)</title><rect x="879.0" y="643.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="882.0" y="654.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_large_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (223 samples, 1.93%)</title><rect x="879.8" y="739.0" width="22.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.8" y="750.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (222 samples, 1.92%)</title><rect x="879.8" y="723.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.8" y="734.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (170 samples, 1.47%)</title><rect x="880.2" y="707.0" width="17.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="883.2" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="880.4" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.4" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="880.4" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="883.4" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (144 samples, 1.25%)</title><rect x="880.7" y="691.0" width="14.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.7" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (143 samples, 1.24%)</title><rect x="880.8" y="675.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.8" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (3 samples, 0.03%)</title><rect x="880.8" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="883.8" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (3 samples, 0.03%)</title><rect x="880.8" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="883.8" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (3 samples, 0.03%)</title><rect x="881.3" y="659.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.3" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (3 samples, 0.03%)</title><rect x="881.3" y="643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="884.3" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (3 samples, 0.03%)</title><rect x="881.3" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.3" y="638.0"></text>
</g>
<g>
<title>java/security/Signature.sign (131 samples, 1.13%)</title><rect x="881.6" y="659.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="884.6" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (131 samples, 1.13%)</title><rect x="881.6" y="643.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="884.6" y="654.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (131 samples, 1.13%)</title><rect x="881.6" y="627.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.6" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (131 samples, 1.13%)</title><rect x="881.6" y="611.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.6" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (131 samples, 1.13%)</title><rect x="881.6" y="595.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="884.6" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (125 samples, 1.08%)</title><rect x="881.8" y="579.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="884.8" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (124 samples, 1.07%)</title><rect x="882.0" y="563.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.0" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (20 samples, 0.17%)</title><rect x="882.5" y="547.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.5" y="558.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (17 samples, 0.15%)</title><rect x="882.8" y="531.0" width="1.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="885.8" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (91 samples, 0.79%)</title><rect x="884.5" y="547.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.5" y="558.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (86 samples, 0.74%)</title><rect x="884.9" y="531.0" width="8.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="887.9" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (5 samples, 0.04%)</title><rect x="893.9" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="896.9" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (5 samples, 0.04%)</title><rect x="893.9" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (5 samples, 0.04%)</title><rect x="893.9" y="515.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="896.9" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (5 samples, 0.04%)</title><rect x="893.9" y="499.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="896.9" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="894.6" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.6" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="894.6" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.6" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (3 samples, 0.03%)</title><rect x="894.6" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3 samples, 0.03%)</title><rect x="894.6" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="897.6" y="542.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.03%)</title><rect x="895.0" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.0" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.update (4 samples, 0.03%)</title><rect x="895.0" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.0" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (4 samples, 0.03%)</title><rect x="895.0" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.0" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (4 samples, 0.03%)</title><rect x="895.0" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.0" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (4 samples, 0.03%)</title><rect x="895.0" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.0" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (4 samples, 0.03%)</title><rect x="895.0" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.0" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (4 samples, 0.03%)</title><rect x="895.0" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.0" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (4 samples, 0.03%)</title><rect x="895.0" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.0" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (4 samples, 0.03%)</title><rect x="895.0" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (11 samples, 0.10%)</title><rect x="895.4" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.4" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (11 samples, 0.10%)</title><rect x="895.4" y="675.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="898.4" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (11 samples, 0.10%)</title><rect x="895.4" y="659.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="898.4" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (6 samples, 0.05%)</title><rect x="895.4" y="643.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="898.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (6 samples, 0.05%)</title><rect x="895.4" y="627.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="898.4" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (6 samples, 0.05%)</title><rect x="895.4" y="611.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (5 samples, 0.04%)</title><rect x="895.4" y="595.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="898.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (3 samples, 0.03%)</title><rect x="895.6" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (3 samples, 0.03%)</title><rect x="896.0" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="899.0" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (3 samples, 0.03%)</title><rect x="896.0" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="899.0" y="638.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (7 samples, 0.06%)</title><rect x="896.9" y="691.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="899.9" y="702.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (7 samples, 0.06%)</title><rect x="896.9" y="675.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="899.9" y="686.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (7 samples, 0.06%)</title><rect x="896.9" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="899.9" y="670.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (46 samples, 0.40%)</title><rect x="897.7" y="707.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.7" y="718.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (46 samples, 0.40%)</title><rect x="897.7" y="691.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.7" y="702.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (46 samples, 0.40%)</title><rect x="897.7" y="675.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.7" y="686.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (44 samples, 0.38%)</title><rect x="897.8" y="659.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="900.8" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (44 samples, 0.38%)</title><rect x="897.8" y="643.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.8" y="654.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (5 samples, 0.04%)</title><rect x="897.8" y="627.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.8" y="638.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (5 samples, 0.04%)</title><rect x="897.8" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.8" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (4 samples, 0.03%)</title><rect x="897.9" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.9" y="606.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (4 samples, 0.03%)</title><rect x="897.9" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="900.9" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (4 samples, 0.03%)</title><rect x="897.9" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="900.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.03%)</title><rect x="897.9" y="547.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.03%)</title><rect x="897.9" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="900.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (4 samples, 0.03%)</title><rect x="897.9" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="900.9" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (4 samples, 0.03%)</title><rect x="897.9" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.9" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (3 samples, 0.03%)</title><rect x="898.0" y="483.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="901.0" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle, int, Thread*) (3 samples, 0.03%)</title><rect x="898.0" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.0" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="898.0" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.0" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (3 samples, 0.03%)</title><rect x="898.0" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.0" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="898.0" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.0" y="430.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (38 samples, 0.33%)</title><rect x="898.4" y="627.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.4" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (38 samples, 0.33%)</title><rect x="898.4" y="611.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.4" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (10 samples, 0.09%)</title><rect x="898.4" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="901.4" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (10 samples, 0.09%)</title><rect x="898.4" y="579.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.4" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (4 samples, 0.03%)</title><rect x="898.6" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="901.6" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (4 samples, 0.03%)</title><rect x="898.6" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="901.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (4 samples, 0.03%)</title><rect x="898.6" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="901.6" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.03%)</title><rect x="898.6" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.6" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.03%)</title><rect x="898.6" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.6" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (4 samples, 0.03%)</title><rect x="898.6" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="901.6" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (28 samples, 0.24%)</title><rect x="899.4" y="595.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.4" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (27 samples, 0.23%)</title><rect x="899.5" y="579.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="902.5" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (27 samples, 0.23%)</title><rect x="899.5" y="563.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="902.5" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (9 samples, 0.08%)</title><rect x="899.5" y="547.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.5" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (6 samples, 0.05%)</title><rect x="899.5" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="902.5" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (4 samples, 0.03%)</title><rect x="899.7" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.7" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="900.1" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.1" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (18 samples, 0.16%)</title><rect x="900.4" y="547.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.4" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (7 samples, 0.06%)</title><rect x="900.4" y="531.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.4" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.squareToLen (5 samples, 0.04%)</title><rect x="900.6" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.6" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.implSquareToLen (5 samples, 0.04%)</title><rect x="900.6" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.6" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (11 samples, 0.10%)</title><rect x="901.2" y="531.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.2" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (11 samples, 0.10%)</title><rect x="901.2" y="515.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.2" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (11 samples, 0.10%)</title><rect x="901.2" y="499.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="904.2" y="510.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (3 samples, 0.03%)</title><rect x="903.0" y="947.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.0" y="958.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (3 samples, 0.03%)</title><rect x="903.0" y="931.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.0" y="942.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (3 samples, 0.03%)</title><rect x="903.0" y="915.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.0" y="926.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (3 samples, 0.03%)</title><rect x="903.0" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.0" y="910.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="903.0" y="883.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.0" y="894.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="903.0" y="867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.0" y="878.0"></text>
</g>
<g>
<title>thread_start (2,807 samples, 24.30%)</title><rect x="903.3" y="947.0" width="286.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="906.3" y="958.0">thread_start</text>
</g>
<g>
<title>_pthread_start (2,807 samples, 24.30%)</title><rect x="903.3" y="931.0" width="286.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="906.3" y="942.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (2,807 samples, 24.30%)</title><rect x="903.3" y="915.0" width="286.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="906.3" y="926.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (2,807 samples, 24.30%)</title><rect x="903.3" y="899.0" width="286.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="906.3" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (143 samples, 1.24%)</title><rect x="903.3" y="883.0" width="14.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="906.3" y="894.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (43 samples, 0.37%)</title><rect x="903.4" y="867.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.4" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (37 samples, 0.32%)</title><rect x="903.6" y="851.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.6" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (37 samples, 0.32%)</title><rect x="903.6" y="835.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.6" y="846.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (36 samples, 0.31%)</title><rect x="903.6" y="819.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="906.6" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (36 samples, 0.31%)</title><rect x="903.6" y="803.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="906.6" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (34 samples, 0.29%)</title><rect x="903.6" y="787.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="906.6" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="907.5" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.5" y="862.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="907.5" y="835.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="910.5" y="846.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (3 samples, 0.03%)</title><rect x="907.8" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.8" y="878.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (9 samples, 0.08%)</title><rect x="908.1" y="867.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.1" y="878.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (8 samples, 0.07%)</title><rect x="908.1" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="911.1" y="862.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (5 samples, 0.04%)</title><rect x="908.2" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.2" y="846.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.03%)</title><rect x="908.3" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.3" y="830.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (13 samples, 0.11%)</title><rect x="909.0" y="867.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.0" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (11 samples, 0.10%)</title><rect x="909.0" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.0" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (10 samples, 0.09%)</title><rect x="909.0" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.0" y="846.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (5 samples, 0.04%)</title><rect x="909.5" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.5" y="830.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (54 samples, 0.47%)</title><rect x="910.3" y="867.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="913.3" y="878.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (5 samples, 0.04%)</title><rect x="910.6" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.6" y="862.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (5 samples, 0.04%)</title><rect x="910.6" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.6" y="846.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (4 samples, 0.03%)</title><rect x="910.7" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.7" y="830.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (4 samples, 0.03%)</title><rect x="910.7" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="913.7" y="814.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.03%)</title><rect x="910.7" y="787.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="913.7" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (34 samples, 0.29%)</title><rect x="911.2" y="851.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.2" y="862.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (32 samples, 0.28%)</title><rect x="911.4" y="835.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="914.4" y="846.0"></text>
</g>
<g>
<title>SpinPause (12 samples, 0.10%)</title><rect x="914.6" y="851.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="917.6" y="862.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (15 samples, 0.13%)</title><rect x="915.9" y="867.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.9" y="878.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (14 samples, 0.12%)</title><rect x="915.9" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.9" y="862.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (7 samples, 0.06%)</title><rect x="916.3" y="835.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.3" y="846.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (4 samples, 0.03%)</title><rect x="916.6" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (4 samples, 0.03%)</title><rect x="916.6" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.6" y="814.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (4 samples, 0.03%)</title><rect x="916.6" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.6" y="798.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (3 samples, 0.03%)</title><rect x="916.7" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.7" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.03%)</title><rect x="916.7" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.7" y="766.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="916.7" y="739.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="919.7" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="916.7" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.7" y="734.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (3 samples, 0.03%)</title><rect x="917.0" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.0" y="846.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.04%)</title><rect x="917.4" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.4" y="878.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (4 samples, 0.03%)</title><rect x="917.4" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.4" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.03%)</title><rect x="917.4" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.4" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.03%)</title><rect x="917.4" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.4" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 0.03%)</title><rect x="917.4" y="803.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="920.4" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.03%)</title><rect x="917.4" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.4" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="917.4" y="771.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="920.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (2,540 samples, 21.99%)</title><rect x="917.9" y="883.0" width="259.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="920.9" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,540 samples, 21.99%)</title><rect x="917.9" y="867.0" width="259.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.9" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,519 samples, 21.80%)</title><rect x="917.9" y="851.0" width="257.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.9" y="862.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,493 samples, 21.58%)</title><rect x="918.0" y="835.0" width="254.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.0" y="846.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (2,436 samples, 21.09%)</title><rect x="918.0" y="819.0" width="248.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.0" y="830.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Arena::~Arena() (5 samples, 0.04%)</title><rect x="918.0" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.0" y="814.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (5 samples, 0.04%)</title><rect x="918.0" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.0" y="798.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (5 samples, 0.04%)</title><rect x="918.0" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.0" y="782.0"></text>
</g>
<g>
<title>free_large (5 samples, 0.04%)</title><rect x="918.0" y="755.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="921.0" y="766.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (4 samples, 0.03%)</title><rect x="918.1" y="739.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="921.1" y="750.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (4 samples, 0.03%)</title><rect x="918.1" y="723.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="921.1" y="734.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (2,427 samples, 21.01%)</title><rect x="918.5" y="803.0" width="247.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.5" y="814.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (6 samples, 0.05%)</title><rect x="918.5" y="787.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.5" y="798.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (6 samples, 0.05%)</title><rect x="918.5" y="771.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.5" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (6 samples, 0.05%)</title><rect x="918.5" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (5 samples, 0.04%)</title><rect x="918.6" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (5 samples, 0.04%)</title><rect x="918.6" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.6" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (5 samples, 0.04%)</title><rect x="918.6" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.6" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.03%)</title><rect x="918.7" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.7" y="702.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (530 samples, 4.59%)</title><rect x="919.1" y="787.0" width="54.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.1" y="798.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (17 samples, 0.15%)</title><rect x="919.1" y="771.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.1" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (13 samples, 0.11%)</title><rect x="919.1" y="755.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.1" y="766.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.03%)</title><rect x="920.2" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="923.2" y="750.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.03%)</title><rect x="920.5" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="923.5" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (18 samples, 0.16%)</title><rect x="920.9" y="771.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="923.9" y="782.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (5 samples, 0.04%)</title><rect x="921.1" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.1" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (4 samples, 0.03%)</title><rect x="921.2" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.2" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (4 samples, 0.03%)</title><rect x="921.2" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.2" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.03%)</title><rect x="921.3" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.3" y="718.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (3 samples, 0.03%)</title><rect x="921.3" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.3" y="702.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (7 samples, 0.06%)</title><rect x="921.6" y="755.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="924.6" y="766.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (5 samples, 0.04%)</title><rect x="921.8" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.8" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.04%)</title><rect x="921.8" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.8" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.03%)</title><rect x="921.8" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.8" y="718.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (3 samples, 0.03%)</title><rect x="922.3" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.3" y="766.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.03%)</title><rect x="922.3" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="925.3" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.03%)</title><rect x="922.3" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="925.3" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (38 samples, 0.33%)</title><rect x="922.7" y="771.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.7" y="782.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (6 samples, 0.05%)</title><rect x="922.9" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.9" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (30 samples, 0.26%)</title><rect x="923.5" y="755.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (15 samples, 0.13%)</title><rect x="924.1" y="739.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.1" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.03%)</title><rect x="925.9" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="928.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (35 samples, 0.30%)</title><rect x="926.8" y="771.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (35 samples, 0.30%)</title><rect x="926.8" y="755.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="929.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (5 samples, 0.04%)</title><rect x="927.1" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (22 samples, 0.19%)</title><rect x="927.6" y="739.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.6" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (9 samples, 0.08%)</title><rect x="927.9" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (5 samples, 0.04%)</title><rect x="928.8" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.03%)</title><rect x="929.3" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (5 samples, 0.04%)</title><rect x="929.9" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (417 samples, 3.61%)</title><rect x="930.6" y="771.0" width="42.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.6" y="782.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (13 samples, 0.11%)</title><rect x="931.6" y="755.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (24 samples, 0.21%)</title><rect x="932.9" y="755.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.04%)</title><rect x="933.1" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="936.1" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (14 samples, 0.12%)</title><rect x="933.7" y="739.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.7" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.03%)</title><rect x="933.9" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.03%)</title><rect x="934.3" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.3" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.04%)</title><rect x="934.7" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (19 samples, 0.16%)</title><rect x="935.4" y="755.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.4" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (13 samples, 0.11%)</title><rect x="936.0" y="739.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.0" y="750.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="936.1" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.1" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.03%)</title><rect x="936.4" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.03%)</title><rect x="936.7" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (52 samples, 0.45%)</title><rect x="937.3" y="755.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.3" y="766.0"></text>
</g>
<g>
<title>Block::end_idx() const (3 samples, 0.03%)</title><rect x="940.5" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="943.5" y="750.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.04%)</title><rect x="941.2" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (5 samples, 0.04%)</title><rect x="941.9" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (69 samples, 0.60%)</title><rect x="942.6" y="755.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="945.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.03%)</title><rect x="945.5" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (24 samples, 0.21%)</title><rect x="946.3" y="739.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="949.3" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (8 samples, 0.07%)</title><rect x="946.6" y="723.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="949.6" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.05%)</title><rect x="947.4" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.4" y="734.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.04%)</title><rect x="948.2" y="723.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.2" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.04%)</title><rect x="948.9" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.03%)</title><rect x="949.7" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (43 samples, 0.37%)</title><rect x="950.4" y="755.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.4" y="766.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.03%)</title><rect x="953.2" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.2" y="750.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.03%)</title><rect x="953.7" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.7" y="750.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.03%)</title><rect x="954.1" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.03%)</title><rect x="954.8" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (28 samples, 0.24%)</title><rect x="955.1" y="755.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (14 samples, 0.12%)</title><rect x="956.0" y="739.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.0" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (50 samples, 0.43%)</title><rect x="958.0" y="755.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.0" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (48 samples, 0.42%)</title><rect x="958.2" y="739.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.2" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (5 samples, 0.04%)</title><rect x="958.5" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.5" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (41 samples, 0.35%)</title><rect x="959.0" y="723.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.0" y="734.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (12 samples, 0.10%)</title><rect x="959.0" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.0" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="959.5" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.5" y="702.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.03%)</title><rect x="959.9" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.9" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (23 samples, 0.20%)</title><rect x="960.3" y="707.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.3" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (19 samples, 0.16%)</title><rect x="960.4" y="691.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.03%)</title><rect x="962.6" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (19 samples, 0.16%)</title><rect x="963.2" y="755.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (19 samples, 0.16%)</title><rect x="963.2" y="739.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.2" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.06%)</title><rect x="964.2" y="723.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (13 samples, 0.11%)</title><rect x="965.1" y="755.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.1" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="965.2" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.2" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="965.9" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.9" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (11 samples, 0.10%)</title><rect x="966.4" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.4" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (10 samples, 0.09%)</title><rect x="966.4" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.4" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (50 samples, 0.43%)</title><rect x="967.5" y="755.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="970.5" y="766.0"></text>
</g>
<g>
<title>IndexSet::clear() (3 samples, 0.03%)</title><rect x="969.0" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.0" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (6 samples, 0.05%)</title><rect x="969.3" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.3" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (24 samples, 0.21%)</title><rect x="970.2" y="739.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.2" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (7 samples, 0.06%)</title><rect x="970.7" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="973.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.06%)</title><rect x="971.5" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.5" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="972.2" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.2" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (1,812 samples, 15.68%)</title><rect x="973.4" y="787.0" width="185.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.4" y="798.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (9 samples, 0.08%)</title><rect x="973.7" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (9 samples, 0.08%)</title><rect x="973.7" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (3 samples, 0.03%)</title><rect x="973.8" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.03%)</title><rect x="974.1" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="974.2" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.2" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.05%)</title><rect x="974.6" y="771.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.6" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (4 samples, 0.03%)</title><rect x="975.2" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.2" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (4 samples, 0.03%)</title><rect x="975.2" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1,721 samples, 14.90%)</title><rect x="975.6" y="771.0" width="175.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.6" y="782.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.03%)</title><rect x="976.0" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.0" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="976.4" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="976.4" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (33 samples, 0.29%)</title><rect x="977.0" y="755.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.0" y="766.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (5 samples, 0.04%)</title><rect x="978.7" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.7" y="750.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (4 samples, 0.03%)</title><rect x="979.3" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.3" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="980.0" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.0" y="750.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="980.0" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.0" y="734.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="980.0" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (26 samples, 0.23%)</title><rect x="980.4" y="755.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.03%)</title><rect x="981.4" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.03%)</title><rect x="981.5" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (7 samples, 0.06%)</title><rect x="981.8" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.8" y="750.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (3 samples, 0.03%)</title><rect x="982.8" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1,576 samples, 13.64%)</title><rect x="983.1" y="755.0" width="160.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.1" y="766.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node_List::push(Node*) (3 samples, 0.03%)</title><rect x="984.9" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.9" y="750.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (3 samples, 0.03%)</title><rect x="984.9" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.9" y="734.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="984.9" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1,553 samples, 13.44%)</title><rect x="985.2" y="739.0" width="158.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.2" y="750.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1,534 samples, 13.28%)</title><rect x="985.8" y="723.0" width="156.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.8" y="734.0">PhaseIdealLoop::get_..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (14 samples, 0.12%)</title><rect x="993.5" y="707.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.5" y="718.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (11 samples, 0.10%)</title><rect x="993.5" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="996.5" y="702.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (5 samples, 0.04%)</title><rect x="993.5" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.5" y="686.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="994.0" y="675.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="997.0" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="994.6" y="691.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="997.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.04%)</title><rect x="994.9" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.04%)</title><rect x="994.9" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.04%)</title><rect x="994.9" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.03%)</title><rect x="995.1" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (34 samples, 0.29%)</title><rect x="995.4" y="707.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (15 samples, 0.13%)</title><rect x="998.9" y="707.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (12 samples, 0.10%)</title><rect x="999.1" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.06%)</title><rect x="999.6" y="675.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (14 samples, 0.12%)</title><rect x="1000.4" y="707.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1,377 samples, 11.92%)</title><rect x="1001.9" y="707.0" width="140.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.9" y="718.0">PhaseIdealLoop::is..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (202 samples, 1.75%)</title><rect x="1019.2" y="691.0" width="20.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1,005 samples, 8.70%)</title><rect x="1039.9" y="691.0" width="102.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.9" y="702.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (6 samples, 0.05%)</title><rect x="1142.5" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (5 samples, 0.04%)</title><rect x="1143.1" y="723.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (10 samples, 0.09%)</title><rect x="1144.0" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::init_dom_lca_tags() (4 samples, 0.03%)</title><rect x="1145.1" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.1" y="766.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (4 samples, 0.03%)</title><rect x="1145.1" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1145.2" y="723.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (28 samples, 0.24%)</title><rect x="1145.5" y="755.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (4 samples, 0.03%)</title><rect x="1146.5" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (14 samples, 0.12%)</title><rect x="1146.9" y="739.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (7 samples, 0.06%)</title><rect x="1147.2" y="723.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (5 samples, 0.04%)</title><rect x="1147.3" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (5 samples, 0.04%)</title><rect x="1147.3" y="691.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.03%)</title><rect x="1147.9" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 0.16%)</title><rect x="1148.3" y="755.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.3" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 0.16%)</title><rect x="1148.3" y="739.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.3" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.03%)</title><rect x="1149.7" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.05%)</title><rect x="1150.5" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="766.0"></text>
</g>
<g>
<title>Chunk::next_chop() (6 samples, 0.05%)</title><rect x="1150.5" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="750.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (6 samples, 0.05%)</title><rect x="1150.5" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>free_large (6 samples, 0.05%)</title><rect x="1150.5" y="707.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1153.5" y="718.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (6 samples, 0.05%)</title><rect x="1150.5" y="691.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (6 samples, 0.05%)</title><rect x="1150.5" y="675.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (55 samples, 0.48%)</title><rect x="1151.4" y="771.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (52 samples, 0.45%)</title><rect x="1151.6" y="755.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.6" y="766.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (4 samples, 0.03%)</title><rect x="1151.9" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1152.4" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (4 samples, 0.03%)</title><rect x="1152.9" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.9" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.03%)</title><rect x="1153.6" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (3 samples, 0.03%)</title><rect x="1154.0" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.03%)</title><rect x="1154.4" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.03%)</title><rect x="1154.5" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.5" y="734.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (8 samples, 0.07%)</title><rect x="1154.8" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.8" y="750.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (8 samples, 0.07%)</title><rect x="1154.8" y="723.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="734.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (3 samples, 0.03%)</title><rect x="1155.2" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (7 samples, 0.06%)</title><rect x="1155.7" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.7" y="750.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (4 samples, 0.03%)</title><rect x="1156.0" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1156.5" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.03%)</title><rect x="1156.5" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.5" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.03%)</title><rect x="1156.5" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.03%)</title><rect x="1157.0" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.0" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.03%)</title><rect x="1157.0" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.0" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (7 samples, 0.06%)</title><rect x="1157.3" y="771.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.03%)</title><rect x="1157.3" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.03%)</title><rect x="1157.3" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (3 samples, 0.03%)</title><rect x="1157.7" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1158.1" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1158.1" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1158.1" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (63 samples, 0.55%)</title><rect x="1158.6" y="787.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (63 samples, 0.55%)</title><rect x="1158.6" y="771.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (60 samples, 0.52%)</title><rect x="1158.7" y="755.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (59 samples, 0.51%)</title><rect x="1158.7" y="739.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (59 samples, 0.51%)</title><rect x="1158.7" y="723.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (52 samples, 0.45%)</title><rect x="1159.1" y="707.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.1" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.03%)</title><rect x="1159.1" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.1" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.03%)</title><rect x="1159.1" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.1" y="686.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 0.03%)</title><rect x="1159.1" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.03%)</title><rect x="1159.1" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (35 samples, 0.30%)</title><rect x="1159.6" y="691.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (35 samples, 0.30%)</title><rect x="1159.6" y="675.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (33 samples, 0.29%)</title><rect x="1159.6" y="659.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (33 samples, 0.29%)</title><rect x="1159.6" y="643.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (33 samples, 0.29%)</title><rect x="1159.6" y="627.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (32 samples, 0.28%)</title><rect x="1159.6" y="611.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (26 samples, 0.23%)</title><rect x="1159.6" y="595.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (26 samples, 0.23%)</title><rect x="1159.6" y="579.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (26 samples, 0.23%)</title><rect x="1159.6" y="563.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.22%)</title><rect x="1159.7" y="547.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (25 samples, 0.22%)</title><rect x="1159.7" y="531.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (22 samples, 0.19%)</title><rect x="1159.7" y="515.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.14%)</title><rect x="1159.9" y="499.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.14%)</title><rect x="1159.9" y="483.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.13%)</title><rect x="1160.0" y="467.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.13%)</title><rect x="1160.0" y="451.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 0.13%)</title><rect x="1160.0" y="435.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.12%)</title><rect x="1160.0" y="419.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.11%)</title><rect x="1160.0" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.11%)</title><rect x="1160.0" y="387.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.11%)</title><rect x="1160.0" y="371.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.11%)</title><rect x="1160.0" y="355.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.11%)</title><rect x="1160.0" y="339.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1160.1" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.08%)</title><rect x="1160.1" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.08%)</title><rect x="1160.1" y="291.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.07%)</title><rect x="1160.2" y="275.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.07%)</title><rect x="1160.2" y="259.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.07%)</title><rect x="1160.2" y="243.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.06%)</title><rect x="1160.2" y="227.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1161.5" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1161.5" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1161.5" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1161.5" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1161.5" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1161.5" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1161.5" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1161.5" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1161.5" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1161.5" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1161.5" y="339.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1161.5" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1161.5" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1161.5" y="291.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1161.5" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1161.5" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1161.5" y="243.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1161.5" y="227.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1161.5" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1162.2" y="595.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1162.2" y="579.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1162.2" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.05%)</title><rect x="1162.2" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.05%)</title><rect x="1162.2" y="531.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.05%)</title><rect x="1162.2" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.05%)</title><rect x="1162.2" y="499.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1162.2" y="483.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1162.2" y="467.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1162.3" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1162.3" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.04%)</title><rect x="1162.3" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1162.3" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.09%)</title><rect x="1163.1" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.09%)</title><rect x="1163.1" y="675.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.09%)</title><rect x="1163.1" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.09%)</title><rect x="1163.1" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.09%)</title><rect x="1163.1" y="627.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.09%)</title><rect x="1163.1" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1163.1" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.08%)</title><rect x="1163.1" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.08%)</title><rect x="1163.1" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.08%)</title><rect x="1163.1" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.08%)</title><rect x="1163.1" y="531.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.08%)</title><rect x="1163.1" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.06%)</title><rect x="1163.1" y="499.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1163.1" y="483.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1163.1" y="467.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.05%)</title><rect x="1163.1" y="451.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.05%)</title><rect x="1163.1" y="435.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.05%)</title><rect x="1163.1" y="419.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.04%)</title><rect x="1163.1" y="403.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.1" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1163.1" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1163.1" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1163.1" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1163.1" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1163.1" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.1" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1163.1" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1163.1" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1163.1" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1163.1" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1163.1" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.1" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1163.1" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1163.1" y="163.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1163.1" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1163.1" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1163.1" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.1" y="99.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1163.1" y="83.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1163.1" y="67.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1163.1" y="51.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1163.1" y="35.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (7 samples, 0.06%)</title><rect x="1165.1" y="787.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.1" y="798.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.03%)</title><rect x="1165.3" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1166.0" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.0" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (48 samples, 0.42%)</title><rect x="1167.0" y="819.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (48 samples, 0.42%)</title><rect x="1167.0" y="803.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (48 samples, 0.42%)</title><rect x="1167.0" y="787.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (45 samples, 0.39%)</title><rect x="1167.0" y="771.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (15 samples, 0.13%)</title><rect x="1167.0" y="755.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (13 samples, 0.11%)</title><rect x="1167.1" y="739.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.1" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (13 samples, 0.11%)</title><rect x="1167.1" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (13 samples, 0.11%)</title><rect x="1167.1" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (10 samples, 0.09%)</title><rect x="1167.3" y="691.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.3" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (10 samples, 0.09%)</title><rect x="1167.3" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.06%)</title><rect x="1167.6" y="659.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (7 samples, 0.06%)</title><rect x="1167.6" y="643.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (7 samples, 0.06%)</title><rect x="1167.6" y="627.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.05%)</title><rect x="1167.6" y="611.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.6" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.05%)</title><rect x="1167.6" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.6" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.05%)</title><rect x="1167.6" y="579.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.04%)</title><rect x="1167.6" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.03%)</title><rect x="1167.7" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (10 samples, 0.09%)</title><rect x="1168.6" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (8 samples, 0.07%)</title><rect x="1168.8" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (7 samples, 0.06%)</title><rect x="1168.8" y="723.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.8" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (20 samples, 0.17%)</title><rect x="1169.6" y="755.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="766.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (6 samples, 0.05%)</title><rect x="1169.6" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="750.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (6 samples, 0.05%)</title><rect x="1169.6" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="734.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (6 samples, 0.05%)</title><rect x="1169.6" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (14 samples, 0.12%)</title><rect x="1170.2" y="739.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (5 samples, 0.04%)</title><rect x="1170.2" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="734.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (4 samples, 0.03%)</title><rect x="1170.2" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.2" y="718.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (4 samples, 0.03%)</title><rect x="1170.2" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (3 samples, 0.03%)</title><rect x="1170.7" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (3 samples, 0.03%)</title><rect x="1170.7" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="718.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (4 samples, 0.03%)</title><rect x="1171.0" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="734.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 0.03%)</title><rect x="1171.6" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1171.6" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.6" y="766.0"></text>
</g>
<g>
<title>CompileQueue::get() (23 samples, 0.20%)</title><rect x="1172.6" y="835.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (20 samples, 0.17%)</title><rect x="1172.6" y="819.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (20 samples, 0.17%)</title><rect x="1172.6" y="803.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (19 samples, 0.16%)</title><rect x="1172.7" y="787.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.16%)</title><rect x="1172.7" y="771.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1175.7" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.03%)</title><rect x="1174.7" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.03%)</title><rect x="1174.7" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (3 samples, 0.03%)</title><rect x="1174.7" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (21 samples, 0.18%)</title><rect x="1175.2" y="851.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="862.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (12 samples, 0.10%)</title><rect x="1175.2" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (12 samples, 0.10%)</title><rect x="1175.2" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (4 samples, 0.03%)</title><rect x="1175.2" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (4 samples, 0.03%)</title><rect x="1175.2" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.03%)</title><rect x="1175.3" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (3 samples, 0.03%)</title><rect x="1175.3" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (8 samples, 0.07%)</title><rect x="1175.6" y="803.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>Method::jmethod_id() (3 samples, 0.03%)</title><rect x="1175.6" y="787.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (4 samples, 0.03%)</title><rect x="1176.0" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (3 samples, 0.03%)</title><rect x="1176.0" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.07%)</title><rect x="1176.4" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.07%)</title><rect x="1176.4" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (8 samples, 0.07%)</title><rect x="1176.4" y="803.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (8 samples, 0.07%)</title><rect x="1176.4" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.07%)</title><rect x="1176.4" y="771.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (42 samples, 0.36%)</title><rect x="1177.3" y="883.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (42 samples, 0.36%)</title><rect x="1177.3" y="867.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1177.4" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1177.4" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.03%)</title><rect x="1177.4" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1177.4" y="803.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (36 samples, 0.31%)</title><rect x="1177.9" y="851.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (36 samples, 0.31%)</title><rect x="1177.9" y="835.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (36 samples, 0.31%)</title><rect x="1177.9" y="819.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (36 samples, 0.31%)</title><rect x="1177.9" y="803.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (36 samples, 0.31%)</title><rect x="1177.9" y="787.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (35 samples, 0.30%)</title><rect x="1178.0" y="771.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (7 samples, 0.06%)</title><rect x="1178.4" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (6 samples, 0.05%)</title><rect x="1178.5" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.05%)</title><rect x="1178.5" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.05%)</title><rect x="1178.5" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (6 samples, 0.05%)</title><rect x="1178.5" y="691.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (6 samples, 0.05%)</title><rect x="1178.5" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.05%)</title><rect x="1178.5" y="659.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>GCTaskManager::task_idle_workers() (3 samples, 0.03%)</title><rect x="1179.1" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>GCTaskManager::add_list(GCTaskQueue*) (3 samples, 0.03%)</title><rect x="1179.1" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (18 samples, 0.16%)</title><rect x="1179.7" y="755.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (16 samples, 0.14%)</title><rect x="1179.9" y="739.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>WatcherThread::run() (82 samples, 0.71%)</title><rect x="1181.6" y="883.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="894.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (80 samples, 0.69%)</title><rect x="1181.8" y="867.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (79 samples, 0.68%)</title><rect x="1181.8" y="851.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (78 samples, 0.68%)</title><rect x="1181.8" y="835.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (77 samples, 0.67%)</title><rect x="1181.8" y="819.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (73 samples, 0.63%)</title><rect x="1182.0" y="803.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
</g>
</svg>

