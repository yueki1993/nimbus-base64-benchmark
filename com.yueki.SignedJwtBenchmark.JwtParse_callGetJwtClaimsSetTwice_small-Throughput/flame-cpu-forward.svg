<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (10,355 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[deoptimization] (3 samples, 0.03%)</title><rect x="10.0" y="947.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (3 samples, 0.03%)</title><rect x="10.0" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (3 samples, 0.03%)</title><rect x="10.0" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.03%)</title><rect x="10.3" y="947.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,951 samples, 86.44%)</title><rect x="10.7" y="947.0" width="1020.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,951 samples, 86.44%)</title><rect x="10.7" y="931.0" width="1020.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,951 samples, 86.44%)</title><rect x="10.7" y="915.0" width="1020.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,950 samples, 86.43%)</title><rect x="10.7" y="899.0" width="1019.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="910.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,950 samples, 86.43%)</title><rect x="10.7" y="883.0" width="1019.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.7" y="894.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,950 samples, 86.43%)</title><rect x="10.7" y="867.0" width="1019.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="878.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,950 samples, 86.43%)</title><rect x="10.7" y="851.0" width="1019.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="862.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,950 samples, 86.43%)</title><rect x="10.7" y="835.0" width="1019.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.7" y="846.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,950 samples, 86.43%)</title><rect x="10.7" y="819.0" width="1019.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="830.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,950 samples, 86.43%)</title><rect x="10.7" y="803.0" width="1019.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="814.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,950 samples, 86.43%)</title><rect x="10.7" y="787.0" width="1019.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="798.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,950 samples, 86.43%)</title><rect x="10.7" y="771.0" width="1019.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="782.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_small_Throughput (8,950 samples, 86.43%)</title><rect x="10.7" y="755.0" width="1019.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.7" y="766.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_small_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_small_thrpt_jmhStub (8,580 samples, 82.86%)</title><rect x="10.7" y="739.0" width="977.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="750.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_small_thrpt_..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_small (8,569 samples, 82.75%)</title><rect x="11.9" y="723.0" width="976.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.9" y="734.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_small</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,555 samples, 82.62%)</title><rect x="12.2" y="707.0" width="974.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.2" y="718.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (7,106 samples, 68.62%)</title><rect x="12.5" y="691.0" width="809.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.5" y="702.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (45 samples, 0.43%)</title><rect x="12.5" y="675.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (45 samples, 0.43%)</title><rect x="12.5" y="659.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (45 samples, 0.43%)</title><rect x="12.5" y="643.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (7 samples, 0.07%)</title><rect x="13.6" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="13.6" y="611.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.6" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="13.9" y="595.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="16.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (18 samples, 0.17%)</title><rect x="14.8" y="627.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (7 samples, 0.07%)</title><rect x="16.8" y="627.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="17.0" y="611.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="17.0" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="17.0" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="17.0" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (5 samples, 0.05%)</title><rect x="17.1" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="17.1" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (7,061 samples, 68.19%)</title><rect x="17.6" y="675.0" width="804.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="686.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/CriticalHeaderParamsDeferral.headerPasses (3 samples, 0.03%)</title><rect x="18.5" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.5" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (93 samples, 0.90%)</title><rect x="18.9" y="659.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.9" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (93 samples, 0.90%)</title><rect x="18.9" y="643.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (6 samples, 0.06%)</title><rect x="19.5" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.04%)</title><rect x="19.7" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="19.8" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.8" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getServices (4 samples, 0.04%)</title><rect x="20.1" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.1" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getProviderList (4 samples, 0.04%)</title><rect x="20.1" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getThreadProviderList (4 samples, 0.04%)</title><rect x="20.1" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.1" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (75 samples, 0.72%)</title><rect x="20.6" y="627.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.6" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (68 samples, 0.66%)</title><rect x="21.4" y="611.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.4" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (68 samples, 0.66%)</title><rect x="21.4" y="595.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.4" y="606.0"></text>
</g>
<g>
<title>java/security/Provider.getService (58 samples, 0.56%)</title><rect x="22.4" y="579.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.4" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (31 samples, 0.30%)</title><rect x="23.9" y="563.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.9" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (30 samples, 0.29%)</title><rect x="24.0" y="547.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (30 samples, 0.29%)</title><rect x="24.0" y="531.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (11 samples, 0.11%)</title><rect x="25.6" y="515.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.6" y="526.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (11 samples, 0.11%)</title><rect x="25.6" y="499.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.6" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.03%)</title><rect x="26.5" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.5" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.11%)</title><rect x="27.8" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.10%)</title><rect x="27.8" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.8" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (7 samples, 0.07%)</title><rect x="28.1" y="531.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (299 samples, 2.89%)</title><rect x="29.5" y="659.0" width="34.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.5" y="670.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (298 samples, 2.88%)</title><rect x="29.6" y="643.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.6" y="654.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (142 samples, 1.37%)</title><rect x="43.7" y="627.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.7" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (10 samples, 0.10%)</title><rect x="58.8" y="611.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (29 samples, 0.28%)</title><rect x="59.9" y="627.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.9" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (29 samples, 0.28%)</title><rect x="59.9" y="611.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (20 samples, 0.19%)</title><rect x="60.4" y="595.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (5 samples, 0.05%)</title><rect x="62.6" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="62.8" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="62.8" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.8" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="62.8" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.8" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="62.8" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.8" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (4 samples, 0.04%)</title><rect x="62.8" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.8" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (90 samples, 0.87%)</title><rect x="63.7" y="659.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.7" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (90 samples, 0.87%)</title><rect x="63.7" y="643.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.7" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (90 samples, 0.87%)</title><rect x="63.7" y="627.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.7" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (9 samples, 0.09%)</title><rect x="64.8" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.8" y="622.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (7 samples, 0.07%)</title><rect x="64.9" y="595.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.9" y="606.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (7 samples, 0.07%)</title><rect x="65.8" y="611.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.8" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (7 samples, 0.07%)</title><rect x="65.8" y="595.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.8" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (5 samples, 0.05%)</title><rect x="66.1" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.1" y="590.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (64 samples, 0.62%)</title><rect x="66.6" y="611.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.6" y="622.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (63 samples, 0.61%)</title><rect x="66.7" y="595.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (10 samples, 0.10%)</title><rect x="67.0" y="579.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (9 samples, 0.09%)</title><rect x="67.0" y="563.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (4 samples, 0.04%)</title><rect x="67.0" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (3 samples, 0.03%)</title><rect x="67.1" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.1" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (45 samples, 0.43%)</title><rect x="68.1" y="579.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.1" y="590.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (43 samples, 0.42%)</title><rect x="68.1" y="563.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.1" y="574.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (43 samples, 0.42%)</title><rect x="68.1" y="547.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.1" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (42 samples, 0.41%)</title><rect x="68.2" y="531.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (42 samples, 0.41%)</title><rect x="68.2" y="515.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.2" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (42 samples, 0.41%)</title><rect x="68.2" y="499.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.2" y="510.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (41 samples, 0.40%)</title><rect x="68.3" y="483.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.3" y="494.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (5 samples, 0.05%)</title><rect x="68.3" y="467.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.05%)</title><rect x="68.3" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.3" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (36 samples, 0.35%)</title><rect x="68.9" y="467.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.9" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (21 samples, 0.20%)</title><rect x="69.0" y="451.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.0" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (18 samples, 0.17%)</title><rect x="69.3" y="435.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.3" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (6 samples, 0.06%)</title><rect x="69.5" y="419.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (5 samples, 0.05%)</title><rect x="69.5" y="403.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.5" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.05%)</title><rect x="70.2" y="419.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.2" y="430.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.04%)</title><rect x="70.2" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.2" y="414.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (3 samples, 0.03%)</title><rect x="70.3" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="71.0" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="71.0" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.0" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (14 samples, 0.14%)</title><rect x="71.4" y="451.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.4" y="462.0"></text>
</g>
<g>
<title>java/security/Provider.getService (11 samples, 0.11%)</title><rect x="71.4" y="435.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.4" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="72.7" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.7" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (4 samples, 0.04%)</title><rect x="73.2" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.2" y="590.0"></text>
</g>
<g>
<title>java/security/Signature.update (154 samples, 1.49%)</title><rect x="73.9" y="659.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.9" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.update (145 samples, 1.40%)</title><rect x="74.3" y="643.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.3" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (138 samples, 1.33%)</title><rect x="75.1" y="627.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.1" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (135 samples, 1.30%)</title><rect x="75.4" y="611.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.4" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (132 samples, 1.27%)</title><rect x="75.8" y="595.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (126 samples, 1.22%)</title><rect x="76.4" y="579.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.4" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (125 samples, 1.21%)</title><rect x="76.5" y="563.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.5" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (124 samples, 1.20%)</title><rect x="76.7" y="547.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.7" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (120 samples, 1.16%)</title><rect x="77.1" y="531.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.1" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (11 samples, 0.11%)</title><rect x="88.2" y="515.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.2" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (12 samples, 0.12%)</title><rect x="89.4" y="515.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.4" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="91.0" y="643.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="94.0" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.verify (6,412 samples, 61.92%)</title><rect x="91.5" y="659.0" width="730.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.5" y="670.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (6,409 samples, 61.89%)</title><rect x="91.8" y="643.0" width="730.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.8" y="654.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (6,408 samples, 61.88%)</title><rect x="91.9" y="627.0" width="730.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.9" y="638.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (6 samples, 0.06%)</title><rect x="92.5" y="611.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.5" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (6 samples, 0.06%)</title><rect x="92.5" y="595.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.5" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.bitLength (3 samples, 0.03%)</title><rect x="92.8" y="579.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.8" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (5,642 samples, 54.49%)</title><rect x="93.2" y="611.0" width="642.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.2" y="622.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (5,629 samples, 54.36%)</title><rect x="93.2" y="595.0" width="641.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.2" y="606.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (5,576 samples, 53.85%)</title><rect x="94.0" y="579.0" width="635.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.0" y="590.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.equals (11 samples, 0.11%)</title><rect x="94.2" y="563.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.2" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3 samples, 0.03%)</title><rect x="95.1" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (5,563 samples, 53.72%)</title><rect x="95.5" y="563.0" width="633.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.5" y="574.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (299 samples, 2.89%)</title><rect x="99.7" y="547.0" width="34.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="102.7" y="558.0">Sh..</text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (288 samples, 2.78%)</title><rect x="100.9" y="531.0" width="32.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="103.9" y="542.0">mo..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (321 samples, 3.10%)</title><rect x="133.8" y="547.0" width="36.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="136.8" y="558.0">Sha..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (310 samples, 2.99%)</title><rect x="135.0" y="531.0" width="35.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="138.0" y="542.0">mon..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (3 samples, 0.03%)</title><rect x="170.3" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.3" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroInts (3 samples, 0.03%)</title><rect x="170.3" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (40 samples, 0.39%)</title><rect x="170.7" y="547.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.7" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="173.6" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.6" y="542.0"></text>
</g>
<g>
<title>mulAdd (10 samples, 0.10%)</title><rect x="174.1" y="531.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="177.1" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (10 samples, 0.10%)</title><rect x="175.2" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="178.2" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.intArrayCmpToLen (7 samples, 0.07%)</title><rect x="175.6" y="531.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.6" y="542.0"></text>
</g>
<g>
<title>mulAdd (5 samples, 0.05%)</title><rect x="175.8" y="515.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="178.8" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="176.4" y="547.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.4" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="176.4" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.4" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (10 samples, 0.10%)</title><rect x="176.8" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.8" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (9 samples, 0.09%)</title><rect x="176.9" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.9" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (703 samples, 6.79%)</title><rect x="178.1" y="547.0" width="80.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.1" y="558.0">java/math..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (700 samples, 6.76%)</title><rect x="178.1" y="531.0" width="79.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.1" y="542.0">java/math..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (700 samples, 6.76%)</title><rect x="178.1" y="515.0" width="79.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.1" y="526.0">java/math..</text>
</g>
<g>
<title>java/math/MutableBigInteger.clear (3 samples, 0.03%)</title><rect x="178.7" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.7" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (685 samples, 6.62%)</title><rect x="179.0" y="499.0" width="78.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.0" y="510.0">java/math..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (23 samples, 0.22%)</title><rect x="187.2" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.2" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (579 samples, 5.59%)</title><rect x="189.8" y="483.0" width="66.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.8" y="494.0">java/ma..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (6 samples, 0.06%)</title><rect x="255.8" y="483.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.8" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="256.6" y="483.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.6" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (7 samples, 0.07%)</title><rect x="257.1" y="499.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.1" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (3 samples, 0.03%)</title><rect x="257.9" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (3 samples, 0.03%)</title><rect x="257.9" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.9" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (3,894 samples, 37.61%)</title><rect x="258.2" y="547.0" width="443.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.2" y="558.0">java/math/MutableBigInteger.normalize</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (3,890 samples, 37.57%)</title><rect x="258.5" y="531.0" width="443.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="261.5" y="542.0">SharedRuntime::montgomery_square(int*, int*, int, long, int*)</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3,798 samples, 36.68%)</title><rect x="269.0" y="515.0" width="432.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="272.0" y="526.0">montgomery_square(unsigned long*, unsigned long*, unsigned ..</text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (5 samples, 0.05%)</title><rect x="701.9" y="547.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.12%)</title><rect x="702.5" y="547.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.5" y="558.0"></text>
</g>
<g>
<title>mulAdd (10 samples, 0.10%)</title><rect x="702.7" y="531.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="705.7" y="542.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (22 samples, 0.21%)</title><rect x="703.9" y="547.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="706.9" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="706.4" y="547.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="709.4" y="558.0"></text>
</g>
<g>
<title>mulAdd (197 samples, 1.90%)</title><rect x="706.9" y="547.0" width="22.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="709.9" y="558.0">m..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (28 samples, 0.27%)</title><rect x="729.5" y="579.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="732.5" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (22 samples, 0.21%)</title><rect x="730.1" y="563.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.1" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (18 samples, 0.17%)</title><rect x="730.5" y="547.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="733.5" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="732.2" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.2" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (17 samples, 0.16%)</title><rect x="732.7" y="579.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="735.7" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (14 samples, 0.14%)</title><rect x="733.0" y="563.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.0" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (4 samples, 0.04%)</title><rect x="734.2" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.2" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.getPublicExponent (13 samples, 0.13%)</title><rect x="734.6" y="595.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.6" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (598 samples, 5.77%)</title><rect x="736.1" y="611.0" width="68.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.1" y="622.0">sun/sec..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (598 samples, 5.77%)</title><rect x="736.1" y="595.0" width="68.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="739.1" y="606.0">sun/sec..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (593 samples, 5.73%)</title><rect x="736.7" y="579.0" width="67.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.7" y="590.0">javax/c..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (592 samples, 5.72%)</title><rect x="736.8" y="563.0" width="67.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="739.8" y="574.0">java/se..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (592 samples, 5.72%)</title><rect x="736.8" y="547.0" width="67.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.8" y="558.0">java/la..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (591 samples, 5.71%)</title><rect x="736.9" y="531.0" width="67.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.9" y="542.0">java/la..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (591 samples, 5.71%)</title><rect x="736.9" y="515.0" width="67.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.9" y="526.0">java/la..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (590 samples, 5.70%)</title><rect x="737.0" y="499.0" width="67.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.0" y="510.0">java/la..</text>
</g>
<g>
<title>JVM_FillInStackTrace (6 samples, 0.06%)</title><rect x="737.9" y="483.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="740.9" y="494.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (571 samples, 5.51%)</title><rect x="738.6" y="483.0" width="65.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="741.6" y="494.0">Java_ja..</text>
</g>
<g>
<title>JVM_FillInStackTrace (561 samples, 5.42%)</title><rect x="739.0" y="467.0" width="63.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="742.0" y="478.0">JVM_Fil..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="739.3" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="742.3" y="462.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.03%)</title><rect x="739.7" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.7" y="462.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (7 samples, 0.07%)</title><rect x="740.0" y="451.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.0" y="462.0"></text>
</g>
<g>
<title>PreserveExceptionMark::~PreserveExceptionMark() (3 samples, 0.03%)</title><rect x="740.8" y="451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="743.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.05%)</title><rect x="741.2" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="744.2" y="462.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (4 samples, 0.04%)</title><rect x="741.8" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.8" y="462.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (532 samples, 5.14%)</title><rect x="742.3" y="451.0" width="60.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.3" y="462.0">java_l..</text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (3 samples, 0.03%)</title><rect x="742.8" y="435.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="745.8" y="446.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="743.4" y="435.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.4" y="446.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (9 samples, 0.09%)</title><rect x="743.9" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="746.9" y="446.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (6 samples, 0.06%)</title><rect x="745.1" y="435.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.1" y="446.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.05%)</title><rect x="746.0" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.0" y="446.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (482 samples, 4.65%)</title><rect x="746.9" y="435.0" width="55.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.9" y="446.0">java_..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (54 samples, 0.52%)</title><rect x="760.2" y="419.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.2" y="430.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (43 samples, 0.42%)</title><rect x="760.4" y="403.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="763.4" y="414.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="761.1" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (10 samples, 0.10%)</title><rect x="761.4" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="764.4" y="398.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (7 samples, 0.07%)</title><rect x="762.6" y="387.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.6" y="398.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (5 samples, 0.05%)</title><rect x="762.8" y="371.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.8" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.10%)</title><rect x="763.4" y="387.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.4" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (6 samples, 0.06%)</title><rect x="763.8" y="371.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="766.8" y="382.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (3 samples, 0.03%)</title><rect x="764.5" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.5" y="398.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.03%)</title><rect x="765.5" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="768.5" y="414.0"></text>
</g>
<g>
<title>objArrayOopDesc::obj_at_put(int, oopDesc*) (4 samples, 0.04%)</title><rect x="765.9" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="768.9" y="414.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (103 samples, 0.99%)</title><rect x="766.3" y="419.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.3" y="430.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (3 samples, 0.03%)</title><rect x="777.7" y="403.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="780.7" y="414.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (8 samples, 0.08%)</title><rect x="778.2" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="781.2" y="430.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (3 samples, 0.03%)</title><rect x="779.1" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="782.1" y="430.0"></text>
</g>
<g>
<title>JDK_Version::current() (3 samples, 0.03%)</title><rect x="779.4" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="782.4" y="430.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (33 samples, 0.32%)</title><rect x="779.8" y="419.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="782.8" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (20 samples, 0.19%)</title><rect x="779.9" y="403.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.9" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (15 samples, 0.14%)</title><rect x="779.9" y="387.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="782.9" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (15 samples, 0.14%)</title><rect x="779.9" y="371.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.9" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.04%)</title><rect x="781.6" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="784.6" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (6 samples, 0.06%)</title><rect x="782.2" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="785.2" y="414.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (3 samples, 0.03%)</title><rect x="782.8" y="403.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="785.8" y="414.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="783.2" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.2" y="414.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (9 samples, 0.09%)</title><rect x="783.5" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.5" y="430.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (25 samples, 0.24%)</title><rect x="784.5" y="419.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.5" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.06%)</title><rect x="787.5" y="419.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.5" y="430.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (4 samples, 0.04%)</title><rect x="788.4" y="419.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.4" y="430.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (86 samples, 0.83%)</title><rect x="788.9" y="419.0" width="9.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.9" y="430.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (40 samples, 0.39%)</title><rect x="789.7" y="403.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="792.7" y="414.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (6 samples, 0.06%)</title><rect x="790.5" y="387.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="793.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (27 samples, 0.26%)</title><rect x="791.2" y="387.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (23 samples, 0.22%)</title><rect x="791.2" y="371.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.2" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (23 samples, 0.22%)</title><rect x="791.2" y="355.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="794.2" y="366.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.04%)</title><rect x="793.8" y="371.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="796.8" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (10 samples, 0.10%)</title><rect x="794.2" y="403.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="797.2" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.10%)</title><rect x="794.2" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="797.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.08%)</title><rect x="794.5" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.5" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.08%)</title><rect x="794.5" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="797.5" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (28 samples, 0.27%)</title><rect x="795.4" y="403.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="798.4" y="414.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="796.1" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.1" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (17 samples, 0.16%)</title><rect x="796.4" y="387.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="799.4" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (15 samples, 0.14%)</title><rect x="796.5" y="371.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.5" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (15 samples, 0.14%)</title><rect x="796.5" y="355.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.5" y="366.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*) (4 samples, 0.04%)</title><rect x="798.9" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="801.9" y="430.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (3 samples, 0.03%)</title><rect x="799.6" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.6" y="430.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (3 samples, 0.03%)</title><rect x="799.6" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.6" y="414.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (11 samples, 0.11%)</title><rect x="800.4" y="419.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="803.4" y="430.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.04%)</title><rect x="802.2" y="435.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="805.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.04%)</title><rect x="802.9" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="805.9" y="478.0"></text>
</g>
<g>
<title>jsqrt (5 samples, 0.05%)</title><rect x="803.7" y="483.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="806.7" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (109 samples, 1.05%)</title><rect x="804.3" y="611.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.3" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="804.4" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.4" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.init (3 samples, 0.03%)</title><rect x="804.4" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.4" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (5 samples, 0.05%)</title><rect x="804.8" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.8" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (34 samples, 0.33%)</title><rect x="805.4" y="595.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.4" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (34 samples, 0.33%)</title><rect x="805.4" y="579.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.4" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (23 samples, 0.22%)</title><rect x="806.7" y="563.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.7" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (23 samples, 0.22%)</title><rect x="806.7" y="547.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.7" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="807.1" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.1" y="542.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (14 samples, 0.14%)</title><rect x="807.5" y="531.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.5" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="808.0" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.0" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="808.7" y="515.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="811.7" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (11 samples, 0.11%)</title><rect x="809.3" y="595.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.3" y="606.0"></text>
</g>
<g>
<title>java/io/InputStream.read (3 samples, 0.03%)</title><rect x="810.2" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.2" y="590.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (54 samples, 0.52%)</title><rect x="810.5" y="595.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.5" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.available (5 samples, 0.05%)</title><rect x="810.5" y="579.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.5" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (11 samples, 0.11%)</title><rect x="811.1" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.1" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (11 samples, 0.11%)</title><rect x="811.1" y="563.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.1" y="574.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.skip (4 samples, 0.04%)</title><rect x="811.4" y="547.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.4" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (4 samples, 0.04%)</title><rect x="811.9" y="547.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.clone (3 samples, 0.03%)</title><rect x="812.0" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.0" y="542.0"></text>
</g>
<g>
<title>JVM_Clone (3 samples, 0.03%)</title><rect x="812.0" y="515.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.0" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (36 samples, 0.35%)</title><rect x="812.4" y="579.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.4" y="590.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (35 samples, 0.34%)</title><rect x="812.5" y="563.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.5" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (24 samples, 0.23%)</title><rect x="813.5" y="547.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.5" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (24 samples, 0.23%)</title><rect x="813.5" y="531.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.5" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (48 samples, 0.46%)</title><rect x="816.7" y="611.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="819.7" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (45 samples, 0.43%)</title><rect x="817.0" y="595.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.0" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (40 samples, 0.39%)</title><rect x="817.6" y="579.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.6" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (40 samples, 0.39%)</title><rect x="817.6" y="563.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.6" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (40 samples, 0.39%)</title><rect x="817.6" y="547.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="820.6" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (38 samples, 0.37%)</title><rect x="817.8" y="531.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="820.8" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (5 samples, 0.05%)</title><rect x="818.2" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.2" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (6 samples, 0.06%)</title><rect x="818.8" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.8" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (23 samples, 0.22%)</title><rect x="819.5" y="515.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="822.5" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (3 samples, 0.03%)</title><rect x="821.8" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.05%)</title><rect x="822.3" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.3" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.05%)</title><rect x="822.3" y="675.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.3" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (3 samples, 0.03%)</title><rect x="822.5" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.5" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/BaseJWSProvider.&lt;init&gt; (3 samples, 0.03%)</title><rect x="822.5" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (411 samples, 3.97%)</title><rect x="822.8" y="691.0" width="46.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.8" y="702.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (56 samples, 0.54%)</title><rect x="823.2" y="675.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.2" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.&lt;init&gt; (3 samples, 0.03%)</title><rect x="823.3" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (34 samples, 0.33%)</title><rect x="823.9" y="659.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (32 samples, 0.31%)</title><rect x="824.1" y="643.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/ContentHandlerDumy.endJSON (3 samples, 0.03%)</title><rect x="826.1" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.1" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="826.6" y="627.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="829.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="826.9" y="627.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.15%)</title><rect x="827.7" y="659.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="830.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.14%)</title><rect x="827.7" y="643.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (11 samples, 0.11%)</title><rect x="828.2" y="627.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.2" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (349 samples, 3.37%)</title><rect x="829.7" y="675.0" width="39.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.7" y="686.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (349 samples, 3.37%)</title><rect x="829.7" y="659.0" width="39.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.7" y="670.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (348 samples, 3.36%)</title><rect x="829.8" y="643.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.8" y="654.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (330 samples, 3.19%)</title><rect x="830.4" y="627.0" width="37.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.4" y="638.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (222 samples, 2.14%)</title><rect x="830.6" y="611.0" width="25.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.6" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (162 samples, 1.56%)</title><rect x="830.6" y="595.0" width="18.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="833.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (20 samples, 0.19%)</title><rect x="832.6" y="579.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="835.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (14 samples, 0.14%)</title><rect x="832.6" y="563.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (3 samples, 0.03%)</title><rect x="834.2" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="834.2" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="834.2" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.2" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.build (3 samples, 0.03%)</title><rect x="835.1" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="838.1" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.&lt;init&gt; (3 samples, 0.03%)</title><rect x="835.1" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="838.1" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (103 samples, 0.99%)</title><rect x="835.5" y="579.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="838.5" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (3 samples, 0.03%)</title><rect x="835.9" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.9" y="574.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (96 samples, 0.93%)</title><rect x="836.3" y="563.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.3" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (96 samples, 0.93%)</title><rect x="836.3" y="547.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.3" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (14 samples, 0.14%)</title><rect x="837.4" y="531.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="840.4" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (13 samples, 0.13%)</title><rect x="837.5" y="515.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.08%)</title><rect x="838.1" y="499.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.1" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (4 samples, 0.04%)</title><rect x="839.0" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.0" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (4 samples, 0.04%)</title><rect x="839.0" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.0" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="839.0" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="842.0" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (7 samples, 0.07%)</title><rect x="839.5" y="531.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.5" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.06%)</title><rect x="839.6" y="515.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.6" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="839.9" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="842.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="839.9" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.9" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (35 samples, 0.34%)</title><rect x="840.3" y="531.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.3" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (33 samples, 0.32%)</title><rect x="840.5" y="515.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.5" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (25 samples, 0.24%)</title><rect x="841.2" y="499.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.2" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (20 samples, 0.19%)</title><rect x="841.3" y="483.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="844.3" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (15 samples, 0.14%)</title><rect x="841.4" y="467.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.4" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (7 samples, 0.07%)</title><rect x="841.8" y="451.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="844.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.07%)</title><rect x="841.8" y="435.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.8" y="446.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (5 samples, 0.05%)</title><rect x="842.6" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.6" y="462.0"></text>
</g>
<g>
<title>java/net/URI.match (4 samples, 0.04%)</title><rect x="842.7" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.7" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="843.6" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.6" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (14 samples, 0.14%)</title><rect x="844.3" y="531.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.13%)</title><rect x="844.4" y="515.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.11%)</title><rect x="844.6" y="499.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.6" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (11 samples, 0.11%)</title><rect x="845.9" y="531.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="848.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.10%)</title><rect x="846.0" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="846.7" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="849.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="846.7" y="483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (8 samples, 0.08%)</title><rect x="847.5" y="579.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.07%)</title><rect x="847.6" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.05%)</title><rect x="848.4" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (5 samples, 0.05%)</title><rect x="848.4" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.05%)</title><rect x="848.4" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="851.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (60 samples, 0.58%)</title><rect x="849.0" y="595.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (60 samples, 0.58%)</title><rect x="849.0" y="579.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (7 samples, 0.07%)</title><rect x="849.2" y="563.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (7 samples, 0.07%)</title><rect x="849.2" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.2" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (7 samples, 0.07%)</title><rect x="849.2" y="531.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.2" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (52 samples, 0.50%)</title><rect x="850.0" y="563.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (52 samples, 0.50%)</title><rect x="850.0" y="547.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.0" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (52 samples, 0.50%)</title><rect x="850.0" y="531.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="853.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (38 samples, 0.37%)</title><rect x="851.6" y="515.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (38 samples, 0.37%)</title><rect x="851.6" y="499.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.6" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (25 samples, 0.24%)</title><rect x="851.9" y="483.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (25 samples, 0.24%)</title><rect x="851.9" y="467.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (18 samples, 0.17%)</title><rect x="852.0" y="451.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (3 samples, 0.03%)</title><rect x="852.7" y="435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="855.7" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (9 samples, 0.09%)</title><rect x="853.0" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="856.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="854.4" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="857.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="854.4" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.4" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (3 samples, 0.03%)</title><rect x="854.7" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="857.7" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (3 samples, 0.03%)</title><rect x="854.7" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.06%)</title><rect x="855.2" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="855.3" y="467.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (105 samples, 1.01%)</title><rect x="855.9" y="611.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.9" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (93 samples, 0.90%)</title><rect x="855.9" y="595.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (93 samples, 0.90%)</title><rect x="855.9" y="579.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.9" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (55 samples, 0.53%)</title><rect x="859.1" y="563.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="862.1" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (3 samples, 0.03%)</title><rect x="865.0" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (8 samples, 0.08%)</title><rect x="865.3" y="563.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 0.08%)</title><rect x="865.3" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="865.5" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (3 samples, 0.03%)</title><rect x="865.8" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="868.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.12%)</title><rect x="866.5" y="595.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.08%)</title><rect x="866.5" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (6 samples, 0.06%)</title><rect x="866.5" y="563.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="869.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (3 samples, 0.03%)</title><rect x="866.5" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="869.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (3 samples, 0.03%)</title><rect x="866.8" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="866.8" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="869.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="866.8" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.8" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="866.8" y="499.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.8" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="866.8" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.8" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="867.4" y="579.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="870.4" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (9 samples, 0.09%)</title><rect x="868.0" y="627.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="871.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (5 samples, 0.05%)</title><rect x="868.4" y="611.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="868.4" y="595.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.4" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="868.6" y="579.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="871.6" y="590.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (590 samples, 5.70%)</title><rect x="869.7" y="691.0" width="67.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="872.7" y="702.0">com/yue..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (590 samples, 5.70%)</title><rect x="869.7" y="675.0" width="67.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="872.7" y="686.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (485 samples, 4.68%)</title><rect x="869.7" y="659.0" width="55.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="872.7" y="670.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (268 samples, 2.59%)</title><rect x="870.7" y="643.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="873.7" y="654.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (268 samples, 2.59%)</title><rect x="870.7" y="627.0" width="30.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="873.7" y="638.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (223 samples, 2.15%)</title><rect x="871.2" y="611.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.2" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (223 samples, 2.15%)</title><rect x="871.2" y="595.0" width="25.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.2" y="606.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (113 samples, 1.09%)</title><rect x="879.9" y="579.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.9" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (5 samples, 0.05%)</title><rect x="892.2" y="563.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (31 samples, 0.30%)</title><rect x="892.8" y="579.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="895.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (31 samples, 0.30%)</title><rect x="892.8" y="563.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="895.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (17 samples, 0.16%)</title><rect x="893.5" y="547.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (8 samples, 0.08%)</title><rect x="895.4" y="547.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="895.8" y="531.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="895.8" y="515.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.8" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="895.8" y="499.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.8" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="896.0" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="899.0" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="896.0" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="899.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (41 samples, 0.40%)</title><rect x="896.6" y="611.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="899.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (40 samples, 0.39%)</title><rect x="896.7" y="595.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="899.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (40 samples, 0.39%)</title><rect x="896.7" y="579.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="899.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (14 samples, 0.14%)</title><rect x="897.1" y="563.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="900.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (22 samples, 0.21%)</title><rect x="898.7" y="563.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (22 samples, 0.21%)</title><rect x="898.7" y="547.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="901.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (22 samples, 0.21%)</title><rect x="898.7" y="531.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.7" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (22 samples, 0.21%)</title><rect x="898.7" y="515.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="901.7" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (22 samples, 0.21%)</title><rect x="898.7" y="499.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.03%)</title><rect x="899.1" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.1" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (9 samples, 0.09%)</title><rect x="899.4" y="483.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.4" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (7 samples, 0.07%)</title><rect x="900.4" y="483.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.4" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (208 samples, 2.01%)</title><rect x="901.2" y="643.0" width="23.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="904.2" y="654.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (208 samples, 2.01%)</title><rect x="901.2" y="627.0" width="23.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.2" y="638.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (205 samples, 1.98%)</title><rect x="901.6" y="611.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.6" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (205 samples, 1.98%)</title><rect x="901.6" y="595.0" width="23.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.6" y="606.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (205 samples, 1.98%)</title><rect x="901.6" y="579.0" width="23.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.6" y="590.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (203 samples, 1.96%)</title><rect x="901.7" y="563.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.7" y="574.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (199 samples, 1.92%)</title><rect x="902.2" y="547.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="905.2" y="558.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (144 samples, 1.39%)</title><rect x="903.2" y="531.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="906.2" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (16 samples, 0.15%)</title><rect x="903.9" y="515.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (4 samples, 0.04%)</title><rect x="904.5" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.5" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (4 samples, 0.04%)</title><rect x="905.1" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="905.1" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="905.1" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (122 samples, 1.18%)</title><rect x="905.7" y="515.0" width="13.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.7" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (101 samples, 0.98%)</title><rect x="905.8" y="499.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="908.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (48 samples, 0.46%)</title><rect x="908.6" y="483.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (4 samples, 0.04%)</title><rect x="914.1" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="917.1" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="914.2" y="467.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="917.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (24 samples, 0.23%)</title><rect x="914.6" y="483.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.11%)</title><rect x="916.1" y="467.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="919.1" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="917.0" y="451.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="920.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (11 samples, 0.11%)</title><rect x="917.3" y="499.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.10%)</title><rect x="917.4" y="483.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="918.0" y="467.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.0" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="918.1" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (8 samples, 0.08%)</title><rect x="918.6" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="921.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="918.7" y="483.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.7" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (26 samples, 0.25%)</title><rect x="919.6" y="531.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="922.6" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (3 samples, 0.03%)</title><rect x="919.7" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.7" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (15 samples, 0.14%)</title><rect x="920.0" y="515.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.14%)</title><rect x="920.0" y="499.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.14%)</title><rect x="920.0" y="483.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.0" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.14%)</title><rect x="920.0" y="467.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.0" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="921.1" y="451.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="924.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="921.9" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="921.9" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="924.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (7 samples, 0.07%)</title><rect x="922.5" y="531.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.13%)</title><rect x="923.3" y="531.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="926.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.11%)</title><rect x="923.6" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.03%)</title><rect x="924.0" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="924.4" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (105 samples, 1.01%)</title><rect x="924.9" y="659.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="927.9" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (7 samples, 0.07%)</title><rect x="925.3" y="643.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (7 samples, 0.07%)</title><rect x="925.3" y="627.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.3" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (13 samples, 0.13%)</title><rect x="926.1" y="643.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="929.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (9 samples, 0.09%)</title><rect x="926.5" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="929.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.05%)</title><rect x="927.0" y="611.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (35 samples, 0.34%)</title><rect x="927.6" y="643.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.6" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (35 samples, 0.34%)</title><rect x="927.6" y="627.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.6" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (35 samples, 0.34%)</title><rect x="927.6" y="611.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="930.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (35 samples, 0.34%)</title><rect x="927.6" y="595.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (35 samples, 0.34%)</title><rect x="927.6" y="579.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (16 samples, 0.15%)</title><rect x="927.9" y="563.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.9" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (11 samples, 0.11%)</title><rect x="928.5" y="547.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="931.5" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (5 samples, 0.05%)</title><rect x="929.2" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.size (5 samples, 0.05%)</title><rect x="929.7" y="563.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.7" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (4 samples, 0.04%)</title><rect x="930.4" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.4" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="930.9" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.9" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (3 samples, 0.03%)</title><rect x="931.2" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="934.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (10 samples, 0.10%)</title><rect x="931.6" y="643.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.10%)</title><rect x="931.6" y="627.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="931.6" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.04%)</title><rect x="931.6" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="934.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.06%)</title><rect x="932.0" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (3 samples, 0.03%)</title><rect x="932.7" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="935.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="932.7" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="935.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="932.7" y="611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="935.7" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (23 samples, 0.22%)</title><rect x="933.0" y="643.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="936.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (23 samples, 0.22%)</title><rect x="933.0" y="627.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (22 samples, 0.21%)</title><rect x="933.1" y="611.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="936.1" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (6 samples, 0.06%)</title><rect x="935.0" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (6 samples, 0.06%)</title><rect x="935.7" y="643.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.06%)</title><rect x="935.7" y="627.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="938.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="935.8" y="611.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="936.5" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.5" y="654.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (440 samples, 4.25%)</title><rect x="936.9" y="691.0" width="50.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="939.9" y="702.0">com/y..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (440 samples, 4.25%)</title><rect x="936.9" y="675.0" width="50.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.9" y="686.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (385 samples, 3.72%)</title><rect x="937.0" y="659.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="940.0" y="670.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (250 samples, 2.41%)</title><rect x="937.0" y="643.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="940.0" y="654.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (250 samples, 2.41%)</title><rect x="937.0" y="627.0" width="28.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.0" y="638.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (229 samples, 2.21%)</title><rect x="937.1" y="611.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="940.1" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (229 samples, 2.21%)</title><rect x="937.1" y="595.0" width="26.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="940.1" y="606.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (120 samples, 1.16%)</title><rect x="947.0" y="579.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (6 samples, 0.06%)</title><rect x="960.0" y="563.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="963.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (20 samples, 0.19%)</title><rect x="960.7" y="579.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="963.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (20 samples, 0.19%)</title><rect x="960.7" y="563.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (13 samples, 0.13%)</title><rect x="961.3" y="547.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="964.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.19%)</title><rect x="963.2" y="611.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="966.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (19 samples, 0.18%)</title><rect x="963.3" y="595.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (19 samples, 0.18%)</title><rect x="963.3" y="579.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="966.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (14 samples, 0.14%)</title><rect x="963.6" y="563.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (3 samples, 0.03%)</title><rect x="965.2" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="965.2" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="965.2" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.2" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="965.2" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.2" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="965.2" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="968.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (135 samples, 1.30%)</title><rect x="965.5" y="643.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (135 samples, 1.30%)</title><rect x="965.5" y="627.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (134 samples, 1.29%)</title><rect x="965.6" y="611.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="968.6" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (134 samples, 1.29%)</title><rect x="965.6" y="595.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (133 samples, 1.28%)</title><rect x="965.7" y="579.0" width="15.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (133 samples, 1.28%)</title><rect x="965.7" y="563.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.7" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (133 samples, 1.28%)</title><rect x="965.7" y="547.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (97 samples, 0.94%)</title><rect x="966.1" y="531.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (7 samples, 0.07%)</title><rect x="966.1" y="515.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="969.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (4 samples, 0.04%)</title><rect x="966.4" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="969.4" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="966.4" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="969.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="966.4" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="969.4" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (90 samples, 0.87%)</title><rect x="966.9" y="515.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="969.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (78 samples, 0.75%)</title><rect x="967.0" y="499.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="970.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (30 samples, 0.29%)</title><rect x="969.2" y="483.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (27 samples, 0.26%)</title><rect x="972.8" y="483.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.11%)</title><rect x="974.6" y="467.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="977.6" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="975.9" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="978.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="975.9" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="975.9" y="467.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.9" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="976.0" y="451.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="979.0" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="976.0" y="435.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="979.0" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (5 samples, 0.05%)</title><rect x="976.3" y="499.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="979.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.05%)</title><rect x="976.3" y="483.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="979.3" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (16 samples, 0.15%)</title><rect x="977.1" y="531.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (9 samples, 0.09%)</title><rect x="977.4" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.08%)</title><rect x="977.5" y="499.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.07%)</title><rect x="977.6" y="483.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.6" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="977.8" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.8" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="979.0" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="982.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.12%)</title><rect x="979.5" y="531.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.11%)</title><rect x="979.6" y="515.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="982.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.03%)</title><rect x="979.9" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="982.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.06%)</title><rect x="980.2" y="499.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.2" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="980.6" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.6" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.03%)</title><rect x="980.6" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.6" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="980.6" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.6" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="980.6" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="983.6" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.03%)</title><rect x="980.6" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.6" y="430.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="980.6" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (54 samples, 0.52%)</title><rect x="980.9" y="659.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.9" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (4 samples, 0.04%)</title><rect x="981.2" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.2" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (4 samples, 0.04%)</title><rect x="981.2" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.2" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (8 samples, 0.08%)</title><rect x="981.7" y="643.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="984.7" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (7 samples, 0.07%)</title><rect x="981.8" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.05%)</title><rect x="982.0" y="611.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="985.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="982.0" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (18 samples, 0.17%)</title><rect x="982.6" y="643.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="985.6" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (18 samples, 0.17%)</title><rect x="982.6" y="627.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="985.6" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (18 samples, 0.17%)</title><rect x="982.6" y="611.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="985.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (17 samples, 0.16%)</title><rect x="982.6" y="595.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="985.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (17 samples, 0.16%)</title><rect x="982.6" y="579.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (10 samples, 0.10%)</title><rect x="983.2" y="563.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.2" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (4 samples, 0.04%)</title><rect x="983.9" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (6 samples, 0.06%)</title><rect x="984.7" y="643.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="987.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.05%)</title><rect x="984.8" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="987.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="985.0" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (3 samples, 0.03%)</title><rect x="985.3" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="988.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="985.3" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="985.3" y="611.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="988.3" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (5 samples, 0.05%)</title><rect x="985.7" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.05%)</title><rect x="985.7" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="988.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="985.8" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="988.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (6 samples, 0.06%)</title><rect x="986.2" y="643.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.06%)</title><rect x="986.2" y="627.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="989.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="986.4" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.4" y="622.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (12 samples, 0.12%)</title><rect x="987.0" y="707.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="990.0" y="718.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_small_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (370 samples, 3.57%)</title><rect x="988.4" y="739.0" width="42.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="991.4" y="750.0">com/..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (369 samples, 3.56%)</title><rect x="988.4" y="723.0" width="42.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="991.4" y="734.0">com/..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (279 samples, 2.69%)</title><rect x="988.8" y="707.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="991.8" y="718.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (4 samples, 0.04%)</title><rect x="989.3" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="992.3" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (4 samples, 0.04%)</title><rect x="989.3" y="675.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="992.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.03%)</title><rect x="989.4" y="659.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="992.4" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.03%)</title><rect x="989.4" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="992.4" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.03%)</title><rect x="989.4" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="992.4" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="989.4" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="992.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (227 samples, 2.19%)</title><rect x="989.8" y="691.0" width="25.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.8" y="702.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (226 samples, 2.18%)</title><rect x="989.9" y="675.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.9" y="686.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (3 samples, 0.03%)</title><rect x="989.9" y="659.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.9" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (3 samples, 0.03%)</title><rect x="989.9" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="992.9" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (8 samples, 0.08%)</title><rect x="990.2" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="993.2" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (8 samples, 0.08%)</title><rect x="990.2" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="993.2" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (8 samples, 0.08%)</title><rect x="990.2" y="627.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.2" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (8 samples, 0.08%)</title><rect x="990.2" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="993.2" y="622.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (8 samples, 0.08%)</title><rect x="990.2" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.2" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.06%)</title><rect x="990.5" y="579.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.5" y="590.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.06%)</title><rect x="990.5" y="563.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="993.5" y="574.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (5 samples, 0.05%)</title><rect x="990.5" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.5" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (5 samples, 0.05%)</title><rect x="990.5" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.5" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (5 samples, 0.05%)</title><rect x="990.5" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="993.5" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (5 samples, 0.05%)</title><rect x="990.5" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.5" y="510.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (5 samples, 0.05%)</title><rect x="990.5" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.5" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (5 samples, 0.05%)</title><rect x="990.5" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="993.5" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (4 samples, 0.04%)</title><rect x="990.5" y="451.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.5" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (4 samples, 0.04%)</title><rect x="990.5" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.5" y="446.0"></text>
</g>
<g>
<title>java/security/Signature.sign (210 samples, 2.03%)</title><rect x="991.1" y="659.0" width="24.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.1" y="670.0">j..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (209 samples, 2.02%)</title><rect x="991.3" y="643.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="994.3" y="654.0">j..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (209 samples, 2.02%)</title><rect x="991.3" y="627.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="994.3" y="638.0">s..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (206 samples, 1.99%)</title><rect x="991.3" y="611.0" width="23.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="994.3" y="622.0">s..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (206 samples, 1.99%)</title><rect x="991.3" y="595.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.3" y="606.0">s..</text>
</g>
<g>
<title>java/math/BigInteger.modPow (203 samples, 1.96%)</title><rect x="991.3" y="579.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="994.3" y="590.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (203 samples, 1.96%)</title><rect x="991.3" y="563.0" width="23.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="994.3" y="574.0">j..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (23 samples, 0.22%)</title><rect x="991.7" y="547.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.7" y="558.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (22 samples, 0.21%)</title><rect x="991.8" y="531.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="994.8" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (3 samples, 0.03%)</title><rect x="994.6" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="997.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.subN (3 samples, 0.03%)</title><rect x="994.6" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="997.6" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (3 samples, 0.03%)</title><rect x="994.9" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="997.9" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="994.9" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="997.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (3 samples, 0.03%)</title><rect x="994.9" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="997.9" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="994.9" y="499.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="997.9" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (20 samples, 0.19%)</title><rect x="995.3" y="547.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="998.3" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (20 samples, 0.19%)</title><rect x="995.3" y="531.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.3" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (20 samples, 0.19%)</title><rect x="995.3" y="515.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="998.3" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (18 samples, 0.17%)</title><rect x="995.3" y="499.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="998.3" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (147 samples, 1.42%)</title><rect x="997.6" y="547.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.6" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (146 samples, 1.41%)</title><rect x="997.6" y="531.0" width="16.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.6" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (135 samples, 1.30%)</title><rect x="998.2" y="515.0" width="15.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1001.2" y="526.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (6 samples, 0.06%)</title><rect x="1013.6" y="515.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1016.6" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="1014.4" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1017.4" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="1014.4" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.4" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (3 samples, 0.03%)</title><rect x="1014.4" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.4" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3 samples, 0.03%)</title><rect x="1014.4" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1017.4" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.encodeSignature (3 samples, 0.03%)</title><rect x="1014.7" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1017.7" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.update (5 samples, 0.05%)</title><rect x="1015.1" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1018.1" y="670.0"></text>
</g>
<g>
<title>java/security/Signature.update (5 samples, 0.05%)</title><rect x="1015.1" y="643.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1018.1" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (5 samples, 0.05%)</title><rect x="1015.1" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.1" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (5 samples, 0.05%)</title><rect x="1015.1" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1018.1" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (5 samples, 0.05%)</title><rect x="1015.1" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1018.1" y="606.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (5 samples, 0.05%)</title><rect x="1015.1" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.1" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (5 samples, 0.05%)</title><rect x="1015.1" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.1" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (5 samples, 0.05%)</title><rect x="1015.1" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1018.1" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (5 samples, 0.05%)</title><rect x="1015.1" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (30 samples, 0.29%)</title><rect x="1015.8" y="691.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.8" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (28 samples, 0.27%)</title><rect x="1015.8" y="675.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1018.8" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (28 samples, 0.27%)</title><rect x="1015.8" y="659.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1018.8" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (7 samples, 0.07%)</title><rect x="1015.9" y="643.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1018.9" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (6 samples, 0.06%)</title><rect x="1015.9" y="627.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1018.9" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (5 samples, 0.05%)</title><rect x="1016.0" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1019.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (5 samples, 0.05%)</title><rect x="1016.0" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1019.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="1016.0" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (20 samples, 0.19%)</title><rect x="1016.7" y="643.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1019.7" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (11 samples, 0.11%)</title><rect x="1016.7" y="627.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.7" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (10 samples, 0.10%)</title><rect x="1016.8" y="611.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (10 samples, 0.10%)</title><rect x="1016.8" y="595.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1019.8" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (10 samples, 0.10%)</title><rect x="1016.8" y="579.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1019.8" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (10 samples, 0.10%)</title><rect x="1016.8" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1019.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (10 samples, 0.10%)</title><rect x="1016.8" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (10 samples, 0.10%)</title><rect x="1016.8" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1019.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (10 samples, 0.10%)</title><rect x="1016.8" y="515.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1019.8" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (10 samples, 0.10%)</title><rect x="1016.8" y="499.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1019.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (6 samples, 0.06%)</title><rect x="1017.1" y="483.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.1" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (6 samples, 0.06%)</title><rect x="1017.1" y="467.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (6 samples, 0.06%)</title><rect x="1017.1" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (6 samples, 0.06%)</title><rect x="1017.1" y="435.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1020.1" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (9 samples, 0.09%)</title><rect x="1017.9" y="627.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1020.9" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (9 samples, 0.09%)</title><rect x="1017.9" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1018.4" y="595.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1018.5" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (4 samples, 0.04%)</title><rect x="1018.5" y="563.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.5" y="574.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (3 samples, 0.03%)</title><rect x="1018.5" y="547.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.5" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1018.5" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="1018.5" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.5" y="526.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1019.2" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1022.2" y="702.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (3 samples, 0.03%)</title><rect x="1019.2" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1022.2" y="686.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (9 samples, 0.09%)</title><rect x="1019.5" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1022.5" y="702.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (9 samples, 0.09%)</title><rect x="1019.5" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1022.5" y="686.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (9 samples, 0.09%)</title><rect x="1019.5" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.5" y="670.0"></text>
</g>
<g>
<title>java/util/Random.nextInt (5 samples, 0.05%)</title><rect x="1019.9" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1022.9" y="654.0"></text>
</g>
<g>
<title>java/util/Random.next (4 samples, 0.04%)</title><rect x="1020.0" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (4 samples, 0.04%)</title><rect x="1020.0" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.0" y="622.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (85 samples, 0.82%)</title><rect x="1020.7" y="707.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.7" y="718.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (85 samples, 0.82%)</title><rect x="1020.7" y="691.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.7" y="702.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (85 samples, 0.82%)</title><rect x="1020.7" y="675.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1023.7" y="686.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (83 samples, 0.80%)</title><rect x="1020.8" y="659.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.8" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (83 samples, 0.80%)</title><rect x="1020.8" y="643.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.8" y="654.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (6 samples, 0.06%)</title><rect x="1020.8" y="627.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.8" y="638.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1020.8" y="611.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.8" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (6 samples, 0.06%)</title><rect x="1020.8" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.8" y="606.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (6 samples, 0.06%)</title><rect x="1020.8" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.8" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (4 samples, 0.04%)</title><rect x="1020.9" y="563.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="1020.9" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="1020.9" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (4 samples, 0.04%)</title><rect x="1020.9" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1023.9" y="526.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1021.5" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.5" y="638.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideOneWord (3 samples, 0.03%)</title><rect x="1021.5" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.5" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (74 samples, 0.71%)</title><rect x="1021.8" y="627.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.8" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (73 samples, 0.70%)</title><rect x="1021.9" y="611.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.9" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (21 samples, 0.20%)</title><rect x="1021.9" y="595.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.9" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (21 samples, 0.20%)</title><rect x="1021.9" y="579.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.9" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (14 samples, 0.14%)</title><rect x="1022.3" y="563.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.3" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (14 samples, 0.14%)</title><rect x="1022.3" y="547.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1025.3" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (14 samples, 0.14%)</title><rect x="1022.3" y="531.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1025.3" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (10 samples, 0.10%)</title><rect x="1022.3" y="515.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.3" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (10 samples, 0.10%)</title><rect x="1022.3" y="499.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.3" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (8 samples, 0.08%)</title><rect x="1022.5" y="483.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.5" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (5 samples, 0.05%)</title><rect x="1022.8" y="467.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.8" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.toBigInteger (4 samples, 0.04%)</title><rect x="1023.4" y="515.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.4" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getMagnitudeArray (3 samples, 0.03%)</title><rect x="1023.5" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1026.5" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1023.5" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1026.5" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="1023.9" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.9" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="1023.9" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.9" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="1023.9" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.9" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (52 samples, 0.50%)</title><rect x="1024.3" y="595.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.3" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1024.3" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1027.3" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.randomBits (3 samples, 0.03%)</title><rect x="1024.3" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.3" y="574.0"></text>
</g>
<g>
<title>java/security/SecureRandom.nextBytes (3 samples, 0.03%)</title><rect x="1024.3" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.3" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG.engineNextBytes (3 samples, 0.03%)</title><rect x="1024.3" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1027.3" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.access$400 (3 samples, 0.03%)</title><rect x="1024.3" y="515.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1027.3" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.implNextBytes (3 samples, 0.03%)</title><rect x="1024.3" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1027.3" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (49 samples, 0.47%)</title><rect x="1024.7" y="579.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.7" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (49 samples, 0.47%)</title><rect x="1024.7" y="563.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1027.7" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (7 samples, 0.07%)</title><rect x="1025.2" y="547.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.2" y="558.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (7 samples, 0.07%)</title><rect x="1025.2" y="531.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1028.2" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (13 samples, 0.13%)</title><rect x="1026.1" y="547.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1029.1" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (8 samples, 0.08%)</title><rect x="1026.1" y="531.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1029.1" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (6 samples, 0.06%)</title><rect x="1026.4" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.4" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (5 samples, 0.05%)</title><rect x="1027.0" y="531.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1030.0" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (5 samples, 0.05%)</title><rect x="1027.0" y="515.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.0" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="1027.2" y="499.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1030.2" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (23 samples, 0.22%)</title><rect x="1027.6" y="547.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (20 samples, 0.19%)</title><rect x="1028.0" y="531.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1031.0" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (20 samples, 0.19%)</title><rect x="1028.0" y="515.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.0" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (20 samples, 0.19%)</title><rect x="1028.0" y="499.0" width="2.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1031.0" y="510.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (3 samples, 0.03%)</title><rect x="1030.8" y="947.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.8" y="958.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (3 samples, 0.03%)</title><rect x="1030.8" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.8" y="942.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (3 samples, 0.03%)</title><rect x="1030.8" y="915.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.8" y="926.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (3 samples, 0.03%)</title><rect x="1030.8" y="899.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.8" y="910.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="1030.8" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.8" y="894.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="1030.8" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.8" y="878.0"></text>
</g>
<g>
<title>thread_start (1,394 samples, 13.46%)</title><rect x="1031.1" y="947.0" width="158.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1034.1" y="958.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,394 samples, 13.46%)</title><rect x="1031.1" y="931.0" width="158.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1034.1" y="942.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,394 samples, 13.46%)</title><rect x="1031.1" y="915.0" width="158.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1034.1" y="926.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (1,394 samples, 13.46%)</title><rect x="1031.1" y="899.0" width="158.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1034.1" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (78 samples, 0.75%)</title><rect x="1031.1" y="883.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="894.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (5 samples, 0.05%)</title><rect x="1031.1" y="867.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.04%)</title><rect x="1031.1" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.1" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.04%)</title><rect x="1031.1" y="835.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.1" y="846.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 0.04%)</title><rect x="1031.1" y="819.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1034.1" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.04%)</title><rect x="1031.1" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.04%)</title><rect x="1031.1" y="787.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1034.1" y="798.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (6 samples, 0.06%)</title><rect x="1032.1" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.1" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.03%)</title><rect x="1032.1" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.1" y="862.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (55 samples, 0.53%)</title><rect x="1032.7" y="867.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.7" y="878.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (4 samples, 0.04%)</title><rect x="1032.7" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.7" y="862.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (4 samples, 0.04%)</title><rect x="1032.7" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.7" y="846.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (4 samples, 0.04%)</title><rect x="1032.7" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.7" y="830.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="1032.7" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.7" y="814.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1032.7" y="787.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1035.7" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (45 samples, 0.43%)</title><rect x="1033.2" y="851.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.2" y="862.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (45 samples, 0.43%)</title><rect x="1033.2" y="835.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1036.2" y="846.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.06%)</title><rect x="1038.3" y="851.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1041.3" y="862.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.07%)</title><rect x="1039.2" y="867.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1042.2" y="878.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (6 samples, 0.06%)</title><rect x="1039.2" y="851.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.2" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.06%)</title><rect x="1039.2" y="835.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.2" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.06%)</title><rect x="1039.2" y="819.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.2" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (6 samples, 0.06%)</title><rect x="1039.2" y="803.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1042.2" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (5 samples, 0.05%)</title><rect x="1039.2" y="787.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.2" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1039.2" y="771.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1042.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (1,226 samples, 11.84%)</title><rect x="1040.0" y="883.0" width="139.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.0" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,226 samples, 11.84%)</title><rect x="1040.0" y="867.0" width="139.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.0" y="878.0">JavaThread::threa..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,215 samples, 11.73%)</title><rect x="1040.0" y="851.0" width="138.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.0" y="862.0">CompileBroker::co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1,193 samples, 11.52%)</title><rect x="1040.0" y="835.0" width="136.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.0" y="846.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (1,145 samples, 11.06%)</title><rect x="1040.0" y="819.0" width="130.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.0" y="830.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (1,143 samples, 11.04%)</title><rect x="1040.3" y="803.0" width="130.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1043.3" y="814.0">Compile::Compile..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (4 samples, 0.04%)</title><rect x="1040.3" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.3" y="798.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.04%)</title><rect x="1040.3" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.3" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.04%)</title><rect x="1040.3" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (4 samples, 0.04%)</title><rect x="1040.3" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (4 samples, 0.04%)</title><rect x="1040.3" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.04%)</title><rect x="1040.3" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1040.4" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1043.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.03%)</title><rect x="1040.4" y="675.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (3 samples, 0.03%)</title><rect x="1040.4" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.4" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.03%)</title><rect x="1040.4" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1040.4" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1040.4" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.4" y="622.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (452 samples, 4.37%)</title><rect x="1040.7" y="787.0" width="51.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.7" y="798.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (15 samples, 0.14%)</title><rect x="1040.7" y="771.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.7" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (8 samples, 0.08%)</title><rect x="1040.7" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.7" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (7 samples, 0.07%)</title><rect x="1041.6" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.6" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (7 samples, 0.07%)</title><rect x="1041.6" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.6" y="750.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (6 samples, 0.06%)</title><rect x="1041.7" y="723.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.7" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (17 samples, 0.16%)</title><rect x="1042.4" y="771.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.4" y="782.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (6 samples, 0.06%)</title><rect x="1043.5" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.5" y="766.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (6 samples, 0.06%)</title><rect x="1043.5" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.5" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.05%)</title><rect x="1043.5" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.5" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.03%)</title><rect x="1043.6" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.6" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (34 samples, 0.33%)</title><rect x="1044.5" y="771.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.5" y="782.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.04%)</title><rect x="1044.6" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.6" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (29 samples, 0.28%)</title><rect x="1045.0" y="755.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.0" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.06%)</title><rect x="1045.5" y="739.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.5" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (14 samples, 0.14%)</title><rect x="1046.4" y="739.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.4" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1046.9" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.9" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (6 samples, 0.06%)</title><rect x="1047.3" y="723.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.3" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.03%)</title><rect x="1047.3" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (36 samples, 0.35%)</title><rect x="1048.7" y="771.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.7" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (35 samples, 0.34%)</title><rect x="1048.8" y="755.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (20 samples, 0.19%)</title><rect x="1049.4" y="739.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.4" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (9 samples, 0.09%)</title><rect x="1049.4" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (4 samples, 0.04%)</title><rect x="1050.4" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (6 samples, 0.06%)</title><rect x="1050.9" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.9" y="734.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (4 samples, 0.04%)</title><rect x="1051.0" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.0" y="718.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (4 samples, 0.04%)</title><rect x="1051.0" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (8 samples, 0.08%)</title><rect x="1051.7" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (345 samples, 3.33%)</title><rect x="1052.9" y="771.0" width="39.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.9" y="782.0">Pha..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1053.1" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.1" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (11 samples, 0.11%)</title><rect x="1054.4" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (26 samples, 0.25%)</title><rect x="1055.6" y="755.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1056.2" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.2" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (11 samples, 0.11%)</title><rect x="1056.8" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.8" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (9 samples, 0.09%)</title><rect x="1056.8" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.8" y="734.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (4 samples, 0.04%)</title><rect x="1058.0" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (22 samples, 0.21%)</title><rect x="1058.6" y="755.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="1059.4" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.4" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (11 samples, 0.11%)</title><rect x="1059.9" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.9" y="750.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (4 samples, 0.04%)</title><rect x="1059.9" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.03%)</title><rect x="1060.3" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.3" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1060.7" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (49 samples, 0.47%)</title><rect x="1061.1" y="755.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1064.1" y="766.0"></text>
</g>
<g>
<title>Block::end_idx() const (3 samples, 0.03%)</title><rect x="1064.8" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.8" y="750.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.05%)</title><rect x="1065.4" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.4" y="750.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (4 samples, 0.04%)</title><rect x="1065.6" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (76 samples, 0.73%)</title><rect x="1066.7" y="755.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.7" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.08%)</title><rect x="1068.3" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.3" y="750.0"></text>
</g>
<g>
<title>Node::rematerialize() const (7 samples, 0.07%)</title><rect x="1069.5" y="739.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1072.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (32 samples, 0.31%)</title><rect x="1070.3" y="739.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.3" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (10 samples, 0.10%)</title><rect x="1070.7" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1071.9" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.05%)</title><rect x="1072.3" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.3" y="734.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (10 samples, 0.10%)</title><rect x="1072.9" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.9" y="734.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (7 samples, 0.07%)</title><rect x="1074.3" y="739.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (30 samples, 0.29%)</title><rect x="1075.8" y="755.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.8" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.05%)</title><rect x="1077.6" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.6" y="750.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.04%)</title><rect x="1078.6" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.6" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.04%)</title><rect x="1078.6" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (20 samples, 0.19%)</title><rect x="1079.4" y="755.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.13%)</title><rect x="1079.9" y="739.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1082.9" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (18 samples, 0.17%)</title><rect x="1081.7" y="755.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.7" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 0.16%)</title><rect x="1081.9" y="739.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.9" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (15 samples, 0.14%)</title><rect x="1082.1" y="723.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.1" y="734.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.04%)</title><rect x="1082.1" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.1" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (8 samples, 0.08%)</title><rect x="1082.7" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.7" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1082.8" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.8" y="702.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="1083.2" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.2" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (9 samples, 0.09%)</title><rect x="1083.8" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.8" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (8 samples, 0.08%)</title><rect x="1083.9" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.9" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (8 samples, 0.08%)</title><rect x="1084.8" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1085.0" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.0" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (7 samples, 0.07%)</title><rect x="1085.7" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.7" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (5 samples, 0.05%)</title><rect x="1085.8" y="739.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.8" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (43 samples, 0.42%)</title><rect x="1086.5" y="755.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.5" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1089.2" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.2" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (14 samples, 0.14%)</title><rect x="1089.8" y="739.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.8" y="750.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1090.4" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.4" y="734.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (3 samples, 0.03%)</title><rect x="1091.1" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.1" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="1091.5" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.5" y="766.0"></text>
</g>
<g>
<title>Chunk::next_chop() (4 samples, 0.04%)</title><rect x="1091.5" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.5" y="750.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (4 samples, 0.04%)</title><rect x="1091.5" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.5" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (624 samples, 6.03%)</title><rect x="1092.3" y="787.0" width="71.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="798.0">Compile:..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.03%)</title><rect x="1092.6" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.06%)</title><rect x="1092.9" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.06%)</title><rect x="1092.9" y="755.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.9" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.06%)</title><rect x="1093.6" y="771.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.6" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.03%)</title><rect x="1094.3" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.3" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.03%)</title><rect x="1094.3" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (569 samples, 5.49%)</title><rect x="1094.7" y="771.0" width="64.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.7" y="782.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (7 samples, 0.07%)</title><rect x="1095.1" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.1" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.05%)</title><rect x="1095.1" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.1" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1095.1" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.1" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1095.1" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.1" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1095.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.1" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1095.1" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.1" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1095.9" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (28 samples, 0.27%)</title><rect x="1096.6" y="755.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.6" y="766.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (7 samples, 0.07%)</title><rect x="1098.4" y="739.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 0.24%)</title><rect x="1099.7" y="755.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1101.1" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (6 samples, 0.06%)</title><rect x="1101.5" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (462 samples, 4.46%)</title><rect x="1102.6" y="755.0" width="52.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.6" y="766.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (449 samples, 4.34%)</title><rect x="1104.0" y="739.0" width="51.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.0" y="750.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (433 samples, 4.18%)</title><rect x="1104.3" y="723.0" width="49.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.3" y="734.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.04%)</title><rect x="1107.0" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.10%)</title><rect x="1107.5" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (6 samples, 0.06%)</title><rect x="1108.6" y="707.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.05%)</title><rect x="1108.8" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (388 samples, 3.75%)</title><rect x="1109.4" y="707.0" width="44.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.4" y="718.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (56 samples, 0.54%)</title><rect x="1117.8" y="691.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (259 samples, 2.50%)</title><rect x="1124.1" y="691.0" width="29.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.1" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (7 samples, 0.07%)</title><rect x="1153.6" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.04%)</title><rect x="1154.0" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (5 samples, 0.05%)</title><rect x="1154.4" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.04%)</title><rect x="1155.2" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (12 samples, 0.12%)</title><rect x="1155.7" y="755.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (4 samples, 0.04%)</title><rect x="1156.0" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.05%)</title><rect x="1156.5" y="739.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 0.13%)</title><rect x="1157.1" y="755.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 0.13%)</title><rect x="1157.1" y="739.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.03%)</title><rect x="1157.8" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.05%)</title><rect x="1158.7" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.7" y="766.0"></text>
</g>
<g>
<title>Chunk::next_chop() (5 samples, 0.05%)</title><rect x="1158.7" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (5 samples, 0.05%)</title><rect x="1158.7" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>free_large (5 samples, 0.05%)</title><rect x="1158.7" y="707.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1161.7" y="718.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (5 samples, 0.05%)</title><rect x="1158.7" y="691.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (5 samples, 0.05%)</title><rect x="1158.7" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1161.7" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (30 samples, 0.29%)</title><rect x="1159.6" y="771.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (29 samples, 0.28%)</title><rect x="1159.6" y="755.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (6 samples, 0.06%)</title><rect x="1159.8" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.03%)</title><rect x="1161.2" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (6 samples, 0.06%)</title><rect x="1162.0" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.03%)</title><rect x="1162.3" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.3" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.03%)</title><rect x="1163.0" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="782.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (4 samples, 0.04%)</title><rect x="1163.7" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (4 samples, 0.04%)</title><rect x="1163.7" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (46 samples, 0.44%)</title><rect x="1164.1" y="787.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (46 samples, 0.44%)</title><rect x="1164.1" y="771.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (44 samples, 0.42%)</title><rect x="1164.4" y="755.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (42 samples, 0.41%)</title><rect x="1164.4" y="739.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (42 samples, 0.41%)</title><rect x="1164.4" y="723.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (38 samples, 0.37%)</title><rect x="1164.5" y="707.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (33 samples, 0.32%)</title><rect x="1164.5" y="691.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (33 samples, 0.32%)</title><rect x="1164.5" y="675.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (32 samples, 0.31%)</title><rect x="1164.6" y="659.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (31 samples, 0.30%)</title><rect x="1164.7" y="643.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (31 samples, 0.30%)</title><rect x="1164.7" y="627.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 0.27%)</title><rect x="1164.7" y="611.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.22%)</title><rect x="1165.0" y="595.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.22%)</title><rect x="1165.0" y="579.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (22 samples, 0.21%)</title><rect x="1165.2" y="563.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (22 samples, 0.21%)</title><rect x="1165.2" y="547.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (22 samples, 0.21%)</title><rect x="1165.2" y="531.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.19%)</title><rect x="1165.2" y="515.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.14%)</title><rect x="1165.2" y="499.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.14%)</title><rect x="1165.2" y="483.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.14%)</title><rect x="1165.3" y="467.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.13%)</title><rect x="1165.4" y="451.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.13%)</title><rect x="1165.4" y="435.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.12%)</title><rect x="1165.4" y="419.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.4" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.04%)</title><rect x="1165.4" y="403.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.04%)</title><rect x="1165.4" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="398.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.04%)</title><rect x="1165.4" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.03%)</title><rect x="1165.5" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.5" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.03%)</title><rect x="1165.5" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.03%)</title><rect x="1165.5" y="323.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1165.5" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.5" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1165.5" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.03%)</title><rect x="1165.5" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.08%)</title><rect x="1165.8" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.08%)</title><rect x="1165.8" y="387.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.08%)</title><rect x="1165.8" y="371.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1166.0" y="355.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.07%)</title><rect x="1166.0" y="339.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1166.0" y="323.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.1" y="307.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.1" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.1" y="275.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.1" y="259.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.1" y="243.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.1" y="227.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.1" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.1" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1166.1" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1166.1" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1166.1" y="147.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.1" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.9" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.9" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.9" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.9" y="451.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.9" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.9" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.9" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.9" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.9" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.9" y="355.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.9" y="339.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.9" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.9" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.9" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.9" y="275.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.9" y="259.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.9" y="243.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.9" y="227.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.9" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1166.9" y="195.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1166.9" y="179.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1166.9" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1166.9" y="147.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1166.9" y="131.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1166.9" y="115.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.1" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.1" y="83.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1167.1" y="67.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1167.1" y="51.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1167.1" y="35.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1168.2" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1168.2" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1168.2" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1168.2" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1168.2" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1168.2" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1168.2" y="595.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="606.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (5 samples, 0.05%)</title><rect x="1169.4" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.03%)</title><rect x="1169.4" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (5 samples, 0.05%)</title><rect x="1169.9" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 0.38%)</title><rect x="1170.7" y="819.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (39 samples, 0.38%)</title><rect x="1170.7" y="803.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (39 samples, 0.38%)</title><rect x="1170.7" y="787.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (33 samples, 0.32%)</title><rect x="1170.7" y="771.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (11 samples, 0.11%)</title><rect x="1170.7" y="755.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (8 samples, 0.08%)</title><rect x="1170.7" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (8 samples, 0.08%)</title><rect x="1170.7" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (8 samples, 0.08%)</title><rect x="1170.7" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (8 samples, 0.08%)</title><rect x="1170.7" y="691.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 0.08%)</title><rect x="1170.7" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.06%)</title><rect x="1170.9" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1171.1" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1171.1" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1171.2" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="1171.2" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="1171.2" y="579.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1171.2" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1171.2" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (8 samples, 0.08%)</title><rect x="1172.0" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (3 samples, 0.03%)</title><rect x="1172.0" y="739.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (3 samples, 0.03%)</title><rect x="1172.0" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (5 samples, 0.05%)</title><rect x="1172.3" y="739.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (5 samples, 0.05%)</title><rect x="1172.3" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (13 samples, 0.13%)</title><rect x="1172.9" y="755.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (12 samples, 0.12%)</title><rect x="1173.0" y="739.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="750.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (6 samples, 0.06%)</title><rect x="1173.0" y="723.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (6 samples, 0.06%)</title><rect x="1173.0" y="707.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.03%)</title><rect x="1173.4" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (5 samples, 0.05%)</title><rect x="1174.6" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (5 samples, 0.05%)</title><rect x="1174.6" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (4 samples, 0.04%)</title><rect x="1174.7" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1174.8" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1174.8" y="707.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="1175.3" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>Chunk::next_chop() (4 samples, 0.04%)</title><rect x="1175.3" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (4 samples, 0.04%)</title><rect x="1175.3" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>free_large (4 samples, 0.04%)</title><rect x="1175.3" y="771.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (4 samples, 0.04%)</title><rect x="1175.3" y="755.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (4 samples, 0.04%)</title><rect x="1175.3" y="739.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>CompileQueue::get() (21 samples, 0.20%)</title><rect x="1176.0" y="835.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (21 samples, 0.20%)</title><rect x="1176.0" y="819.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (21 samples, 0.20%)</title><rect x="1176.0" y="803.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (21 samples, 0.20%)</title><rect x="1176.0" y="787.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.17%)</title><rect x="1176.1" y="771.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1179.1" y="782.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (11 samples, 0.11%)</title><rect x="1178.5" y="851.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.05%)</title><rect x="1178.5" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.05%)</title><rect x="1178.5" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (5 samples, 0.05%)</title><rect x="1178.5" y="803.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.06%)</title><rect x="1179.1" y="835.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.06%)</title><rect x="1179.1" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (6 samples, 0.06%)</title><rect x="1179.1" y="803.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (6 samples, 0.06%)</title><rect x="1179.1" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1179.1" y="771.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (11 samples, 0.11%)</title><rect x="1179.7" y="883.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (11 samples, 0.11%)</title><rect x="1179.7" y="867.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (8 samples, 0.08%)</title><rect x="1180.1" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.08%)</title><rect x="1180.1" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="846.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (8 samples, 0.08%)</title><rect x="1180.1" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="830.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (8 samples, 0.08%)</title><rect x="1180.1" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="814.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (8 samples, 0.08%)</title><rect x="1180.1" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="798.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (8 samples, 0.08%)</title><rect x="1180.1" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="782.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (3 samples, 0.03%)</title><rect x="1180.7" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (3 samples, 0.03%)</title><rect x="1180.7" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>WatcherThread::run() (78 samples, 0.75%)</title><rect x="1181.0" y="883.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="894.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (4 samples, 0.04%)</title><rect x="1181.0" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="878.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (73 samples, 0.70%)</title><rect x="1181.6" y="867.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (72 samples, 0.70%)</title><rect x="1181.7" y="851.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (71 samples, 0.69%)</title><rect x="1181.8" y="835.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (68 samples, 0.66%)</title><rect x="1182.0" y="819.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (65 samples, 0.63%)</title><rect x="1182.3" y="803.0" width="7.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
</g>
</svg>

