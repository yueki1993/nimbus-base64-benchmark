<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (9,355 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (8,497 samples, 90.83%)</title><rect x="10.1" y="915.0" width="1071.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,497 samples, 90.83%)</title><rect x="10.1" y="899.0" width="1071.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,497 samples, 90.83%)</title><rect x="10.1" y="883.0" width="1071.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.1" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,497 samples, 90.83%)</title><rect x="10.1" y="867.0" width="1071.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="878.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,497 samples, 90.83%)</title><rect x="10.1" y="851.0" width="1071.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="862.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,497 samples, 90.83%)</title><rect x="10.1" y="835.0" width="1071.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="846.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,497 samples, 90.83%)</title><rect x="10.1" y="819.0" width="1071.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.1" y="830.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,497 samples, 90.83%)</title><rect x="10.1" y="803.0" width="1071.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.1" y="814.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,497 samples, 90.83%)</title><rect x="10.1" y="787.0" width="1071.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.1" y="798.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,497 samples, 90.83%)</title><rect x="10.1" y="771.0" width="1071.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.1" y="782.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,497 samples, 90.83%)</title><rect x="10.1" y="755.0" width="1071.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="766.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,497 samples, 90.83%)</title><rect x="10.1" y="739.0" width="1071.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.1" y="750.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_medium_Throughput (8,497 samples, 90.83%)</title><rect x="10.1" y="723.0" width="1071.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="734.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_medium_Th..</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_medium_thrpt_jmhStub (8,352 samples, 89.28%)</title><rect x="10.1" y="707.0" width="1053.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="718.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_medium..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_medium (8,349 samples, 89.25%)</title><rect x="10.5" y="691.0" width="1053.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="702.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_medium</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,339 samples, 89.14%)</title><rect x="10.6" y="675.0" width="1051.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.6" y="686.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (6,112 samples, 65.33%)</title><rect x="11.1" y="659.0" width="771.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="670.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (59 samples, 0.63%)</title><rect x="11.5" y="643.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (59 samples, 0.63%)</title><rect x="11.5" y="627.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (59 samples, 0.63%)</title><rect x="11.5" y="611.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="12.9" y="595.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.9" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="12.9" y="579.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="12.9" y="563.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="15.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (43 samples, 0.46%)</title><rect x="13.4" y="595.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (6,050 samples, 64.67%)</title><rect x="19.0" y="643.0" width="763.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="654.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (51 samples, 0.55%)</title><rect x="19.2" y="627.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.2" y="638.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (50 samples, 0.53%)</title><rect x="19.3" y="611.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (7 samples, 0.07%)</title><rect x="19.3" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.07%)</title><rect x="19.3" y="579.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.3" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getServices (5 samples, 0.05%)</title><rect x="20.2" y="595.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.2" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getServices (3 samples, 0.03%)</title><rect x="20.3" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.3" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (35 samples, 0.37%)</title><rect x="20.8" y="595.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.8" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (35 samples, 0.37%)</title><rect x="20.8" y="579.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.8" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (35 samples, 0.37%)</title><rect x="20.8" y="563.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.8" y="574.0"></text>
</g>
<g>
<title>java/security/Provider.getService (30 samples, 0.32%)</title><rect x="21.1" y="547.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="24.1" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (9 samples, 0.10%)</title><rect x="22.6" y="531.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="542.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.09%)</title><rect x="22.7" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (8 samples, 0.09%)</title><rect x="22.7" y="499.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (2 samples, 0.02%)</title><rect x="23.0" y="483.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="494.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (2 samples, 0.02%)</title><rect x="23.0" y="467.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="23.2" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.2" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="23.2" y="467.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.2" y="478.0"></text>
</g>
<g>
<title>java/security/Provider.checkInitialized (2 samples, 0.02%)</title><rect x="23.9" y="531.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.9" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (6 samples, 0.06%)</title><rect x="24.1" y="531.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="24.1" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.1" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (4 samples, 0.04%)</title><rect x="24.1" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="24.6" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.6" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (2 samples, 0.02%)</title><rect x="24.6" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="24.6" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.6" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="24.9" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.9" y="558.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="24.9" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.9" y="542.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.iterator (2 samples, 0.02%)</title><rect x="25.4" y="595.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (243 samples, 2.60%)</title><rect x="25.6" y="627.0" width="30.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.6" y="638.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (243 samples, 2.60%)</title><rect x="25.6" y="611.0" width="30.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.6" y="622.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (155 samples, 1.66%)</title><rect x="34.7" y="595.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (7 samples, 0.07%)</title><rect x="53.4" y="579.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (15 samples, 0.16%)</title><rect x="54.3" y="595.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (15 samples, 0.16%)</title><rect x="54.3" y="579.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (9 samples, 0.10%)</title><rect x="54.8" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (2 samples, 0.02%)</title><rect x="55.9" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.9" y="574.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (122 samples, 1.30%)</title><rect x="56.3" y="627.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.3" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (122 samples, 1.30%)</title><rect x="56.3" y="611.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.3" y="622.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (122 samples, 1.30%)</title><rect x="56.3" y="595.0" width="15.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.3" y="606.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (35 samples, 0.37%)</title><rect x="56.8" y="579.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.8" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$Service.hasKeyAttributes (2 samples, 0.02%)</title><rect x="56.9" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (9 samples, 0.10%)</title><rect x="57.2" y="563.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (2 samples, 0.02%)</title><rect x="57.7" y="547.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.02%)</title><rect x="58.1" y="547.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 0.22%)</title><rect x="58.3" y="563.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (18 samples, 0.19%)</title><rect x="58.7" y="547.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.7" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (2 samples, 0.02%)</title><rect x="61.0" y="563.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.0" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (11 samples, 0.12%)</title><rect x="61.2" y="579.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.2" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (11 samples, 0.12%)</title><rect x="61.2" y="563.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.2" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (9 samples, 0.10%)</title><rect x="61.5" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.5" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (8 samples, 0.09%)</title><rect x="61.6" y="531.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.6" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (2 samples, 0.02%)</title><rect x="62.3" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.bitLength (2 samples, 0.02%)</title><rect x="62.3" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.3" y="510.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (36 samples, 0.38%)</title><rect x="62.6" y="579.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.6" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (35 samples, 0.37%)</title><rect x="62.7" y="563.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (5 samples, 0.05%)</title><rect x="62.9" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (4 samples, 0.04%)</title><rect x="62.9" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.9" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (3 samples, 0.03%)</title><rect x="62.9" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.9" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (3 samples, 0.03%)</title><rect x="62.9" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.9" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (24 samples, 0.26%)</title><rect x="63.5" y="547.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.5" y="558.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (24 samples, 0.26%)</title><rect x="63.5" y="531.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.5" y="542.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (23 samples, 0.25%)</title><rect x="63.6" y="515.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.6" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (22 samples, 0.24%)</title><rect x="63.7" y="499.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.7" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (22 samples, 0.24%)</title><rect x="63.7" y="483.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.7" y="494.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (22 samples, 0.24%)</title><rect x="63.7" y="467.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.7" y="478.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (21 samples, 0.22%)</title><rect x="63.9" y="451.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.9" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (20 samples, 0.21%)</title><rect x="64.0" y="435.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.0" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (11 samples, 0.12%)</title><rect x="64.0" y="419.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.0" y="430.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (8 samples, 0.09%)</title><rect x="64.0" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.0" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.06%)</title><rect x="64.1" y="387.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.1" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.05%)</title><rect x="64.2" y="371.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.2" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.03%)</title><rect x="64.4" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.4" y="366.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="64.4" y="339.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="67.4" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (3 samples, 0.03%)</title><rect x="65.0" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.0" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (9 samples, 0.10%)</title><rect x="65.4" y="419.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.4" y="430.0"></text>
</g>
<g>
<title>java/security/Provider.getService (7 samples, 0.07%)</title><rect x="65.4" y="403.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.4" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 0.03%)</title><rect x="65.9" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="65.9" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.9" y="382.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (3 samples, 0.03%)</title><rect x="65.9" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.9" y="366.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (2 samples, 0.02%)</title><rect x="66.3" y="403.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.3" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (2 samples, 0.02%)</title><rect x="66.3" y="387.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.3" y="398.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (5 samples, 0.05%)</title><rect x="66.5" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.5" y="558.0"></text>
</g>
<g>
<title>java/security/Signature.access$200 (36 samples, 0.38%)</title><rect x="67.1" y="579.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.1" y="590.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (36 samples, 0.38%)</title><rect x="67.1" y="563.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.1" y="574.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (3 samples, 0.03%)</title><rect x="67.3" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (32 samples, 0.34%)</title><rect x="67.6" y="547.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (18 samples, 0.19%)</title><rect x="69.4" y="531.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.4" y="542.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.02%)</title><rect x="71.4" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="74.4" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.update (497 samples, 5.31%)</title><rect x="71.7" y="627.0" width="62.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.7" y="638.0">java/s..</text>
</g>
<g>
<title>java/security/Signature.update (496 samples, 5.30%)</title><rect x="71.8" y="611.0" width="62.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.8" y="622.0">java/s..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (496 samples, 5.30%)</title><rect x="71.8" y="595.0" width="62.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.8" y="606.0">java/s..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (496 samples, 5.30%)</title><rect x="71.8" y="579.0" width="62.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.8" y="590.0">sun/se..</text>
</g>
<g>
<title>java/security/MessageDigest.update (496 samples, 5.30%)</title><rect x="71.8" y="563.0" width="62.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.8" y="574.0">java/s..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (496 samples, 5.30%)</title><rect x="71.8" y="547.0" width="62.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.8" y="558.0">java/s..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (496 samples, 5.30%)</title><rect x="71.8" y="531.0" width="62.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.8" y="542.0">sun/se..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (495 samples, 5.29%)</title><rect x="71.9" y="515.0" width="62.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.9" y="526.0">sun/se..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (489 samples, 5.23%)</title><rect x="72.7" y="499.0" width="61.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.7" y="510.0">sun/se..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (27 samples, 0.29%)</title><rect x="127.2" y="483.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.2" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (30 samples, 0.32%)</title><rect x="130.6" y="483.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.6" y="494.0"></text>
</g>
<g>
<title>java/security/Signature.verify (5,135 samples, 54.89%)</title><rect x="134.4" y="627.0" width="647.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.4" y="638.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (5,134 samples, 54.88%)</title><rect x="134.5" y="611.0" width="647.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.5" y="622.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (5,130 samples, 54.84%)</title><rect x="135.0" y="595.0" width="647.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.0" y="606.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>java/security/MessageDigest.isEqual (4 samples, 0.04%)</title><rect x="135.8" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.8" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (4 samples, 0.04%)</title><rect x="136.3" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.3" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (3 samples, 0.03%)</title><rect x="136.3" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="136.4" y="547.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.4" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (4,740 samples, 50.67%)</title><rect x="136.8" y="579.0" width="597.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.8" y="590.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (4,740 samples, 50.67%)</title><rect x="136.8" y="563.0" width="597.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.8" y="574.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (4,730 samples, 50.56%)</title><rect x="137.0" y="547.0" width="596.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.0" y="558.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.equals (4 samples, 0.04%)</title><rect x="137.3" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4,724 samples, 50.50%)</title><rect x="137.8" y="531.0" width="595.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.8" y="542.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (234 samples, 2.50%)</title><rect x="140.3" y="515.0" width="29.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="143.3" y="526.0">Sh..</text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (221 samples, 2.36%)</title><rect x="141.9" y="499.0" width="27.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="144.9" y="510.0">m..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (3,645 samples, 38.96%)</title><rect x="169.8" y="515.0" width="459.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="172.8" y="526.0">SharedRuntime::montgomery_square(int*, int*, int, long, int*)</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3,574 samples, 38.20%)</title><rect x="178.8" y="499.0" width="450.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="181.8" y="510.0">montgomery_square(unsigned long*, unsigned long*, unsigned lon..</text>
</g>
<g>
<title>java/math/BigInteger.bitLength (4 samples, 0.04%)</title><rect x="629.6" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.6" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (31 samples, 0.33%)</title><rect x="630.1" y="515.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.1" y="526.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (12 samples, 0.13%)</title><rect x="632.5" y="499.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="635.5" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (178 samples, 1.90%)</title><rect x="634.0" y="515.0" width="22.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.0" y="526.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.addOne (166 samples, 1.77%)</title><rect x="634.9" y="499.0" width="20.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.9" y="510.0"></text>
</g>
<g>
<title>mulAdd (158 samples, 1.69%)</title><rect x="635.9" y="483.0" width="19.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="638.9" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.mulAdd (5 samples, 0.05%)</title><rect x="655.8" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.8" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (5 samples, 0.05%)</title><rect x="656.6" y="515.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.6" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="656.6" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.6" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (595 samples, 6.36%)</title><rect x="657.3" y="515.0" width="75.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.3" y="526.0">java/mat..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (593 samples, 6.34%)</title><rect x="657.6" y="499.0" width="74.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.6" y="510.0">java/mat..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (593 samples, 6.34%)</title><rect x="657.6" y="483.0" width="74.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.6" y="494.0">java/mat..</text>
</g>
<g>
<title>java/math/MutableBigInteger.clear (4 samples, 0.04%)</title><rect x="658.0" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.0" y="478.0"></text>
</g>
<g>
<title>arrayof_jint_fill (3 samples, 0.03%)</title><rect x="658.1" y="451.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="661.1" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (583 samples, 6.23%)</title><rect x="658.5" y="467.0" width="73.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.5" y="478.0">java/mat..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (30 samples, 0.32%)</title><rect x="668.1" y="451.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.1" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (466 samples, 4.98%)</title><rect x="671.8" y="451.0" width="58.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.8" y="462.0">java/m..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (4 samples, 0.04%)</title><rect x="730.6" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.6" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="731.2" y="451.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.2" y="462.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="731.5" y="435.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="734.5" y="446.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="731.7" y="451.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="734.7" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (3 samples, 0.03%)</title><rect x="732.0" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.0" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (5 samples, 0.05%)</title><rect x="732.4" y="515.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.4" y="526.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="733.3" y="515.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="736.3" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (6 samples, 0.06%)</title><rect x="733.6" y="547.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.6" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (4 samples, 0.04%)</title><rect x="733.6" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.6" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (2 samples, 0.02%)</title><rect x="734.1" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.1" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (2 samples, 0.02%)</title><rect x="734.1" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.1" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="734.1" y="499.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="737.1" y="510.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (2 samples, 0.02%)</title><rect x="734.4" y="547.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.4" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (2 samples, 0.02%)</title><rect x="734.4" y="531.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.4" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (254 samples, 2.72%)</title><rect x="734.6" y="579.0" width="32.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.6" y="590.0">su..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (254 samples, 2.72%)</title><rect x="734.6" y="563.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.6" y="574.0">su..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (252 samples, 2.69%)</title><rect x="734.8" y="547.0" width="31.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.8" y="558.0">ja..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (251 samples, 2.68%)</title><rect x="734.9" y="531.0" width="31.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.9" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (251 samples, 2.68%)</title><rect x="734.9" y="515.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.9" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (251 samples, 2.68%)</title><rect x="734.9" y="499.0" width="31.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.9" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (251 samples, 2.68%)</title><rect x="734.9" y="483.0" width="31.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.9" y="494.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (251 samples, 2.68%)</title><rect x="734.9" y="467.0" width="31.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.9" y="478.0">ja..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (244 samples, 2.61%)</title><rect x="735.7" y="451.0" width="30.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="738.7" y="462.0">Ja..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="736.0" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="739.0" y="446.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (235 samples, 2.51%)</title><rect x="736.3" y="435.0" width="29.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="739.3" y="446.0">JV..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (4 samples, 0.04%)</title><rect x="736.3" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="739.3" y="430.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="736.9" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (6 samples, 0.06%)</title><rect x="737.2" y="419.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="740.2" y="430.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (2 samples, 0.02%)</title><rect x="737.9" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.9" y="430.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (220 samples, 2.35%)</title><rect x="738.2" y="419.0" width="27.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.2" y="430.0">j..</text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (2 samples, 0.02%)</title><rect x="739.1" y="403.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.1" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="739.7" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.7" y="414.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (196 samples, 2.10%)</title><rect x="740.3" y="403.0" width="24.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="743.3" y="414.0">j..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (29 samples, 0.31%)</title><rect x="745.7" y="387.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.7" y="398.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (27 samples, 0.29%)</title><rect x="745.9" y="371.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="748.9" y="382.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="746.5" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="749.5" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (7 samples, 0.07%)</title><rect x="746.8" y="355.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="747.1" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="750.1" y="350.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (2 samples, 0.02%)</title><rect x="747.4" y="339.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="750.4" y="350.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="747.6" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="750.6" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.06%)</title><rect x="747.9" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.9" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (4 samples, 0.04%)</title><rect x="748.1" y="339.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="751.1" y="350.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.02%)</title><rect x="748.7" y="355.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="751.7" y="366.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (3 samples, 0.03%)</title><rect x="748.9" y="355.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="751.9" y="366.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (54 samples, 0.58%)</title><rect x="749.4" y="387.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="752.4" y="398.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (3 samples, 0.03%)</title><rect x="755.8" y="371.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="758.8" y="382.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (3 samples, 0.03%)</title><rect x="756.2" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="759.2" y="398.0"></text>
</g>
<g>
<title>JDK_Version::current() (2 samples, 0.02%)</title><rect x="756.7" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="759.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.04%)</title><rect x="757.1" y="387.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.1" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="757.2" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="760.2" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.02%)</title><rect x="757.2" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="760.2" y="366.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (2 samples, 0.02%)</title><rect x="757.6" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.6" y="398.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (6 samples, 0.06%)</title><rect x="757.9" y="387.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="760.9" y="398.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.02%)</title><rect x="759.0" y="387.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="762.0" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (39 samples, 0.42%)</title><rect x="759.2" y="387.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="762.2" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (15 samples, 0.16%)</title><rect x="759.4" y="371.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="762.4" y="382.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.04%)</title><rect x="759.5" y="355.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.5" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (9 samples, 0.10%)</title><rect x="760.0" y="355.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="763.0" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (7 samples, 0.07%)</title><rect x="760.1" y="339.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.1" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (7 samples, 0.07%)</title><rect x="760.1" y="323.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.1" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (7 samples, 0.07%)</title><rect x="761.3" y="371.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.3" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.06%)</title><rect x="761.4" y="355.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="764.4" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (5 samples, 0.05%)</title><rect x="761.5" y="339.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="764.5" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.05%)</title><rect x="761.5" y="323.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="764.5" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (15 samples, 0.16%)</title><rect x="762.1" y="371.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.1" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (11 samples, 0.12%)</title><rect x="762.5" y="355.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="765.5" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.09%)</title><rect x="762.9" y="339.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="765.9" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.09%)</title><rect x="762.9" y="323.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="765.9" y="334.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (2 samples, 0.02%)</title><rect x="764.4" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.4" y="398.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (3 samples, 0.03%)</title><rect x="764.7" y="387.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="767.7" y="398.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*) (2 samples, 0.02%)</title><rect x="765.0" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.0" y="414.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.04%)</title><rect x="765.4" y="403.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="768.4" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.02%)</title><rect x="766.1" y="435.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="769.1" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (77 samples, 0.82%)</title><rect x="766.7" y="579.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.7" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (37 samples, 0.40%)</title><rect x="766.9" y="563.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.9" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.init (33 samples, 0.35%)</title><rect x="767.4" y="547.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.4" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerIndefLenConverter.isIndefinite (7 samples, 0.07%)</title><rect x="770.5" y="531.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.5" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerIndefLenConverter.isLongForm (2 samples, 0.02%)</title><rect x="771.1" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.1" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="771.4" y="531.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.4" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (17 samples, 0.18%)</title><rect x="771.6" y="563.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="774.6" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (16 samples, 0.17%)</title><rect x="771.7" y="547.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.7" y="558.0"></text>
</g>
<g>
<title>java/util/Vector.&lt;init&gt; (2 samples, 0.02%)</title><rect x="772.6" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.6" y="542.0"></text>
</g>
<g>
<title>java/util/Vector.&lt;init&gt; (2 samples, 0.02%)</title><rect x="772.6" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.6" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (7 samples, 0.07%)</title><rect x="772.9" y="531.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.9" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (7 samples, 0.07%)</title><rect x="772.9" y="515.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="775.9" y="526.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (6 samples, 0.06%)</title><rect x="773.0" y="499.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.0" y="510.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (2 samples, 0.02%)</title><rect x="773.4" y="483.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.4" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (8 samples, 0.09%)</title><rect x="773.8" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.8" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.isConstructed (2 samples, 0.02%)</title><rect x="774.5" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="777.5" y="558.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (12 samples, 0.13%)</title><rect x="774.9" y="563.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="777.9" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (5 samples, 0.05%)</title><rect x="775.0" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.0" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.0" y="531.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.0" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (3 samples, 0.03%)</title><rect x="775.1" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Object.clone (3 samples, 0.03%)</title><rect x="775.1" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.1" y="510.0"></text>
</g>
<g>
<title>JVM_Clone (2 samples, 0.02%)</title><rect x="775.1" y="483.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="778.1" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (6 samples, 0.06%)</title><rect x="775.6" y="547.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.6" y="558.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (3 samples, 0.03%)</title><rect x="776.0" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.0" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (2 samples, 0.02%)</title><rect x="776.0" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.0" y="526.0"></text>
</g>
<g>
<title>java/io/InputStream.read (2 samples, 0.02%)</title><rect x="776.0" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.0" y="510.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (2 samples, 0.02%)</title><rect x="776.0" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.0" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (45 samples, 0.48%)</title><rect x="776.4" y="579.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.4" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (45 samples, 0.48%)</title><rect x="776.4" y="563.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.4" y="574.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (45 samples, 0.48%)</title><rect x="776.4" y="547.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="779.4" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (43 samples, 0.46%)</title><rect x="776.7" y="531.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.7" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (43 samples, 0.46%)</title><rect x="776.7" y="515.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.7" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (40 samples, 0.43%)</title><rect x="777.0" y="499.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.0" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (3 samples, 0.03%)</title><rect x="777.3" y="483.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.3" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (2 samples, 0.02%)</title><rect x="777.7" y="483.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.7" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (33 samples, 0.35%)</title><rect x="777.9" y="483.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.9" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (2 samples, 0.02%)</title><rect x="781.6" y="467.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.6" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (2 samples, 0.02%)</title><rect x="781.8" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.8" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.1" y="659.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.1" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.1" y="643.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.1" y="627.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.1" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/BaseJWSProvider.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.1" y="611.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.1" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (355 samples, 3.79%)</title><rect x="782.7" y="659.0" width="44.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.7" y="670.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (44 samples, 0.47%)</title><rect x="782.8" y="643.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="785.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (22 samples, 0.24%)</title><rect x="783.1" y="627.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.16%)</title><rect x="784.0" y="611.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="787.0" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/ContentHandlerDumy.endJSON (2 samples, 0.02%)</title><rect x="785.6" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 0.19%)</title><rect x="785.9" y="627.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.17%)</title><rect x="786.0" y="611.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.0" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.10%)</title><rect x="786.6" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="789.6" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="787.8" y="595.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="790.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="788.1" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.1" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (295 samples, 3.15%)</title><rect x="788.4" y="643.0" width="37.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.4" y="654.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (295 samples, 3.15%)</title><rect x="788.4" y="627.0" width="37.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="791.4" y="638.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (293 samples, 3.13%)</title><rect x="788.6" y="611.0" width="37.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.6" y="622.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (274 samples, 2.93%)</title><rect x="789.0" y="595.0" width="34.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.0" y="606.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (184 samples, 1.97%)</title><rect x="789.0" y="579.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.0" y="590.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (112 samples, 1.20%)</title><rect x="789.0" y="563.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (5 samples, 0.05%)</title><rect x="790.8" y="547.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (2 samples, 0.02%)</title><rect x="791.0" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (2 samples, 0.02%)</title><rect x="791.0" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="791.4" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (2 samples, 0.02%)</title><rect x="791.8" y="547.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (2 samples, 0.02%)</title><rect x="792.0" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.0" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (2 samples, 0.02%)</title><rect x="792.0" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="792.0" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="795.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (63 samples, 0.67%)</title><rect x="792.3" y="547.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.3" y="558.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (62 samples, 0.66%)</title><rect x="792.4" y="531.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.4" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (61 samples, 0.65%)</title><rect x="792.5" y="515.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.5" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (7 samples, 0.07%)</title><rect x="792.5" y="499.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.5" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (5 samples, 0.05%)</title><rect x="792.8" y="483.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="792.9" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.9" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (7 samples, 0.07%)</title><rect x="793.4" y="499.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.4" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (7 samples, 0.07%)</title><rect x="793.4" y="483.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.4" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.06%)</title><rect x="793.6" y="467.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.6" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (11 samples, 0.12%)</title><rect x="794.3" y="499.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.3" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (9 samples, 0.10%)</title><rect x="794.6" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.6" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (2 samples, 0.02%)</title><rect x="794.9" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="794.9" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.9" y="462.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (4 samples, 0.04%)</title><rect x="795.2" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.2" y="478.0"></text>
</g>
<g>
<title>java/net/URI.match (4 samples, 0.04%)</title><rect x="795.2" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.2" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (26 samples, 0.28%)</title><rect x="795.7" y="499.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="798.7" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (23 samples, 0.25%)</title><rect x="796.0" y="483.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.0" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (19 samples, 0.20%)</title><rect x="796.1" y="467.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.1" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (15 samples, 0.16%)</title><rect x="796.1" y="451.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.1" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (13 samples, 0.14%)</title><rect x="796.1" y="435.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.1" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (8 samples, 0.09%)</title><rect x="796.5" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.09%)</title><rect x="796.5" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.5" y="414.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (2 samples, 0.02%)</title><rect x="797.5" y="419.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.5" y="430.0"></text>
</g>
<g>
<title>java/net/URI.match (2 samples, 0.02%)</title><rect x="797.5" y="403.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="800.5" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="798.0" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="798.1" y="435.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="798.1" y="419.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="801.1" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="798.5" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.5" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.05%)</title><rect x="799.0" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="799.1" y="483.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="799.1" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.1" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (5 samples, 0.05%)</title><rect x="799.6" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="799.6" y="483.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="799.7" y="467.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (8 samples, 0.09%)</title><rect x="800.2" y="547.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.07%)</title><rect x="800.4" y="531.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.4" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (4 samples, 0.04%)</title><rect x="800.7" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (14 samples, 0.15%)</title><rect x="801.2" y="547.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (14 samples, 0.15%)</title><rect x="801.2" y="531.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (14 samples, 0.15%)</title><rect x="801.2" y="515.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="804.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (72 samples, 0.77%)</title><rect x="803.1" y="563.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.1" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (72 samples, 0.77%)</title><rect x="803.1" y="547.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="806.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (9 samples, 0.10%)</title><rect x="803.1" y="531.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="806.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (9 samples, 0.10%)</title><rect x="803.1" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (9 samples, 0.10%)</title><rect x="803.1" y="499.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (63 samples, 0.67%)</title><rect x="804.3" y="531.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (63 samples, 0.67%)</title><rect x="804.3" y="515.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.3" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (63 samples, 0.67%)</title><rect x="804.3" y="499.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.3" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (41 samples, 0.44%)</title><rect x="807.1" y="483.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.1" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (40 samples, 0.43%)</title><rect x="807.2" y="467.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (22 samples, 0.24%)</title><rect x="807.4" y="451.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.4" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (22 samples, 0.24%)</title><rect x="807.4" y="435.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.4" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (15 samples, 0.16%)</title><rect x="807.4" y="419.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.4" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (2 samples, 0.02%)</title><rect x="808.2" y="403.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.2" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (4 samples, 0.04%)</title><rect x="808.4" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.4" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="808.6" y="387.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="811.6" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="808.9" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="808.9" y="387.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.9" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (5 samples, 0.05%)</title><rect x="809.3" y="419.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="812.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="809.3" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="809.4" y="387.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.4" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="809.4" y="371.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="812.4" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="809.6" y="355.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="812.6" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (2 samples, 0.02%)</title><rect x="810.0" y="419.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.0" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (5 samples, 0.05%)</title><rect x="810.2" y="451.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (2 samples, 0.02%)</title><rect x="810.3" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="813.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (2 samples, 0.02%)</title><rect x="810.6" y="435.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="813.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 0.12%)</title><rect x="810.8" y="451.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="810.8" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="813.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="810.8" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.09%)</title><rect x="811.2" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="811.6" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.6" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (90 samples, 0.96%)</title><rect x="812.2" y="579.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.2" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (73 samples, 0.78%)</title><rect x="812.2" y="563.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (73 samples, 0.78%)</title><rect x="812.2" y="547.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.2" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (34 samples, 0.36%)</title><rect x="815.6" y="531.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (12 samples, 0.13%)</title><rect x="819.9" y="531.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (12 samples, 0.13%)</title><rect x="819.9" y="515.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (4 samples, 0.04%)</title><rect x="820.3" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (5 samples, 0.05%)</title><rect x="820.8" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="820.8" y="483.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="820.8" y="467.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="823.8" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="820.8" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="823.8" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="821.1" y="435.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.1" y="446.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (2 samples, 0.02%)</title><rect x="821.1" y="419.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="824.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.18%)</title><rect x="821.4" y="563.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.15%)</title><rect x="821.4" y="547.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (6 samples, 0.06%)</title><rect x="821.4" y="531.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (4 samples, 0.04%)</title><rect x="821.4" y="515.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (2 samples, 0.02%)</title><rect x="821.9" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="821.9" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="821.9" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.9" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="821.9" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.9" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.09%)</title><rect x="822.2" y="531.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="825.2" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="823.2" y="547.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="826.2" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (7 samples, 0.07%)</title><rect x="823.6" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.04%)</title><rect x="824.0" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="827.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.0" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.0" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="824.1" y="547.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="827.1" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.10%)</title><rect x="824.5" y="595.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="827.5" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (15 samples, 0.16%)</title><rect x="825.6" y="643.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="828.6" y="654.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (1,862 samples, 19.90%)</title><rect x="827.5" y="659.0" width="234.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.5" y="670.0">com/yueki/SignedJwtBenchmark.ge..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (1,862 samples, 19.90%)</title><rect x="827.5" y="643.0" width="234.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.5" y="654.0">com/nimbusds/jwt/SignedJWT.getJ..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (1,761 samples, 18.82%)</title><rect x="827.9" y="627.0" width="222.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.9" y="638.0">com/nimbusds/jose/Payload.toJ..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (1,125 samples, 12.03%)</title><rect x="828.4" y="611.0" width="141.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="831.4" y="622.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (1,125 samples, 12.03%)</title><rect x="828.4" y="595.0" width="141.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.4" y="606.0">com/nimbusds/jose/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (1,059 samples, 11.32%)</title><rect x="829.1" y="579.0" width="133.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.1" y="590.0">com/nimbusds/jose..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (1,059 samples, 11.32%)</title><rect x="829.1" y="563.0" width="133.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.1" y="574.0">com/nimbusds/jose..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (651 samples, 6.96%)</title><rect x="870.5" y="547.0" width="82.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="873.5" y="558.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (30 samples, 0.32%)</title><rect x="948.8" y="531.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (73 samples, 0.78%)</title><rect x="952.6" y="547.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="955.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (73 samples, 0.78%)</title><rect x="952.6" y="531.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.02%)</title><rect x="955.0" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="955.0" y="499.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (2 samples, 0.02%)</title><rect x="955.0" y="483.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="955.0" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (4 samples, 0.04%)</title><rect x="955.3" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="958.3" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="955.3" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.3" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="955.3" y="483.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="958.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (46 samples, 0.49%)</title><rect x="955.8" y="515.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (2 samples, 0.02%)</title><rect x="961.6" y="515.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.6" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="961.8" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.8" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="962.2" y="547.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="965.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (60 samples, 0.64%)</title><rect x="962.7" y="579.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (60 samples, 0.64%)</title><rect x="962.7" y="563.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="965.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (60 samples, 0.64%)</title><rect x="962.7" y="547.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="965.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (45 samples, 0.48%)</title><rect x="963.7" y="531.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.07%)</title><rect x="969.4" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="969.6" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="969.6" y="499.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="972.6" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="969.6" y="483.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="972.6" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="969.6" y="467.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.6" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (4 samples, 0.04%)</title><rect x="969.8" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.8" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (632 samples, 6.76%)</title><rect x="970.3" y="611.0" width="79.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.3" y="622.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (632 samples, 6.76%)</title><rect x="970.3" y="595.0" width="79.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.3" y="606.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (630 samples, 6.73%)</title><rect x="970.5" y="579.0" width="79.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.5" y="590.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (630 samples, 6.73%)</title><rect x="970.5" y="563.0" width="79.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="973.5" y="574.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (630 samples, 6.73%)</title><rect x="970.5" y="547.0" width="79.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="973.5" y="558.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (630 samples, 6.73%)</title><rect x="970.5" y="531.0" width="79.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="973.5" y="542.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (626 samples, 6.69%)</title><rect x="971.0" y="515.0" width="79.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.0" y="526.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (581 samples, 6.21%)</title><rect x="971.8" y="499.0" width="73.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="974.8" y="510.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (9 samples, 0.10%)</title><rect x="971.9" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (3 samples, 0.03%)</title><rect x="972.2" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="975.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.skipDigits (2 samples, 0.02%)</title><rect x="972.5" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.5" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (571 samples, 6.10%)</title><rect x="973.0" y="483.0" width="72.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.0" y="494.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (557 samples, 5.95%)</title><rect x="973.3" y="467.0" width="70.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="976.3" y="478.0">com/nimb..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (228 samples, 2.44%)</title><rect x="991.7" y="451.0" width="28.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.7" y="462.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (9 samples, 0.10%)</title><rect x="1020.5" y="451.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1020.6" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.6" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.02%)</title><rect x="1020.7" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.7" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.02%)</title><rect x="1020.7" y="403.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1023.7" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="1021.0" y="435.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1024.0" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (174 samples, 1.86%)</title><rect x="1021.6" y="451.0" width="22.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1024.6" y="462.0">c..</text>
</g>
<g>
<title>java/lang/String.charAt (107 samples, 1.14%)</title><rect x="1030.1" y="435.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.1" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="1042.8" y="419.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1045.8" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="1043.6" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="1043.6" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1046.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1043.7" y="435.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.7" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.02%)</title><rect x="1043.8" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.8" y="430.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1043.8" y="403.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1046.8" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (3 samples, 0.03%)</title><rect x="1044.1" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1044.1" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (2 samples, 0.02%)</title><rect x="1044.4" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1044.7" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1044.7" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1047.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (22 samples, 0.24%)</title><rect x="1045.1" y="499.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.1" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (2 samples, 0.02%)</title><rect x="1045.1" y="483.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1048.1" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (14 samples, 0.15%)</title><rect x="1045.3" y="483.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1048.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.14%)</title><rect x="1045.4" y="467.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1048.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.10%)</title><rect x="1046.0" y="451.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.0" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.10%)</title><rect x="1046.0" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.0" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="1046.5" y="419.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1049.5" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (3 samples, 0.03%)</title><rect x="1047.1" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1050.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1047.1" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1050.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="1047.5" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1050.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="1047.6" y="467.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1050.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (17 samples, 0.18%)</title><rect x="1047.8" y="499.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1050.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.09%)</title><rect x="1048.0" y="483.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.07%)</title><rect x="1048.1" y="467.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1051.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.09%)</title><rect x="1049.0" y="483.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1052.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.02%)</title><rect x="1049.5" y="467.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.02%)</title><rect x="1049.7" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.7" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (98 samples, 1.05%)</title><rect x="1050.0" y="627.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1053.0" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (9 samples, 0.10%)</title><rect x="1050.1" y="611.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1053.1" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (9 samples, 0.10%)</title><rect x="1050.1" y="595.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1053.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.05%)</title><rect x="1050.6" y="579.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.05%)</title><rect x="1050.6" y="563.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (13 samples, 0.14%)</title><rect x="1051.3" y="611.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1054.3" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (11 samples, 0.12%)</title><rect x="1051.5" y="595.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1054.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.07%)</title><rect x="1052.0" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="1052.1" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="1052.6" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (26 samples, 0.28%)</title><rect x="1052.9" y="611.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.9" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (26 samples, 0.28%)</title><rect x="1052.9" y="595.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (26 samples, 0.28%)</title><rect x="1052.9" y="579.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (24 samples, 0.26%)</title><rect x="1052.9" y="563.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (24 samples, 0.26%)</title><rect x="1052.9" y="547.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1055.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 0.15%)</title><rect x="1053.4" y="531.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="1054.0" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.0" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (5 samples, 0.05%)</title><rect x="1054.5" y="515.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.size (2 samples, 0.02%)</title><rect x="1055.2" y="531.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.2" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (2 samples, 0.02%)</title><rect x="1055.7" y="531.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (2 samples, 0.02%)</title><rect x="1055.9" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (8 samples, 0.09%)</title><rect x="1056.2" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.09%)</title><rect x="1056.2" y="595.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="1056.2" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1059.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="1056.2" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="1056.5" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.5" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (2 samples, 0.02%)</title><rect x="1056.9" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (6 samples, 0.06%)</title><rect x="1057.2" y="611.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.06%)</title><rect x="1057.2" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1060.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.06%)</title><rect x="1057.2" y="579.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.2" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="1057.6" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1060.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (13 samples, 0.14%)</title><rect x="1057.9" y="611.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.14%)</title><rect x="1057.9" y="595.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.14%)</title><rect x="1057.9" y="579.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.9" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (2 samples, 0.02%)</title><rect x="1058.9" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1061.9" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="1059.2" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1062.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (14 samples, 0.15%)</title><rect x="1059.6" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.13%)</title><rect x="1059.8" y="595.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1062.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.12%)</title><rect x="1060.0" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="1060.7" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1063.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.05%)</title><rect x="1061.5" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1064.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.04%)</title><rect x="1061.6" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1064.6" y="606.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (9 samples, 0.10%)</title><rect x="1062.5" y="675.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1065.5" y="686.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_medium_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (145 samples, 1.55%)</title><rect x="1063.6" y="707.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1066.6" y="718.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (144 samples, 1.54%)</title><rect x="1063.7" y="691.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.7" y="702.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (109 samples, 1.17%)</title><rect x="1064.0" y="675.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.0" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (96 samples, 1.03%)</title><rect x="1064.1" y="659.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.1" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (2 samples, 0.02%)</title><rect x="1064.1" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.02%)</title><rect x="1064.1" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.1" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.02%)</title><rect x="1064.1" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1067.1" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (94 samples, 1.00%)</title><rect x="1064.4" y="643.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (2 samples, 0.02%)</title><rect x="1064.4" y="627.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1067.4" y="638.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (2 samples, 0.02%)</title><rect x="1064.4" y="611.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.4" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.sign (89 samples, 0.95%)</title><rect x="1064.7" y="627.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.7" y="638.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (89 samples, 0.95%)</title><rect x="1064.7" y="611.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.7" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (89 samples, 0.95%)</title><rect x="1064.7" y="595.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.7" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (88 samples, 0.94%)</title><rect x="1064.7" y="579.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.7" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (88 samples, 0.94%)</title><rect x="1064.7" y="563.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.7" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (82 samples, 0.88%)</title><rect x="1065.0" y="547.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.0" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (82 samples, 0.88%)</title><rect x="1065.0" y="531.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1068.0" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (11 samples, 0.12%)</title><rect x="1065.0" y="515.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.0" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (9 samples, 0.10%)</title><rect x="1065.3" y="499.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1068.3" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (58 samples, 0.62%)</title><rect x="1066.4" y="515.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.4" y="526.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (57 samples, 0.61%)</title><rect x="1066.5" y="499.0" width="7.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1069.5" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="1073.8" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1076.8" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (4 samples, 0.04%)</title><rect x="1073.8" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1076.8" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (4 samples, 0.04%)</title><rect x="1073.8" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.8" y="494.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="1073.8" y="467.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1076.8" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (6 samples, 0.06%)</title><rect x="1074.3" y="515.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (6 samples, 0.06%)</title><rect x="1074.3" y="499.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1077.3" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (6 samples, 0.06%)</title><rect x="1074.3" y="483.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.3" y="494.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (5 samples, 0.05%)</title><rect x="1074.5" y="467.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1077.5" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (2 samples, 0.02%)</title><rect x="1075.1" y="515.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.1" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (2 samples, 0.02%)</title><rect x="1075.1" y="499.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.1" y="510.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2 samples, 0.02%)</title><rect x="1075.1" y="483.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1078.1" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="1075.5" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.5" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (2 samples, 0.02%)</title><rect x="1075.6" y="531.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1078.6" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (2 samples, 0.02%)</title><rect x="1075.6" y="515.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.6" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (2 samples, 0.02%)</title><rect x="1075.6" y="499.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.6" y="510.0"></text>
</g>
<g>
<title>java/security/Signature.update (2 samples, 0.02%)</title><rect x="1076.0" y="627.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.0" y="638.0"></text>
</g>
<g>
<title>java/security/Signature.update (2 samples, 0.02%)</title><rect x="1076.0" y="611.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1079.0" y="622.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (2 samples, 0.02%)</title><rect x="1076.0" y="595.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.0" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (2 samples, 0.02%)</title><rect x="1076.0" y="579.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1079.0" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (2 samples, 0.02%)</title><rect x="1076.0" y="563.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1079.0" y="574.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (2 samples, 0.02%)</title><rect x="1076.0" y="547.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1079.0" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (2 samples, 0.02%)</title><rect x="1076.0" y="531.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1079.0" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (2 samples, 0.02%)</title><rect x="1076.0" y="515.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1079.0" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (2 samples, 0.02%)</title><rect x="1076.0" y="499.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (9 samples, 0.10%)</title><rect x="1076.2" y="659.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1079.2" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (9 samples, 0.10%)</title><rect x="1076.2" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1079.2" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (9 samples, 0.10%)</title><rect x="1076.2" y="627.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.2" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (2 samples, 0.02%)</title><rect x="1076.2" y="611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1079.2" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (2 samples, 0.02%)</title><rect x="1076.2" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (2 samples, 0.02%)</title><rect x="1076.2" y="579.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1079.2" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (2 samples, 0.02%)</title><rect x="1076.2" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (2 samples, 0.02%)</title><rect x="1076.2" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.2" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (6 samples, 0.06%)</title><rect x="1076.5" y="611.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1079.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (3 samples, 0.03%)</title><rect x="1076.5" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.5" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (3 samples, 0.03%)</title><rect x="1076.5" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.5" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (3 samples, 0.03%)</title><rect x="1076.5" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1079.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="1076.5" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1079.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="1076.5" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1079.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (3 samples, 0.03%)</title><rect x="1076.5" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.5" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (3 samples, 0.03%)</title><rect x="1076.5" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.5" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (3 samples, 0.03%)</title><rect x="1076.5" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1079.5" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (3 samples, 0.03%)</title><rect x="1076.5" y="467.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1079.5" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (3 samples, 0.03%)</title><rect x="1076.5" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1079.5" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (2 samples, 0.02%)</title><rect x="1076.6" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1079.6" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (2 samples, 0.02%)</title><rect x="1076.6" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1079.6" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (2 samples, 0.02%)</title><rect x="1076.6" y="403.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1079.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (3 samples, 0.03%)</title><rect x="1076.9" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1079.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (3 samples, 0.03%)</title><rect x="1076.9" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1077.0" y="563.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1077.0" y="547.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1080.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (2 samples, 0.02%)</title><rect x="1077.0" y="531.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.0" y="542.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (3 samples, 0.03%)</title><rect x="1077.4" y="659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1080.4" y="670.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (3 samples, 0.03%)</title><rect x="1077.4" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.4" y="654.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (3 samples, 0.03%)</title><rect x="1077.4" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1080.4" y="638.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (33 samples, 0.35%)</title><rect x="1077.7" y="675.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.7" y="686.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (33 samples, 0.35%)</title><rect x="1077.7" y="659.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.7" y="670.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (33 samples, 0.35%)</title><rect x="1077.7" y="643.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.7" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (33 samples, 0.35%)</title><rect x="1077.7" y="627.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.7" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (33 samples, 0.35%)</title><rect x="1077.7" y="611.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.7" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="1077.9" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.9" y="606.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1077.9" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1080.9" y="590.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSearch (2 samples, 0.02%)</title><rect x="1077.9" y="563.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1080.9" y="574.0"></text>
</g>
<g>
<title>java/math/BitSieve.get (2 samples, 0.02%)</title><rect x="1077.9" y="547.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (2 samples, 0.02%)</title><rect x="1077.9" y="531.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (2 samples, 0.02%)</title><rect x="1077.9" y="515.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.9" y="526.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (2 samples, 0.02%)</title><rect x="1078.1" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.1" y="574.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (2 samples, 0.02%)</title><rect x="1078.1" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.1" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (2 samples, 0.02%)</title><rect x="1078.1" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.1" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (2 samples, 0.02%)</title><rect x="1078.1" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.1" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (2 samples, 0.02%)</title><rect x="1078.1" y="499.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.1" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (2 samples, 0.02%)</title><rect x="1078.1" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.1" y="494.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (27 samples, 0.29%)</title><rect x="1078.5" y="595.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1081.5" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (27 samples, 0.29%)</title><rect x="1078.5" y="579.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1081.5" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (5 samples, 0.05%)</title><rect x="1078.5" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1081.5" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (5 samples, 0.05%)</title><rect x="1078.5" y="547.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.5" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (3 samples, 0.03%)</title><rect x="1078.5" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.5" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (3 samples, 0.03%)</title><rect x="1078.5" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1081.5" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (3 samples, 0.03%)</title><rect x="1078.5" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1081.5" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (3 samples, 0.03%)</title><rect x="1078.5" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1081.5" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (3 samples, 0.03%)</title><rect x="1078.5" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1081.5" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (3 samples, 0.03%)</title><rect x="1078.5" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1081.5" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (2 samples, 0.02%)</title><rect x="1078.6" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1081.6" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (2 samples, 0.02%)</title><rect x="1078.9" y="531.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1081.9" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (2 samples, 0.02%)</title><rect x="1078.9" y="515.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1081.9" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (2 samples, 0.02%)</title><rect x="1078.9" y="499.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.9" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (22 samples, 0.24%)</title><rect x="1079.1" y="563.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.1" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (21 samples, 0.22%)</title><rect x="1079.3" y="547.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1082.3" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (21 samples, 0.22%)</title><rect x="1079.3" y="531.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (2 samples, 0.02%)</title><rect x="1079.3" y="515.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1082.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (2 samples, 0.02%)</title><rect x="1079.3" y="499.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.3" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (2 samples, 0.02%)</title><rect x="1079.3" y="483.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.3" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (2 samples, 0.02%)</title><rect x="1079.3" y="467.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.3" y="478.0"></text>
</g>
<g>
<title>mulAdd (2 samples, 0.02%)</title><rect x="1079.3" y="451.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1082.3" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (17 samples, 0.18%)</title><rect x="1079.5" y="515.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1082.5" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (3 samples, 0.03%)</title><rect x="1079.5" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1082.5" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.squareToLen (2 samples, 0.02%)</title><rect x="1079.6" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1082.6" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.implSquareToLen (2 samples, 0.02%)</title><rect x="1079.6" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.6" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (14 samples, 0.15%)</title><rect x="1079.9" y="499.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1082.9" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (14 samples, 0.15%)</title><rect x="1079.9" y="483.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.9" y="494.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (14 samples, 0.15%)</title><rect x="1079.9" y="467.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1082.9" y="478.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 0.02%)</title><rect x="1081.6" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.6" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 0.02%)</title><rect x="1081.6" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1084.6" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 0.02%)</title><rect x="1081.6" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.6" y="494.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (2 samples, 0.02%)</title><rect x="1081.6" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1084.6" y="478.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (2 samples, 0.02%)</title><rect x="1082.0" y="915.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.0" y="926.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (2 samples, 0.02%)</title><rect x="1082.0" y="899.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.0" y="910.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (2 samples, 0.02%)</title><rect x="1082.0" y="883.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1085.0" y="894.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (2 samples, 0.02%)</title><rect x="1082.0" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.0" y="878.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (2 samples, 0.02%)</title><rect x="1082.0" y="851.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.0" y="862.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (2 samples, 0.02%)</title><rect x="1082.0" y="835.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1085.0" y="846.0"></text>
</g>
<g>
<title>thread_start (854 samples, 9.13%)</title><rect x="1082.3" y="915.0" width="107.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1085.3" y="926.0">thread_start</text>
</g>
<g>
<title>_pthread_start (854 samples, 9.13%)</title><rect x="1082.3" y="899.0" width="107.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1085.3" y="910.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (854 samples, 9.13%)</title><rect x="1082.3" y="883.0" width="107.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1085.3" y="894.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (854 samples, 9.13%)</title><rect x="1082.3" y="867.0" width="107.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1085.3" y="878.0">java_start(Th..</text>
</g>
<g>
<title>GCTaskThread::run() (181 samples, 1.93%)</title><rect x="1082.3" y="851.0" width="22.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.3" y="862.0">G..</text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (49 samples, 0.52%)</title><rect x="1082.4" y="835.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.4" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (39 samples, 0.42%)</title><rect x="1082.5" y="819.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.5" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (39 samples, 0.42%)</title><rect x="1082.5" y="803.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.5" y="814.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (36 samples, 0.38%)</title><rect x="1082.5" y="787.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1085.5" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (36 samples, 0.38%)</title><rect x="1082.5" y="771.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.5" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (33 samples, 0.35%)</title><rect x="1082.5" y="755.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1085.5" y="766.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.03%)</title><rect x="1086.7" y="755.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1089.7" y="766.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="1086.7" y="739.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1089.7" y="750.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.03%)</title><rect x="1086.7" y="723.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1089.7" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.02%)</title><rect x="1087.2" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.2" y="798.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.02%)</title><rect x="1087.2" y="771.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1090.2" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (7 samples, 0.07%)</title><rect x="1087.7" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="830.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.07%)</title><rect x="1087.7" y="803.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (3 samples, 0.03%)</title><rect x="1088.6" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.6" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.02%)</title><rect x="1088.7" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.7" y="830.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.02%)</title><rect x="1088.7" y="803.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1091.7" y="814.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (9 samples, 0.10%)</title><rect x="1089.1" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.1" y="846.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (9 samples, 0.10%)</title><rect x="1089.1" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.1" y="830.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (3 samples, 0.03%)</title><rect x="1089.5" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.5" y="814.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="1089.5" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.5" y="798.0"></text>
</g>
<g>
<title>ObjectStartArray::offset_addr_for_block(signed char*) const (2 samples, 0.02%)</title><rect x="1090.0" y="803.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.0" y="814.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (25 samples, 0.27%)</title><rect x="1090.2" y="835.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.2" y="846.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (22 samples, 0.24%)</title><rect x="1090.2" y="819.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.2" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (16 samples, 0.17%)</title><rect x="1090.4" y="803.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.4" y="814.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (16 samples, 0.17%)</title><rect x="1090.4" y="787.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.4" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (5 samples, 0.05%)</title><rect x="1092.4" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.4" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (4 samples, 0.04%)</title><rect x="1092.4" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.4" y="798.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (65 samples, 0.69%)</title><rect x="1093.4" y="835.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.4" y="846.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (2 samples, 0.02%)</title><rect x="1093.5" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.5" y="830.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (2 samples, 0.02%)</title><rect x="1093.5" y="803.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="814.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (2 samples, 0.02%)</title><rect x="1093.8" y="819.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.8" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (33 samples, 0.35%)</title><rect x="1094.0" y="819.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.0" y="830.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (19 samples, 0.20%)</title><rect x="1095.8" y="803.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1098.8" y="814.0"></text>
</g>
<g>
<title>SpinPause (27 samples, 0.29%)</title><rect x="1098.2" y="819.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1101.2" y="830.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (17 samples, 0.18%)</title><rect x="1101.6" y="835.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (14 samples, 0.15%)</title><rect x="1101.7" y="819.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.7" y="830.0"></text>
</g>
<g>
<title>CodeBlobToOopClosure::do_nmethod(nmethod*) (2 samples, 0.02%)</title><rect x="1101.7" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.7" y="814.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.02%)</title><rect x="1101.7" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.7" y="798.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (2 samples, 0.02%)</title><rect x="1101.7" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="782.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (8 samples, 0.09%)</title><rect x="1102.2" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.2" y="814.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.02%)</title><rect x="1102.3" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.3" y="798.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_and_type_ref_index_at(int, bool) (2 samples, 0.02%)</title><rect x="1102.3" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.3" y="782.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (5 samples, 0.05%)</title><rect x="1102.6" y="787.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (5 samples, 0.05%)</title><rect x="1102.6" y="771.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.6" y="782.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (5 samples, 0.05%)</title><rect x="1102.6" y="755.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.6" y="766.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (2 samples, 0.02%)</title><rect x="1102.8" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.8" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.02%)</title><rect x="1102.8" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.8" y="734.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.02%)</title><rect x="1103.2" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.2" y="814.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (2 samples, 0.02%)</title><rect x="1103.5" y="819.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.5" y="830.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (2 samples, 0.02%)</title><rect x="1103.5" y="803.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.5" y="814.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (2 samples, 0.02%)</title><rect x="1103.5" y="787.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.5" y="798.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.02%)</title><rect x="1103.5" y="771.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.5" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1103.5" y="755.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (11 samples, 0.12%)</title><rect x="1103.7" y="835.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.7" y="846.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (8 samples, 0.09%)</title><rect x="1103.7" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.7" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.09%)</title><rect x="1103.7" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.09%)</title><rect x="1103.7" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.7" y="798.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (8 samples, 0.09%)</title><rect x="1103.7" y="771.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1106.7" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (8 samples, 0.09%)</title><rect x="1103.7" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.7" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.07%)</title><rect x="1103.7" y="739.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1106.7" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1104.7" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.7" y="830.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1104.7" y="803.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1107.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (505 samples, 5.40%)</title><rect x="1105.1" y="851.0" width="63.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.1" y="862.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (505 samples, 5.40%)</title><rect x="1105.1" y="835.0" width="63.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.1" y="846.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (486 samples, 5.20%)</title><rect x="1105.1" y="819.0" width="61.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.1" y="830.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (478 samples, 5.11%)</title><rect x="1105.1" y="803.0" width="60.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.1" y="814.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (442 samples, 4.72%)</title><rect x="1105.1" y="787.0" width="55.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.1" y="798.0">C2Com..</text>
</g>
<g>
<title>Arena::~Arena() (3 samples, 0.03%)</title><rect x="1105.1" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.1" y="782.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (3 samples, 0.03%)</title><rect x="1105.1" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.1" y="766.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1105.1" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.1" y="750.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="1105.1" y="723.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1108.1" y="734.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="1105.1" y="707.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1108.1" y="718.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.03%)</title><rect x="1105.1" y="691.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1108.1" y="702.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (439 samples, 4.69%)</title><rect x="1105.5" y="771.0" width="55.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.5" y="782.0">Compi..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (5 samples, 0.05%)</title><rect x="1105.5" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.5" y="766.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (5 samples, 0.05%)</title><rect x="1105.5" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.5" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (5 samples, 0.05%)</title><rect x="1105.5" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (5 samples, 0.05%)</title><rect x="1105.5" y="707.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (5 samples, 0.05%)</title><rect x="1105.5" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (5 samples, 0.05%)</title><rect x="1105.5" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (5 samples, 0.05%)</title><rect x="1105.5" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1105.5" y="643.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.03%)</title><rect x="1105.7" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.02%)</title><rect x="1105.7" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.02%)</title><rect x="1105.7" y="611.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1105.7" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1105.7" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="590.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (215 samples, 2.30%)</title><rect x="1106.1" y="755.0" width="27.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.1" y="766.0">C..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.10%)</title><rect x="1106.1" y="739.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (6 samples, 0.06%)</title><rect x="1106.1" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.1" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 0.02%)</title><rect x="1106.4" y="707.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.4" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.03%)</title><rect x="1106.9" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.9" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.03%)</title><rect x="1106.9" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.9" y="718.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.02%)</title><rect x="1106.9" y="691.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.9" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.06%)</title><rect x="1107.3" y="739.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.3" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.02%)</title><rect x="1107.4" y="723.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.4" y="734.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 0.02%)</title><rect x="1107.6" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.6" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.12%)</title><rect x="1108.0" y="739.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.0" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.10%)</title><rect x="1108.3" y="723.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.3" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.02%)</title><rect x="1108.4" y="707.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.4" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.02%)</title><rect x="1108.8" y="707.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.8" y="718.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.02%)</title><rect x="1109.1" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.1" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (12 samples, 0.13%)</title><rect x="1109.5" y="739.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (11 samples, 0.12%)</title><rect x="1109.5" y="723.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.05%)</title><rect x="1109.7" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (3 samples, 0.03%)</title><rect x="1109.7" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.02%)</title><rect x="1110.0" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.02%)</title><rect x="1110.3" y="707.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.02%)</title><rect x="1110.5" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (175 samples, 1.87%)</title><rect x="1111.2" y="739.0" width="22.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.2" y="750.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.03%)</title><rect x="1112.0" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (13 samples, 0.14%)</title><rect x="1112.4" y="723.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1112.6" y="707.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.03%)</title><rect x="1112.8" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (7 samples, 0.07%)</title><rect x="1113.2" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1113.2" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.09%)</title><rect x="1114.1" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.1" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1114.2" y="707.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.2" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.04%)</title><rect x="1114.6" y="707.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="1114.6" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (17 samples, 0.18%)</title><rect x="1115.1" y="723.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (42 samples, 0.45%)</title><rect x="1117.2" y="723.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1119.2" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (19 samples, 0.20%)</title><rect x="1119.6" y="707.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1119.6" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (9 samples, 0.10%)</title><rect x="1119.9" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1121.0" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.0" y="702.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (6 samples, 0.06%)</title><rect x="1121.3" y="691.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.3" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.03%)</title><rect x="1122.1" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (17 samples, 0.18%)</title><rect x="1122.8" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.8" y="734.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.02%)</title><rect x="1123.8" y="707.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.8" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.03%)</title><rect x="1124.2" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.2" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.03%)</title><rect x="1124.2" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.2" y="702.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (2 samples, 0.02%)</title><rect x="1124.5" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (15 samples, 0.16%)</title><rect x="1125.0" y="723.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.0" y="734.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.02%)</title><rect x="1125.9" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.9" y="718.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1125.9" y="691.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1128.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.05%)</title><rect x="1126.2" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.09%)</title><rect x="1126.9" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.9" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.07%)</title><rect x="1127.1" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.1" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.06%)</title><rect x="1127.2" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.03%)</title><rect x="1127.4" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.4" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1127.4" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.4" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (8 samples, 0.09%)</title><rect x="1127.9" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (6 samples, 0.06%)</title><rect x="1128.2" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1128.4" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.4" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1128.7" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.7" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.03%)</title><rect x="1129.0" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.02%)</title><rect x="1129.0" y="707.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.0" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.04%)</title><rect x="1129.3" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.3" y="734.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.02%)</title><rect x="1129.5" y="707.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.5" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (24 samples, 0.26%)</title><rect x="1129.8" y="723.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.8" y="734.0"></text>
</g>
<g>
<title>IndexSet::clear() (2 samples, 0.02%)</title><rect x="1131.1" y="707.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.03%)</title><rect x="1131.3" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="718.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (2 samples, 0.02%)</title><rect x="1131.9" y="707.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.9" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.05%)</title><rect x="1132.1" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1132.1" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.1" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1132.5" y="691.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.5" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (189 samples, 2.02%)</title><rect x="1133.4" y="755.0" width="23.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="766.0">C..</text>
</g>
<g>
<title>PhaseCCP::analyze() (5 samples, 0.05%)</title><rect x="1133.5" y="739.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (164 samples, 1.75%)</title><rect x="1134.4" y="739.0" width="20.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.4" y="750.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.02%)</title><rect x="1134.8" y="723.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.07%)</title><rect x="1135.1" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.07%)</title><rect x="1136.0" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1136.4" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (110 samples, 1.18%)</title><rect x="1136.9" y="723.0" width="13.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (98 samples, 1.05%)</title><rect x="1138.3" y="707.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (90 samples, 0.96%)</title><rect x="1138.8" y="691.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.03%)</title><rect x="1139.3" y="675.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.02%)</title><rect x="1139.7" y="675.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1139.9" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1139.9" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (78 samples, 0.83%)</title><rect x="1140.3" y="675.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (13 samples, 0.14%)</title><rect x="1142.2" y="659.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (50 samples, 0.53%)</title><rect x="1143.8" y="659.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (2 samples, 0.02%)</title><rect x="1150.1" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (2 samples, 0.02%)</title><rect x="1150.4" y="691.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.04%)</title><rect x="1150.8" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (13 samples, 0.14%)</title><rect x="1151.4" y="723.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.04%)</title><rect x="1152.5" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 0.13%)</title><rect x="1153.0" y="723.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.13%)</title><rect x="1153.0" y="707.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.0" y="718.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (2 samples, 0.02%)</title><rect x="1153.3" y="691.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (2 samples, 0.02%)</title><rect x="1153.3" y="675.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.3" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 0.02%)</title><rect x="1153.3" y="659.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.02%)</title><rect x="1153.9" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.9" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.02%)</title><rect x="1154.7" y="723.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="734.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.02%)</title><rect x="1154.7" y="707.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.02%)</title><rect x="1154.7" y="691.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="702.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.02%)</title><rect x="1154.7" y="675.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1157.7" y="686.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.02%)</title><rect x="1154.7" y="659.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1157.7" y="670.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.02%)</title><rect x="1154.7" y="643.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1157.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.02%)</title><rect x="1155.1" y="739.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.02%)</title><rect x="1155.1" y="723.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.10%)</title><rect x="1155.3" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.10%)</title><rect x="1155.3" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.3" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1155.8" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1156.2" y="707.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="718.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.03%)</title><rect x="1156.7" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.03%)</title><rect x="1156.7" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="734.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.02%)</title><rect x="1156.7" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.20%)</title><rect x="1157.3" y="755.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.20%)</title><rect x="1157.3" y="739.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.19%)</title><rect x="1157.5" y="723.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.19%)</title><rect x="1157.5" y="707.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 0.19%)</title><rect x="1157.5" y="691.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.19%)</title><rect x="1157.5" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.16%)</title><rect x="1157.6" y="659.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.16%)</title><rect x="1157.6" y="643.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.14%)</title><rect x="1157.7" y="627.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.14%)</title><rect x="1157.7" y="611.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.14%)</title><rect x="1157.7" y="595.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.13%)</title><rect x="1157.7" y="579.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.09%)</title><rect x="1158.1" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.09%)</title><rect x="1158.1" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.09%)</title><rect x="1158.1" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1158.2" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.07%)</title><rect x="1158.2" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.07%)</title><rect x="1158.2" y="483.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1158.3" y="467.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1158.3" y="451.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1158.5" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1158.5" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1158.5" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1158.5" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1158.6" y="371.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1158.6" y="355.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1158.6" y="339.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1158.6" y="323.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1158.6" y="307.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1158.6" y="291.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1158.6" y="275.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1158.6" y="259.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1158.6" y="243.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1158.6" y="227.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1158.6" y="211.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1158.6" y="195.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1158.6" y="179.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1158.6" y="163.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1158.6" y="147.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1158.6" y="131.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1158.6" y="115.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1158.6" y="99.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.6" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1158.6" y="83.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.6" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1158.6" y="67.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1158.6" y="51.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1158.6" y="35.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1159.5" y="659.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1159.5" y="643.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1159.5" y="627.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1159.5" y="611.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1159.5" y="595.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1159.5" y="579.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1159.5" y="563.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1159.5" y="547.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1159.5" y="531.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1159.5" y="515.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1159.5" y="499.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1159.5" y="483.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1159.5" y="467.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1159.5" y="451.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1159.5" y="435.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1159.5" y="419.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1159.5" y="403.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1159.5" y="387.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1159.5" y="371.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (6 samples, 0.06%)</title><rect x="1159.7" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.7" y="766.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (5 samples, 0.05%)</title><rect x="1159.7" y="739.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.02%)</title><rect x="1160.1" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.02%)</title><rect x="1160.6" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (2 samples, 0.02%)</title><rect x="1160.6" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="750.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (3 samples, 0.03%)</title><rect x="1160.9" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="798.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (3 samples, 0.03%)</title><rect x="1160.9" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="782.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (3 samples, 0.03%)</title><rect x="1160.9" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (2 samples, 0.02%)</title><rect x="1160.9" y="739.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (2 samples, 0.02%)</title><rect x="1160.9" y="723.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>vsnprintf (2 samples, 0.02%)</title><rect x="1160.9" y="707.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>_vsnprintf (2 samples, 0.02%)</title><rect x="1160.9" y="691.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>__v2printf (2 samples, 0.02%)</title><rect x="1160.9" y="675.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (26 samples, 0.28%)</title><rect x="1161.2" y="787.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (26 samples, 0.28%)</title><rect x="1161.2" y="771.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (26 samples, 0.28%)</title><rect x="1161.2" y="755.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (22 samples, 0.24%)</title><rect x="1161.2" y="739.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (13 samples, 0.14%)</title><rect x="1161.2" y="723.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (13 samples, 0.14%)</title><rect x="1161.2" y="707.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (13 samples, 0.14%)</title><rect x="1161.2" y="691.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (13 samples, 0.14%)</title><rect x="1161.2" y="675.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (11 samples, 0.12%)</title><rect x="1161.2" y="659.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (9 samples, 0.10%)</title><rect x="1161.2" y="643.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.07%)</title><rect x="1161.2" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1161.2" y="611.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1161.2" y="595.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1161.4" y="579.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="1161.4" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="1161.4" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.02%)</title><rect x="1161.5" y="531.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1161.5" y="515.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.02%)</title><rect x="1161.9" y="611.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1161.9" y="595.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1161.9" y="579.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.9" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.02%)</title><rect x="1162.9" y="723.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (2 samples, 0.02%)</title><rect x="1162.9" y="707.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 0.06%)</title><rect x="1163.1" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="734.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (4 samples, 0.04%)</title><rect x="1163.1" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (4 samples, 0.04%)</title><rect x="1163.1" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (3 samples, 0.03%)</title><rect x="1163.3" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.02%)</title><rect x="1163.6" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="718.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 0.03%)</title><rect x="1164.1" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1164.1" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="734.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.02%)</title><rect x="1164.3" y="707.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1164.5" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="798.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1164.5" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1164.5" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="766.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="1164.5" y="739.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1167.5" y="750.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="1164.5" y="723.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1167.5" y="734.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.03%)</title><rect x="1164.5" y="707.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1167.5" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (2 samples, 0.02%)</title><rect x="1165.2" y="787.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.2" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.02%)</title><rect x="1165.2" y="771.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.02%)</title><rect x="1165.2" y="755.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1165.2" y="739.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="750.0"></text>
</g>
<g>
<title>CompileQueue::get() (8 samples, 0.09%)</title><rect x="1165.4" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.09%)</title><rect x="1165.4" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.09%)</title><rect x="1165.4" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.07%)</title><rect x="1165.5" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.07%)</title><rect x="1165.5" y="739.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (18 samples, 0.19%)</title><rect x="1166.4" y="819.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.4" y="830.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (9 samples, 0.10%)</title><rect x="1166.4" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.4" y="814.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (9 samples, 0.10%)</title><rect x="1166.4" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.4" y="798.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (3 samples, 0.03%)</title><rect x="1166.4" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="782.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (3 samples, 0.03%)</title><rect x="1166.4" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.4" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.02%)</title><rect x="1166.5" y="739.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.02%)</title><rect x="1166.5" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="734.0"></text>
</g>
<g>
<title>ScopeDesc::stream_at(int) const (2 samples, 0.02%)</title><rect x="1166.5" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="718.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (6 samples, 0.06%)</title><rect x="1166.8" y="771.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.03%)</title><rect x="1166.9" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.02%)</title><rect x="1167.0" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.0" y="750.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (2 samples, 0.02%)</title><rect x="1167.3" y="755.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.10%)</title><rect x="1167.5" y="803.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.10%)</title><rect x="1167.5" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="798.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (9 samples, 0.10%)</title><rect x="1167.5" y="771.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1170.5" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (9 samples, 0.10%)</title><rect x="1167.5" y="755.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.10%)</title><rect x="1167.5" y="739.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1170.5" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (109 samples, 1.17%)</title><rect x="1168.8" y="851.0" width="13.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.8" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (109 samples, 1.17%)</title><rect x="1168.8" y="835.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.8" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.02%)</title><rect x="1169.1" y="819.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (105 samples, 1.12%)</title><rect x="1169.3" y="819.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (105 samples, 1.12%)</title><rect x="1169.3" y="803.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.3" y="814.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (104 samples, 1.11%)</title><rect x="1169.4" y="787.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (104 samples, 1.11%)</title><rect x="1169.4" y="771.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="782.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (104 samples, 1.11%)</title><rect x="1169.4" y="755.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="766.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (102 samples, 1.09%)</title><rect x="1169.4" y="739.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="750.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="1169.4" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (2 samples, 0.02%)</title><rect x="1169.8" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="734.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (18 samples, 0.19%)</title><rect x="1170.1" y="723.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.1" y="734.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (18 samples, 0.19%)</title><rect x="1170.1" y="707.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (18 samples, 0.19%)</title><rect x="1170.1" y="691.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (18 samples, 0.19%)</title><rect x="1170.1" y="675.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="686.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (18 samples, 0.19%)</title><rect x="1170.1" y="659.0" width="2.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1173.1" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (18 samples, 0.19%)</title><rect x="1170.1" y="643.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.19%)</title><rect x="1170.1" y="627.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1173.1" y="638.0"></text>
</g>
<g>
<title>GCTaskManager::task_idle_workers() (2 samples, 0.02%)</title><rect x="1172.3" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.3" y="734.0"></text>
</g>
<g>
<title>GCTaskManager::add_list(GCTaskQueue*) (2 samples, 0.02%)</title><rect x="1172.3" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.3" y="718.0"></text>
</g>
<g>
<title>MemoryService::gc_begin(bool, bool, bool, bool, bool) (2 samples, 0.02%)</title><rect x="1172.7" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="734.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (2 samples, 0.02%)</title><rect x="1172.7" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (3 samples, 0.03%)</title><rect x="1173.1" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="734.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (2 samples, 0.02%)</title><rect x="1173.2" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="718.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (69 samples, 0.74%)</title><rect x="1173.5" y="723.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (68 samples, 0.73%)</title><rect x="1173.6" y="707.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="718.0"></text>
</g>
<g>
<title>WatcherThread::run() (59 samples, 0.63%)</title><rect x="1182.6" y="851.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.03%)</title><rect x="1182.6" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>StatSampler::sample_data(PerfDataList*) (3 samples, 0.03%)</title><rect x="1182.6" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (56 samples, 0.60%)</title><rect x="1182.9" y="835.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (56 samples, 0.60%)</title><rect x="1182.9" y="819.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (54 samples, 0.58%)</title><rect x="1182.9" y="803.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (52 samples, 0.56%)</title><rect x="1183.1" y="787.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>__gettimeofday (3 samples, 0.03%)</title><rect x="1183.2" y="771.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (47 samples, 0.50%)</title><rect x="1183.6" y="771.0" width="5.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
</g>
</svg>

