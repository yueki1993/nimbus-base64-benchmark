<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (9,937 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.03%)</title><rect x="10.0" y="851.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,563 samples, 86.17%)</title><rect x="10.4" y="851.0" width="1016.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,563 samples, 86.17%)</title><rect x="10.4" y="835.0" width="1016.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.4" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,563 samples, 86.17%)</title><rect x="10.4" y="819.0" width="1016.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,562 samples, 86.16%)</title><rect x="10.4" y="803.0" width="1016.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.4" y="814.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,562 samples, 86.16%)</title><rect x="10.4" y="787.0" width="1016.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="798.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,562 samples, 86.16%)</title><rect x="10.4" y="771.0" width="1016.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="782.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,562 samples, 86.16%)</title><rect x="10.4" y="755.0" width="1016.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="766.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,562 samples, 86.16%)</title><rect x="10.4" y="739.0" width="1016.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.4" y="750.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,562 samples, 86.16%)</title><rect x="10.4" y="723.0" width="1016.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="734.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,562 samples, 86.16%)</title><rect x="10.4" y="707.0" width="1016.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="718.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,562 samples, 86.16%)</title><rect x="10.4" y="691.0" width="1016.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.4" y="702.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,562 samples, 86.16%)</title><rect x="10.4" y="675.0" width="1016.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="686.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_large_Throughput (8,562 samples, 86.16%)</title><rect x="10.4" y="659.0" width="1016.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="670.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_la..</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_large_thrpt_jmhStub (8,299 samples, 83.52%)</title><rect x="10.4" y="643.0" width="985.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="654.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_large_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patch..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_large (8,288 samples, 83.41%)</title><rect x="11.7" y="627.0" width="984.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.7" y="638.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_large</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,286 samples, 83.39%)</title><rect x="11.8" y="611.0" width="983.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="622.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (3,452 samples, 34.74%)</title><rect x="11.9" y="595.0" width="409.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.9" y="606.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (134 samples, 1.35%)</title><rect x="12.1" y="579.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (134 samples, 1.35%)</title><rect x="12.1" y="563.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (134 samples, 1.35%)</title><rect x="12.1" y="547.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.06%)</title><rect x="13.0" y="531.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.0" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="13.1" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (5 samples, 0.05%)</title><rect x="13.1" y="499.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (16 samples, 0.16%)</title><rect x="13.7" y="531.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.7" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 0.16%)</title><rect x="13.7" y="515.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.7" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (13 samples, 0.13%)</title><rect x="13.9" y="499.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="16.9" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="15.8" y="531.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="18.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (89 samples, 0.90%)</title><rect x="16.2" y="531.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (9 samples, 0.09%)</title><rect x="26.7" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (9 samples, 0.09%)</title><rect x="26.7" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (9 samples, 0.09%)</title><rect x="26.7" y="499.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.7" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (9 samples, 0.09%)</title><rect x="26.7" y="483.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.7" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="27.1" y="467.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.1" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="27.3" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (3,316 samples, 33.37%)</title><rect x="28.0" y="579.0" width="393.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.0" y="590.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (25 samples, 0.25%)</title><rect x="28.5" y="563.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.5" y="574.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (24 samples, 0.24%)</title><rect x="28.6" y="547.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="558.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (19 samples, 0.19%)</title><rect x="28.9" y="531.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.9" y="542.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (17 samples, 0.17%)</title><rect x="29.1" y="515.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.1" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (17 samples, 0.17%)</title><rect x="29.1" y="499.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.1" y="510.0"></text>
</g>
<g>
<title>java/security/Provider.getService (13 samples, 0.13%)</title><rect x="29.4" y="483.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.4" y="494.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (5 samples, 0.05%)</title><rect x="29.4" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.4" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (5 samples, 0.05%)</title><rect x="29.4" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (5 samples, 0.05%)</title><rect x="29.4" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.4" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.matches (4 samples, 0.04%)</title><rect x="29.9" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.9" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.04%)</title><rect x="30.4" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="30.4" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.4" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (3 samples, 0.03%)</title><rect x="30.4" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.4" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (80 samples, 0.81%)</title><rect x="31.5" y="563.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (80 samples, 0.81%)</title><rect x="31.5" y="547.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (40 samples, 0.40%)</title><rect x="34.5" y="531.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (13 samples, 0.13%)</title><rect x="39.2" y="531.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (13 samples, 0.13%)</title><rect x="39.2" y="515.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (3 samples, 0.03%)</title><rect x="39.9" y="499.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="40.3" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.3" y="510.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (58 samples, 0.58%)</title><rect x="41.1" y="563.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (58 samples, 0.58%)</title><rect x="41.1" y="547.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.1" y="558.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (57 samples, 0.57%)</title><rect x="41.2" y="531.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.2" y="542.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (14 samples, 0.14%)</title><rect x="41.9" y="515.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.07%)</title><rect x="42.8" y="499.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="42.8" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="43.2" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="43.2" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="478.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (32 samples, 0.32%)</title><rect x="43.8" y="515.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.8" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (30 samples, 0.30%)</title><rect x="44.1" y="499.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (5 samples, 0.05%)</title><rect x="44.3" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.3" y="494.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.getCallerClass (3 samples, 0.03%)</title><rect x="44.6" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.6" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (22 samples, 0.22%)</title><rect x="44.9" y="483.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.9" y="494.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (20 samples, 0.20%)</title><rect x="45.0" y="467.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.0" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (20 samples, 0.20%)</title><rect x="45.0" y="451.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.0" y="462.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (19 samples, 0.19%)</title><rect x="45.1" y="435.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (19 samples, 0.19%)</title><rect x="45.1" y="419.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.1" y="430.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (19 samples, 0.19%)</title><rect x="45.1" y="403.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="414.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (19 samples, 0.19%)</title><rect x="45.1" y="387.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="398.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (5 samples, 0.05%)</title><rect x="45.1" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.05%)</title><rect x="45.1" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.1" y="366.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (14 samples, 0.14%)</title><rect x="45.7" y="371.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.7" y="382.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (5 samples, 0.05%)</title><rect x="45.7" y="355.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.7" y="366.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (4 samples, 0.04%)</title><rect x="45.7" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.7" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (8 samples, 0.08%)</title><rect x="46.3" y="355.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.3" y="366.0"></text>
</g>
<g>
<title>java/security/Provider.getService (5 samples, 0.05%)</title><rect x="46.3" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.3" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="46.9" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.9" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="46.9" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.9" y="334.0"></text>
</g>
<g>
<title>java/security/Signature.access$200 (3 samples, 0.03%)</title><rect x="47.6" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.6" y="526.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (3 samples, 0.03%)</title><rect x="47.6" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.03%)</title><rect x="47.6" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="47.6" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.6" y="478.0"></text>
</g>
<g>
<title>java/security/Signature.update (1,391 samples, 14.00%)</title><rect x="48.0" y="563.0" width="165.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.0" y="574.0">java/security/Signatu..</text>
</g>
<g>
<title>java/security/Signature.update (1,390 samples, 13.99%)</title><rect x="48.1" y="547.0" width="165.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.1" y="558.0">java/security/Signatu..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (1,390 samples, 13.99%)</title><rect x="48.1" y="531.0" width="165.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.1" y="542.0">java/security/Signatu..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (1,390 samples, 13.99%)</title><rect x="48.1" y="515.0" width="165.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.1" y="526.0">sun/security/rsa/RSAS..</text>
</g>
<g>
<title>java/security/MessageDigest.update (1,389 samples, 13.98%)</title><rect x="48.1" y="499.0" width="165.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="510.0">java/security/Message..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1,389 samples, 13.98%)</title><rect x="48.1" y="483.0" width="165.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.1" y="494.0">java/security/Message..</text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.03%)</title><rect x="48.4" y="467.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="51.4" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1,383 samples, 13.92%)</title><rect x="48.8" y="467.0" width="164.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="478.0">sun/security/provider..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (1,383 samples, 13.92%)</title><rect x="48.8" y="451.0" width="164.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.8" y="462.0">sun/security/provider..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (1,378 samples, 13.87%)</title><rect x="49.4" y="435.0" width="163.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.4" y="446.0">sun/security/provider..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (58 samples, 0.58%)</title><rect x="192.8" y="419.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.8" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (113 samples, 1.14%)</title><rect x="199.6" y="419.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.6" y="430.0"></text>
</g>
<g>
<title>java/security/Signature.verify (1,757 samples, 17.68%)</title><rect x="213.2" y="563.0" width="208.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="574.0">java/security/Signature.ver..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (1,757 samples, 17.68%)</title><rect x="213.2" y="547.0" width="208.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.2" y="558.0">java/security/Signature$Del..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (1,757 samples, 17.68%)</title><rect x="213.2" y="531.0" width="208.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.2" y="542.0">sun/security/rsa/RSASignatu..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (1,436 samples, 14.45%)</title><rect x="213.9" y="515.0" width="170.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.9" y="526.0">sun/security/rsa/RSACo..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (1,436 samples, 14.45%)</title><rect x="213.9" y="499.0" width="170.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.9" y="510.0">sun/security/rsa/RSACo..</text>
</g>
<g>
<title>java/math/BigInteger.modPow (1,423 samples, 14.32%)</title><rect x="213.9" y="483.0" width="169.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.9" y="494.0">java/math/BigInteger.m..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (1,415 samples, 14.24%)</title><rect x="214.7" y="467.0" width="168.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="217.7" y="478.0">java/math/BigInteger.o..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (63 samples, 0.63%)</title><rect x="215.6" y="451.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="218.6" y="462.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (59 samples, 0.59%)</title><rect x="216.0" y="435.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="219.0" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (1,010 samples, 10.16%)</title><rect x="223.0" y="451.0" width="120.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="226.0" y="462.0">SharedRuntime::..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (987 samples, 9.93%)</title><rect x="225.8" y="435.0" width="117.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="228.8" y="446.0">montgomery_squ..</text>
</g>
<g>
<title>java/math/BigInteger.leftShift (4 samples, 0.04%)</title><rect x="343.3" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.3" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (70 samples, 0.70%)</title><rect x="343.8" y="451.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.8" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (66 samples, 0.66%)</title><rect x="344.3" y="435.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.3" y="446.0"></text>
</g>
<g>
<title>mulAdd (63 samples, 0.63%)</title><rect x="344.6" y="419.0" width="7.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="347.6" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (76 samples, 0.76%)</title><rect x="352.1" y="451.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.1" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (75 samples, 0.75%)</title><rect x="352.2" y="435.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.2" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (75 samples, 0.75%)</title><rect x="352.2" y="419.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="355.2" y="430.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (70 samples, 0.70%)</title><rect x="352.8" y="403.0" width="8.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="355.8" y="414.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (167 samples, 1.68%)</title><rect x="361.1" y="451.0" width="19.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.1" y="462.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (167 samples, 1.68%)</title><rect x="361.1" y="435.0" width="19.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.1" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (167 samples, 1.68%)</title><rect x="361.1" y="419.0" width="19.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.1" y="430.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.clear (3 samples, 0.03%)</title><rect x="361.1" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="364.1" y="414.0"></text>
</g>
<g>
<title>arrayof_jint_fill (3 samples, 0.03%)</title><rect x="361.1" y="387.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="364.1" y="398.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (163 samples, 1.64%)</title><rect x="361.5" y="403.0" width="19.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.5" y="414.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (3 samples, 0.03%)</title><rect x="363.6" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="366.6" y="398.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (137 samples, 1.38%)</title><rect x="364.0" y="387.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="367.0" y="398.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (3 samples, 0.03%)</title><rect x="380.3" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="383.3" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="381.6" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.6" y="462.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="382.0" y="451.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="385.0" y="462.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (8 samples, 0.08%)</title><rect x="382.9" y="483.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.9" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.05%)</title><rect x="383.1" y="467.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.1" y="478.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (5 samples, 0.05%)</title><rect x="383.8" y="483.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.8" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (244 samples, 2.46%)</title><rect x="384.5" y="515.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.5" y="526.0">su..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (244 samples, 2.46%)</title><rect x="384.5" y="499.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.5" y="510.0">su..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (236 samples, 2.37%)</title><rect x="385.4" y="483.0" width="28.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.4" y="494.0">ja..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (236 samples, 2.37%)</title><rect x="385.4" y="467.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.4" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (236 samples, 2.37%)</title><rect x="385.4" y="451.0" width="28.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.4" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (236 samples, 2.37%)</title><rect x="385.4" y="435.0" width="28.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.4" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (236 samples, 2.37%)</title><rect x="385.4" y="419.0" width="28.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.4" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (233 samples, 2.34%)</title><rect x="385.7" y="403.0" width="27.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.7" y="414.0">j..</text>
</g>
<g>
<title>JVM_FillInStackTrace (4 samples, 0.04%)</title><rect x="386.6" y="387.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="389.6" y="398.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (219 samples, 2.20%)</title><rect x="387.0" y="387.0" width="26.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="390.0" y="398.0">J..</text>
</g>
<g>
<title>JVM_FillInStackTrace (214 samples, 2.15%)</title><rect x="387.1" y="371.0" width="25.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="390.1" y="382.0">J..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="387.1" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="390.1" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.05%)</title><rect x="388.2" y="355.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="391.2" y="366.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (200 samples, 2.01%)</title><rect x="388.8" y="355.0" width="23.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="391.8" y="366.0">j..</text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (183 samples, 1.84%)</title><rect x="390.2" y="339.0" width="21.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="393.2" y="350.0">j..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (18 samples, 0.18%)</title><rect x="394.5" y="323.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="397.5" y="334.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (14 samples, 0.14%)</title><rect x="394.6" y="307.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="397.6" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (5 samples, 0.05%)</title><rect x="394.6" y="291.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="397.6" y="302.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.03%)</title><rect x="395.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="398.2" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="395.6" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="398.6" y="302.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (46 samples, 0.46%)</title><rect x="396.9" y="323.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="399.9" y="334.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (3 samples, 0.03%)</title><rect x="402.0" y="307.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="405.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (6 samples, 0.06%)</title><rect x="402.9" y="323.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="405.9" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="402.9" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="405.9" y="318.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="403.3" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="406.3" y="318.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (5 samples, 0.05%)</title><rect x="403.6" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="406.6" y="334.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (15 samples, 0.15%)</title><rect x="404.2" y="323.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="407.2" y="334.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (38 samples, 0.38%)</title><rect x="406.9" y="323.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="409.9" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (17 samples, 0.17%)</title><rect x="407.1" y="307.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="410.1" y="318.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="407.1" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="410.1" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (11 samples, 0.11%)</title><rect x="407.4" y="291.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="410.4" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (9 samples, 0.09%)</title><rect x="407.4" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="410.4" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (9 samples, 0.09%)</title><rect x="407.4" y="259.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="410.4" y="270.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (3 samples, 0.03%)</title><rect x="408.8" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="411.8" y="302.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (10 samples, 0.10%)</title><rect x="409.1" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="412.1" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.10%)</title><rect x="409.1" y="291.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="412.1" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (10 samples, 0.10%)</title><rect x="409.1" y="275.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="412.1" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (10 samples, 0.10%)</title><rect x="409.1" y="259.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="412.1" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (9 samples, 0.09%)</title><rect x="410.3" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.3" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.08%)</title><rect x="410.3" y="291.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="413.3" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.08%)</title><rect x="410.3" y="275.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.3" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.04%)</title><rect x="410.8" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="413.8" y="270.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (3 samples, 0.03%)</title><rect x="411.6" y="323.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="414.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.03%)</title><rect x="412.6" y="371.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="415.6" y="382.0"></text>
</g>
<g>
<title>jsqrt (3 samples, 0.03%)</title><rect x="413.0" y="387.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="416.0" y="398.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (56 samples, 0.56%)</title><rect x="413.5" y="515.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.5" y="526.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (14 samples, 0.14%)</title><rect x="413.7" y="499.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.7" y="510.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (12 samples, 0.12%)</title><rect x="414.0" y="483.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.0" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (6 samples, 0.06%)</title><rect x="414.7" y="467.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.7" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (6 samples, 0.06%)</title><rect x="414.7" y="451.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.7" y="462.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (6 samples, 0.06%)</title><rect x="414.7" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.7" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (17 samples, 0.17%)</title><rect x="415.4" y="499.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.4" y="510.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (23 samples, 0.23%)</title><rect x="417.4" y="499.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.4" y="510.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (8 samples, 0.08%)</title><rect x="418.3" y="483.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.3" y="494.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (8 samples, 0.08%)</title><rect x="418.3" y="467.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.3" y="478.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (3 samples, 0.03%)</title><rect x="418.6" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Object.clone (3 samples, 0.03%)</title><rect x="418.6" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.6" y="446.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (6 samples, 0.06%)</title><rect x="419.2" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.2" y="494.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (6 samples, 0.06%)</title><rect x="419.2" y="467.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.2" y="478.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (14 samples, 0.14%)</title><rect x="420.2" y="515.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.2" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (14 samples, 0.14%)</title><rect x="420.2" y="499.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.2" y="510.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (14 samples, 0.14%)</title><rect x="420.2" y="483.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.2" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (14 samples, 0.14%)</title><rect x="420.2" y="467.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.2" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (14 samples, 0.14%)</title><rect x="420.2" y="451.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="423.2" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (14 samples, 0.14%)</title><rect x="420.2" y="435.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.2" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (9 samples, 0.09%)</title><rect x="420.7" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.7" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (10 samples, 0.10%)</title><rect x="421.8" y="595.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.8" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (10 samples, 0.10%)</title><rect x="421.8" y="579.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.8" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (353 samples, 3.55%)</title><rect x="423.0" y="595.0" width="41.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.0" y="606.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (67 samples, 0.67%)</title><rect x="423.0" y="579.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.&lt;init&gt; (5 samples, 0.05%)</title><rect x="423.2" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.&lt;init&gt; (5 samples, 0.05%)</title><rect x="423.2" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.04%)</title><rect x="423.4" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (23 samples, 0.23%)</title><rect x="423.8" y="563.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (17 samples, 0.17%)</title><rect x="424.5" y="547.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (34 samples, 0.34%)</title><rect x="426.6" y="563.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="429.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (28 samples, 0.28%)</title><rect x="426.8" y="547.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.8" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (23 samples, 0.23%)</title><rect x="427.2" y="531.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.07%)</title><rect x="428.8" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="431.8" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.05%)</title><rect x="428.8" y="499.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="431.8" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.04%)</title><rect x="428.9" y="483.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.9" y="494.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.03%)</title><rect x="429.1" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="432.1" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="430.1" y="547.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="433.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (247 samples, 2.49%)</title><rect x="431.1" y="579.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.1" y="590.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (247 samples, 2.49%)</title><rect x="431.1" y="563.0" width="29.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.1" y="574.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (244 samples, 2.46%)</title><rect x="431.2" y="547.0" width="29.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.2" y="558.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (204 samples, 2.05%)</title><rect x="431.9" y="531.0" width="24.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.9" y="542.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (135 samples, 1.36%)</title><rect x="431.9" y="515.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (62 samples, 0.62%)</title><rect x="431.9" y="499.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (4 samples, 0.04%)</title><rect x="433.6" y="483.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="436.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (34 samples, 0.34%)</title><rect x="434.4" y="483.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.4" y="494.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (32 samples, 0.32%)</title><rect x="434.6" y="467.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.6" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (32 samples, 0.32%)</title><rect x="434.6" y="451.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="437.6" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (5 samples, 0.05%)</title><rect x="434.9" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="437.9" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="435.1" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.1" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (14 samples, 0.14%)</title><rect x="435.5" y="435.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.5" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (11 samples, 0.11%)</title><rect x="435.7" y="419.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.7" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (9 samples, 0.09%)</title><rect x="435.8" y="403.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.8" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (6 samples, 0.06%)</title><rect x="435.9" y="387.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="438.9" y="398.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="436.2" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.2" y="382.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (7 samples, 0.07%)</title><rect x="437.1" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="437.1" y="419.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="437.1" y="403.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.1" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (3 samples, 0.03%)</title><rect x="438.0" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="438.0" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="438.0" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.04%)</title><rect x="438.7" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="438.7" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="438.7" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.7" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (73 samples, 0.73%)</title><rect x="439.3" y="499.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.3" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (73 samples, 0.73%)</title><rect x="439.3" y="483.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.3" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (17 samples, 0.17%)</title><rect x="439.3" y="467.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (17 samples, 0.17%)</title><rect x="439.3" y="451.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (17 samples, 0.17%)</title><rect x="439.3" y="435.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.3" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (56 samples, 0.56%)</title><rect x="441.3" y="467.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (56 samples, 0.56%)</title><rect x="441.3" y="451.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.3" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (46 samples, 0.46%)</title><rect x="442.5" y="435.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.5" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (19 samples, 0.19%)</title><rect x="445.7" y="419.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.7" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (18 samples, 0.18%)</title><rect x="445.8" y="403.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.8" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (12 samples, 0.12%)</title><rect x="446.0" y="387.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.0" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (12 samples, 0.12%)</title><rect x="446.0" y="371.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.0" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (7 samples, 0.07%)</title><rect x="446.0" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.0" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="446.5" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.5" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (4 samples, 0.04%)</title><rect x="447.5" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.5" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="447.5" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="447.5" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="447.5" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.5" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="447.5" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.5" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (69 samples, 0.69%)</title><rect x="447.9" y="515.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (30 samples, 0.30%)</title><rect x="447.9" y="499.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (30 samples, 0.30%)</title><rect x="447.9" y="483.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="450.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (13 samples, 0.13%)</title><rect x="448.8" y="467.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 0.09%)</title><rect x="450.3" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.3" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (9 samples, 0.09%)</title><rect x="450.3" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (38 samples, 0.38%)</title><rect x="451.5" y="499.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (38 samples, 0.38%)</title><rect x="451.5" y="483.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.5" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (38 samples, 0.38%)</title><rect x="451.5" y="467.0" width="4.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="454.5" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (11 samples, 0.11%)</title><rect x="456.1" y="531.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.04%)</title><rect x="456.3" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.3" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.04%)</title><rect x="456.3" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (6 samples, 0.06%)</title><rect x="456.7" y="515.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.06%)</title><rect x="456.7" y="499.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.7" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="457.0" y="483.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="460.0" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (22 samples, 0.22%)</title><rect x="457.6" y="531.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="460.6" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (38 samples, 0.38%)</title><rect x="460.4" y="579.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="463.4" y="590.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (4,467 samples, 44.95%)</title><rect x="464.9" y="595.0" width="530.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="467.9" y="606.0">com/yueki/SignedJwtBenchmark.getClaimsSet1</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (4,467 samples, 44.95%)</title><rect x="464.9" y="579.0" width="530.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.9" y="590.0">com/nimbusds/jwt/SignedJWT.getJWTClaimsSet</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (4,412 samples, 44.40%)</title><rect x="464.9" y="563.0" width="523.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.9" y="574.0">com/nimbusds/jose/Payload.toJSONObject</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (2,922 samples, 29.41%)</title><rect x="464.9" y="547.0" width="347.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.9" y="558.0">com/nimbusds/jose/Payload.toString</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (2,921 samples, 29.40%)</title><rect x="465.0" y="531.0" width="346.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.0" y="542.0">com/nimbusds/jose/util/Base64.decodeToString</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (2,852 samples, 28.70%)</title><rect x="465.0" y="515.0" width="338.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.0" y="526.0">com/nimbusds/jose/util/Base64.decode</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (2,852 samples, 28.70%)</title><rect x="465.0" y="499.0" width="338.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.0" y="510.0">com/nimbusds/jose/util/Base64Codec.decode</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (1,738 samples, 17.49%)</title><rect x="576.4" y="483.0" width="206.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="579.4" y="494.0">com/nimbusds/jose/util/Base..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (66 samples, 0.66%)</title><rect x="775.0" y="467.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (147 samples, 1.48%)</title><rect x="782.8" y="483.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (147 samples, 1.48%)</title><rect x="782.8" y="467.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (20 samples, 0.20%)</title><rect x="786.4" y="451.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.4" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 0.19%)</title><rect x="786.4" y="435.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="789.4" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (18 samples, 0.18%)</title><rect x="786.5" y="419.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="789.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (95 samples, 0.96%)</title><rect x="788.8" y="451.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.8" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="800.4" y="483.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.4" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (24 samples, 0.24%)</title><rect x="800.9" y="483.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="803.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (69 samples, 0.69%)</title><rect x="803.7" y="515.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (63 samples, 0.63%)</title><rect x="804.4" y="499.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (63 samples, 0.63%)</title><rect x="804.4" y="483.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (48 samples, 0.48%)</title><rect x="806.0" y="467.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.0" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (1,490 samples, 14.99%)</title><rect x="811.9" y="547.0" width="176.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.9" y="558.0">com/nimbusds/jose/util/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (1,489 samples, 14.98%)</title><rect x="812.0" y="531.0" width="176.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="815.0" y="542.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (1,489 samples, 14.98%)</title><rect x="812.0" y="515.0" width="176.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.0" y="526.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (1,489 samples, 14.98%)</title><rect x="812.0" y="499.0" width="176.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.0" y="510.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (1,489 samples, 14.98%)</title><rect x="812.0" y="483.0" width="176.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.0" y="494.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (1,487 samples, 14.96%)</title><rect x="812.3" y="467.0" width="176.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.3" y="478.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (1,486 samples, 14.95%)</title><rect x="812.4" y="451.0" width="176.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.4" y="462.0">com/nimbusds/jose/shade..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (1,462 samples, 14.71%)</title><rect x="812.9" y="435.0" width="173.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.9" y="446.0">com/nimbusds/jose/shad..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (10 samples, 0.10%)</title><rect x="813.2" y="419.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (6 samples, 0.06%)</title><rect x="813.2" y="403.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.2" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (1,449 samples, 14.58%)</title><rect x="814.4" y="419.0" width="172.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.4" y="430.0">com/nimbusds/jose/shad..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (1,442 samples, 14.51%)</title><rect x="814.4" y="403.0" width="171.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="817.4" y="414.0">com/nimbusds/jose/shad..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (493 samples, 4.96%)</title><rect x="864.3" y="387.0" width="58.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.3" y="398.0">com/ni..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.10%)</title><rect x="921.4" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.4" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.03%)</title><rect x="921.4" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.4" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.07%)</title><rect x="921.7" y="355.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (7 samples, 0.07%)</title><rect x="921.7" y="339.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="924.7" y="350.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (4 samples, 0.04%)</title><rect x="922.1" y="323.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="925.1" y="334.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (4 samples, 0.04%)</title><rect x="922.1" y="307.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.1" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (42 samples, 0.42%)</title><rect x="922.8" y="387.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="925.8" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (40 samples, 0.40%)</title><rect x="923.1" y="371.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="926.1" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (487 samples, 4.90%)</title><rect x="927.8" y="387.0" width="57.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="930.8" y="398.0">com/ni..</text>
</g>
<g>
<title>java/lang/String.charAt (282 samples, 2.84%)</title><rect x="952.1" y="371.0" width="33.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="955.1" y="382.0">ja..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (44 samples, 0.44%)</title><rect x="980.4" y="355.0" width="5.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="983.4" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="985.6" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="988.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="985.6" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="985.6" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.6" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (8 samples, 0.08%)</title><rect x="986.5" y="435.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.5" y="446.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="986.5" y="419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="986.5" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.5" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="986.8" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.8" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="986.8" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.10%)</title><rect x="987.7" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="990.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.08%)</title><rect x="987.9" y="419.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="990.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.04%)</title><rect x="988.2" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="991.2" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (55 samples, 0.55%)</title><rect x="988.8" y="563.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (3 samples, 0.03%)</title><rect x="989.1" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="992.1" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="989.1" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="992.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (9 samples, 0.09%)</title><rect x="989.4" y="547.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (6 samples, 0.06%)</title><rect x="989.8" y="531.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="990.0" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="990.0" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (14 samples, 0.14%)</title><rect x="990.5" y="547.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (14 samples, 0.14%)</title><rect x="990.5" y="531.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (14 samples, 0.14%)</title><rect x="990.5" y="515.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (13 samples, 0.13%)</title><rect x="990.5" y="499.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (12 samples, 0.12%)</title><rect x="990.6" y="483.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="993.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="991.2" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="994.2" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="991.2" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="994.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (8 samples, 0.08%)</title><rect x="992.2" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="995.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.08%)</title><rect x="992.2" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.07%)</title><rect x="992.3" y="515.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="995.3" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (9 samples, 0.09%)</title><rect x="993.4" y="547.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="996.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.09%)</title><rect x="993.4" y="531.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="996.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.09%)</title><rect x="993.4" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="996.4" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (6 samples, 0.06%)</title><rect x="994.4" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.06%)</title><rect x="994.4" y="531.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="997.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.06%)</title><rect x="994.4" y="515.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.4" y="526.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (3 samples, 0.03%)</title><rect x="995.4" y="595.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="998.4" y="606.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_large_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (262 samples, 2.64%)</title><rect x="995.8" y="643.0" width="31.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="998.8" y="654.0">co..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (261 samples, 2.63%)</title><rect x="995.8" y="627.0" width="31.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="998.8" y="638.0">co..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (202 samples, 2.03%)</title><rect x="996.2" y="611.0" width="24.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.2" y="622.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="996.6" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="999.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="996.6" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="999.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (167 samples, 1.68%)</title><rect x="996.9" y="595.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="999.9" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (167 samples, 1.68%)</title><rect x="996.9" y="579.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="999.9" y="590.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (10 samples, 0.10%)</title><rect x="997.0" y="563.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.0" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (9 samples, 0.09%)</title><rect x="997.2" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1000.2" y="558.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (9 samples, 0.09%)</title><rect x="997.2" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.2" y="542.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (8 samples, 0.08%)</title><rect x="997.3" y="515.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1000.3" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (7 samples, 0.07%)</title><rect x="997.4" y="499.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1000.4" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.05%)</title><rect x="997.6" y="483.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1000.6" y="494.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.05%)</title><rect x="997.6" y="467.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1000.6" y="478.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.03%)</title><rect x="997.9" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.9" y="462.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance0 (3 samples, 0.03%)</title><rect x="997.9" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1000.9" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (3 samples, 0.03%)</title><rect x="997.9" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.9" y="430.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (3 samples, 0.03%)</title><rect x="997.9" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.9" y="414.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (3 samples, 0.03%)</title><rect x="997.9" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1000.9" y="398.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (3 samples, 0.03%)</title><rect x="997.9" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.9" y="382.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.03%)</title><rect x="997.9" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1000.9" y="366.0"></text>
</g>
<g>
<title>java/security/Signature.sign (154 samples, 1.55%)</title><rect x="998.2" y="563.0" width="18.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1001.2" y="574.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (154 samples, 1.55%)</title><rect x="998.2" y="547.0" width="18.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.2" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (154 samples, 1.55%)</title><rect x="998.2" y="531.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1001.2" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (153 samples, 1.54%)</title><rect x="998.2" y="515.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1001.2" y="526.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (153 samples, 1.54%)</title><rect x="998.2" y="499.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.2" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (148 samples, 1.49%)</title><rect x="998.3" y="483.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1001.3" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (146 samples, 1.47%)</title><rect x="998.6" y="467.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1001.6" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (14 samples, 0.14%)</title><rect x="998.9" y="451.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.9" y="462.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (12 samples, 0.12%)</title><rect x="999.2" y="435.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1002.2" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (123 samples, 1.24%)</title><rect x="1000.6" y="451.0" width="14.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.6" y="462.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (118 samples, 1.19%)</title><rect x="1000.8" y="435.0" width="14.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1003.8" y="446.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="1014.8" y="435.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1017.8" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (3 samples, 0.03%)</title><rect x="1015.6" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1018.6" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="1015.6" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1018.6" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (3 samples, 0.03%)</title><rect x="1015.6" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.6" y="430.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="1015.6" y="403.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1018.6" y="414.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1015.9" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (16 samples, 0.16%)</title><rect x="1017.0" y="595.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (16 samples, 0.16%)</title><rect x="1017.0" y="579.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.0" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (16 samples, 0.16%)</title><rect x="1017.0" y="563.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.0" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (8 samples, 0.08%)</title><rect x="1017.0" y="547.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.0" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (6 samples, 0.06%)</title><rect x="1017.0" y="531.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.0" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (6 samples, 0.06%)</title><rect x="1017.0" y="515.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.0" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (6 samples, 0.06%)</title><rect x="1017.0" y="499.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (6 samples, 0.06%)</title><rect x="1017.0" y="483.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.0" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1017.1" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1020.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.init (3 samples, 0.03%)</title><rect x="1017.1" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.1" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (8 samples, 0.08%)</title><rect x="1017.9" y="547.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (3 samples, 0.03%)</title><rect x="1017.9" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1020.9" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (3 samples, 0.03%)</title><rect x="1017.9" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (3 samples, 0.03%)</title><rect x="1017.9" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.9" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="1017.9" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1020.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="1017.9" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (5 samples, 0.05%)</title><rect x="1018.3" y="531.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1021.3" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (5 samples, 0.05%)</title><rect x="1018.3" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1021.3" y="526.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (8 samples, 0.08%)</title><rect x="1019.2" y="595.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.2" y="606.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (8 samples, 0.08%)</title><rect x="1019.2" y="579.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1022.2" y="590.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (8 samples, 0.08%)</title><rect x="1019.2" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.2" y="574.0"></text>
</g>
<g>
<title>java/util/Random.nextInt (3 samples, 0.03%)</title><rect x="1019.8" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1022.8" y="558.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (55 samples, 0.55%)</title><rect x="1020.2" y="611.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.2" y="622.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (55 samples, 0.55%)</title><rect x="1020.2" y="595.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.2" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (55 samples, 0.55%)</title><rect x="1020.2" y="579.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.2" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (52 samples, 0.52%)</title><rect x="1020.4" y="563.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.4" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (52 samples, 0.52%)</title><rect x="1020.4" y="547.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1023.4" y="558.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (5 samples, 0.05%)</title><rect x="1020.5" y="531.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.5" y="542.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1020.5" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.5" y="526.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (4 samples, 0.04%)</title><rect x="1020.7" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.7" y="510.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (4 samples, 0.04%)</title><rect x="1020.7" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1023.7" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (4 samples, 0.04%)</title><rect x="1020.7" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.7" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="1020.7" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.7" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (4 samples, 0.04%)</title><rect x="1020.7" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.7" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (3 samples, 0.03%)</title><rect x="1020.7" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.7" y="430.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (45 samples, 0.45%)</title><rect x="1021.3" y="531.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (45 samples, 0.45%)</title><rect x="1021.3" y="515.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (12 samples, 0.12%)</title><rect x="1021.3" y="499.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1024.3" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (12 samples, 0.12%)</title><rect x="1021.3" y="483.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.3" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (6 samples, 0.06%)</title><rect x="1021.4" y="467.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.4" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (6 samples, 0.06%)</title><rect x="1021.4" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.4" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (6 samples, 0.06%)</title><rect x="1021.4" y="435.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1024.4" y="446.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (5 samples, 0.05%)</title><rect x="1021.4" y="419.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.4" y="430.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (5 samples, 0.05%)</title><rect x="1021.4" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.4" y="414.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (5 samples, 0.05%)</title><rect x="1021.4" y="387.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.4" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (33 samples, 0.33%)</title><rect x="1022.7" y="499.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.7" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (32 samples, 0.32%)</title><rect x="1022.8" y="483.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.8" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (32 samples, 0.32%)</title><rect x="1022.8" y="467.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1025.8" y="478.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (10 samples, 0.10%)</title><rect x="1023.5" y="451.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1026.5" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (10 samples, 0.10%)</title><rect x="1023.5" y="435.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.5" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (5 samples, 0.05%)</title><rect x="1023.5" y="419.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1026.5" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (5 samples, 0.05%)</title><rect x="1024.1" y="419.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1027.1" y="430.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (15 samples, 0.15%)</title><rect x="1024.7" y="451.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.7" y="462.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (3 samples, 0.03%)</title><rect x="1024.7" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.7" y="446.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (12 samples, 0.12%)</title><rect x="1025.1" y="435.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.1" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (12 samples, 0.12%)</title><rect x="1025.1" y="419.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.1" y="430.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (12 samples, 0.12%)</title><rect x="1025.1" y="403.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1028.1" y="414.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (3 samples, 0.03%)</title><rect x="1027.2" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1030.2" y="862.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (3 samples, 0.03%)</title><rect x="1027.2" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.2" y="846.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (3 samples, 0.03%)</title><rect x="1027.2" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.2" y="830.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (3 samples, 0.03%)</title><rect x="1027.2" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1030.2" y="814.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="1027.2" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1030.2" y="798.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="1027.2" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1030.2" y="782.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler.runIteration (3 samples, 0.03%)</title><rect x="1027.2" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.2" y="766.0"></text>
</g>
<g>
<title>thread_start (1,368 samples, 13.77%)</title><rect x="1027.6" y="851.0" width="162.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1030.6" y="862.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,368 samples, 13.77%)</title><rect x="1027.6" y="835.0" width="162.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1030.6" y="846.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,368 samples, 13.77%)</title><rect x="1027.6" y="819.0" width="162.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1030.6" y="830.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (1,368 samples, 13.77%)</title><rect x="1027.6" y="803.0" width="162.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1030.6" y="814.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (218 samples, 2.19%)</title><rect x="1027.6" y="787.0" width="25.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.6" y="798.0">G..</text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (55 samples, 0.55%)</title><rect x="1027.6" y="771.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.6" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (44 samples, 0.44%)</title><rect x="1027.8" y="755.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.8" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (44 samples, 0.44%)</title><rect x="1027.8" y="739.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.8" y="750.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (39 samples, 0.39%)</title><rect x="1027.9" y="723.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1030.9" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (38 samples, 0.38%)</title><rect x="1028.0" y="707.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.0" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (36 samples, 0.36%)</title><rect x="1028.0" y="691.0" width="4.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1031.0" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1032.7" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.7" y="734.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.04%)</title><rect x="1033.1" y="755.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1036.1" y="766.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.04%)</title><rect x="1033.1" y="739.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1036.1" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (4 samples, 0.04%)</title><rect x="1033.6" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.6" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="1033.6" y="739.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1036.6" y="750.0"></text>
</g>
<g>
<title>GCTaskManager::note_completion(unsigned int) (3 samples, 0.03%)</title><rect x="1034.1" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.1" y="782.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (15 samples, 0.15%)</title><rect x="1034.4" y="771.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.4" y="782.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (15 samples, 0.15%)</title><rect x="1034.4" y="755.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1037.4" y="766.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (7 samples, 0.07%)</title><rect x="1035.0" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (7 samples, 0.07%)</title><rect x="1035.0" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1038.0" y="734.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (18 samples, 0.18%)</title><rect x="1036.2" y="771.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.2" y="782.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (16 samples, 0.16%)</title><rect x="1036.2" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.2" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (14 samples, 0.14%)</title><rect x="1036.2" y="739.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.2" y="750.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (13 samples, 0.13%)</title><rect x="1036.3" y="723.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.3" y="734.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (97 samples, 0.98%)</title><rect x="1038.4" y="771.0" width="11.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1041.4" y="782.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (7 samples, 0.07%)</title><rect x="1038.5" y="755.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.5" y="766.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (7 samples, 0.07%)</title><rect x="1038.5" y="739.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.5" y="750.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (7 samples, 0.07%)</title><rect x="1038.5" y="723.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.5" y="734.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (4 samples, 0.04%)</title><rect x="1038.6" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.6" y="718.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="1038.6" y="691.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1041.6" y="702.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (69 samples, 0.69%)</title><rect x="1039.4" y="755.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.4" y="766.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (60 samples, 0.60%)</title><rect x="1040.5" y="739.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1043.5" y="750.0"></text>
</g>
<g>
<title>SpinPause (19 samples, 0.19%)</title><rect x="1047.6" y="755.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1050.6" y="766.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (20 samples, 0.20%)</title><rect x="1049.9" y="771.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.9" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (19 samples, 0.19%)</title><rect x="1049.9" y="755.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.9" y="766.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (5 samples, 0.05%)</title><rect x="1050.1" y="739.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.1" y="750.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (5 samples, 0.05%)</title><rect x="1050.1" y="723.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.1" y="734.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (10 samples, 0.10%)</title><rect x="1050.7" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.7" y="750.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (10 samples, 0.10%)</title><rect x="1052.3" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.3" y="782.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (7 samples, 0.07%)</title><rect x="1052.3" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.3" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.07%)</title><rect x="1052.3" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.3" y="750.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.07%)</title><rect x="1052.3" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.3" y="734.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (7 samples, 0.07%)</title><rect x="1052.3" y="707.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1055.3" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (7 samples, 0.07%)</title><rect x="1052.3" y="691.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.3" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1052.3" y="675.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1055.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::run() (1,029 samples, 10.36%)</title><rect x="1053.4" y="787.0" width="122.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.4" y="798.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,029 samples, 10.36%)</title><rect x="1053.4" y="771.0" width="122.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.4" y="782.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,019 samples, 10.25%)</title><rect x="1053.4" y="755.0" width="121.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.4" y="766.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (997 samples, 10.03%)</title><rect x="1053.6" y="739.0" width="118.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.6" y="750.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (956 samples, 9.62%)</title><rect x="1053.6" y="723.0" width="113.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.6" y="734.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (956 samples, 9.62%)</title><rect x="1053.6" y="707.0" width="113.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.6" y="718.0">Compile::Compi..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (8 samples, 0.08%)</title><rect x="1053.6" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.6" y="702.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (8 samples, 0.08%)</title><rect x="1053.6" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (8 samples, 0.08%)</title><rect x="1053.6" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (8 samples, 0.08%)</title><rect x="1053.6" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (8 samples, 0.08%)</title><rect x="1053.6" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (7 samples, 0.07%)</title><rect x="1053.6" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (6 samples, 0.06%)</title><rect x="1053.7" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (4 samples, 0.04%)</title><rect x="1053.9" y="579.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (3 samples, 0.03%)</title><rect x="1054.0" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.0" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.03%)</title><rect x="1054.0" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1054.0" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.0" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1054.0" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.0" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (406 samples, 4.09%)</title><rect x="1054.5" y="691.0" width="48.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1057.5" y="702.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (14 samples, 0.14%)</title><rect x="1054.5" y="675.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.5" y="686.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (8 samples, 0.08%)</title><rect x="1054.5" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.5" y="670.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.05%)</title><rect x="1055.5" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.5" y="670.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 0.04%)</title><rect x="1055.6" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.6" y="654.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.09%)</title><rect x="1056.2" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.2" y="686.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (3 samples, 0.03%)</title><rect x="1056.6" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.6" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (33 samples, 0.33%)</title><rect x="1057.2" y="675.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.2" y="686.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.04%)</title><rect x="1057.4" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.4" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (27 samples, 0.27%)</title><rect x="1057.8" y="659.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.8" y="670.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.07%)</title><rect x="1058.2" y="643.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.2" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (15 samples, 0.15%)</title><rect x="1059.1" y="643.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.1" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (6 samples, 0.06%)</title><rect x="1059.3" y="627.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.3" y="638.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1059.3" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.3" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (7 samples, 0.07%)</title><rect x="1060.0" y="627.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.0" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.03%)</title><rect x="1060.0" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (22 samples, 0.22%)</title><rect x="1061.5" y="675.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (19 samples, 0.19%)</title><rect x="1061.9" y="659.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.9" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1062.0" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.0" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (10 samples, 0.10%)</title><rect x="1062.5" y="643.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.5" y="654.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (4 samples, 0.04%)</title><rect x="1062.6" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.6" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (4 samples, 0.04%)</title><rect x="1063.1" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.1" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1063.7" y="643.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (322 samples, 3.24%)</title><rect x="1064.2" y="675.0" width="38.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.2" y="686.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (8 samples, 0.08%)</title><rect x="1064.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (23 samples, 0.23%)</title><rect x="1065.8" y="659.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.8" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1066.3" y="643.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.3" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (13 samples, 0.13%)</title><rect x="1066.9" y="643.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.9" y="654.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (7 samples, 0.07%)</title><rect x="1066.9" y="627.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.9" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.03%)</title><rect x="1067.7" y="627.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.7" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1068.0" y="627.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (17 samples, 0.17%)</title><rect x="1068.5" y="659.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.5" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (12 samples, 0.12%)</title><rect x="1069.1" y="643.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.1" y="654.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="1069.2" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.2" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.06%)</title><rect x="1069.8" y="627.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (35 samples, 0.35%)</title><rect x="1070.5" y="659.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.5" y="670.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.03%)</title><rect x="1073.9" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (74 samples, 0.74%)</title><rect x="1074.7" y="659.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.7" y="670.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (7 samples, 0.07%)</title><rect x="1076.4" y="643.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.4" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.05%)</title><rect x="1077.4" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.4" y="654.0"></text>
</g>
<g>
<title>Node::rematerialize() const (4 samples, 0.04%)</title><rect x="1078.5" y="643.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.5" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (29 samples, 0.29%)</title><rect x="1079.0" y="643.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.0" y="654.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (10 samples, 0.10%)</title><rect x="1079.3" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.3" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1080.5" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.5" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.05%)</title><rect x="1080.9" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.9" y="638.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (8 samples, 0.08%)</title><rect x="1081.5" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.5" y="638.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.05%)</title><rect x="1082.5" y="643.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.5" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (7 samples, 0.07%)</title><rect x="1083.5" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.05%)</title><rect x="1083.7" y="643.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (30 samples, 0.30%)</title><rect x="1084.3" y="659.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.3" y="670.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (10 samples, 0.10%)</title><rect x="1086.6" y="643.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.6" y="654.0"></text>
</g>
<g>
<title>RegMask::Size() const (10 samples, 0.10%)</title><rect x="1086.6" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (5 samples, 0.05%)</title><rect x="1087.9" y="659.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (24 samples, 0.24%)</title><rect x="1088.5" y="659.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.13%)</title><rect x="1089.4" y="643.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.4" y="654.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (24 samples, 0.24%)</title><rect x="1091.4" y="659.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.4" y="670.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (4 samples, 0.04%)</title><rect x="1091.4" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.4" y="654.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (4 samples, 0.04%)</title><rect x="1091.4" y="627.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.4" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (3 samples, 0.03%)</title><rect x="1091.6" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.6" y="622.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1091.6" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.6" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (20 samples, 0.20%)</title><rect x="1091.9" y="643.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.9" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.03%)</title><rect x="1091.9" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.9" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (17 samples, 0.17%)</title><rect x="1092.3" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.3" y="638.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.06%)</title><rect x="1092.4" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.4" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.06%)</title><rect x="1093.5" y="611.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.5" y="622.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.05%)</title><rect x="1093.5" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.5" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (13 samples, 0.13%)</title><rect x="1094.3" y="659.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.3" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (13 samples, 0.13%)</title><rect x="1094.3" y="643.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.3" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.05%)</title><rect x="1095.0" y="627.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.0" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (10 samples, 0.10%)</title><rect x="1095.8" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.8" y="670.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1096.1" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1096.4" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.4" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (11 samples, 0.11%)</title><rect x="1097.0" y="659.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.0" y="670.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.07%)</title><rect x="1097.1" y="643.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.1" y="654.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1098.0" y="643.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1101.0" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (32 samples, 0.32%)</title><rect x="1098.3" y="659.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.3" y="670.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (14 samples, 0.14%)</title><rect x="1100.5" y="643.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.5" y="654.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1100.9" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.9" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1101.4" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.4" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (496 samples, 4.99%)</title><rect x="1102.7" y="691.0" width="58.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.7" y="702.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (4 samples, 0.04%)</title><rect x="1102.7" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.7" y="686.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (4 samples, 0.04%)</title><rect x="1102.7" y="659.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.07%)</title><rect x="1103.4" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.07%)</title><rect x="1103.4" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.4" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (11 samples, 0.11%)</title><rect x="1104.4" y="675.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (436 samples, 4.39%)</title><rect x="1105.9" y="675.0" width="51.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.9" y="686.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (7 samples, 0.07%)</title><rect x="1106.3" y="659.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.3" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1106.3" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.3" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1106.3" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.3" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1106.4" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.4" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1106.8" y="643.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (18 samples, 0.18%)</title><rect x="1107.7" y="659.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 0.15%)</title><rect x="1109.8" y="659.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (6 samples, 0.06%)</title><rect x="1110.4" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.04%)</title><rect x="1110.7" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.03%)</title><rect x="1110.8" y="611.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.03%)</title><rect x="1111.2" y="643.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (346 samples, 3.48%)</title><rect x="1111.6" y="659.0" width="41.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.6" y="670.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (335 samples, 3.37%)</title><rect x="1112.8" y="643.0" width="39.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.8" y="654.0">Pha..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (6 samples, 0.06%)</title><rect x="1113.1" y="627.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (319 samples, 3.21%)</title><rect x="1113.8" y="627.0" width="37.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.8" y="638.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.04%)</title><rect x="1116.9" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (5 samples, 0.05%)</title><rect x="1117.3" y="611.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.05%)</title><rect x="1117.3" y="595.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (281 samples, 2.83%)</title><rect x="1118.3" y="611.0" width="33.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.3" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (44 samples, 0.44%)</title><rect x="1123.9" y="595.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (190 samples, 1.91%)</title><rect x="1129.1" y="595.0" width="22.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.1" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (3 samples, 0.03%)</title><rect x="1151.6" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.03%)</title><rect x="1151.6" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (4 samples, 0.04%)</title><rect x="1152.0" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.07%)</title><rect x="1153.0" y="659.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.03%)</title><rect x="1153.4" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (10 samples, 0.10%)</title><rect x="1154.0" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (4 samples, 0.04%)</title><rect x="1154.6" y="643.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 0.16%)</title><rect x="1155.2" y="659.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 0.14%)</title><rect x="1155.3" y="643.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.03%)</title><rect x="1156.2" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1156.5" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (26 samples, 0.26%)</title><rect x="1157.7" y="675.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 0.23%)</title><rect x="1157.8" y="659.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="670.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1158.2" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="654.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1159.4" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="654.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.03%)</title><rect x="1159.5" y="627.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1159.8" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.8" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.03%)</title><rect x="1161.0" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="686.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (4 samples, 0.04%)</title><rect x="1162.0" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (4 samples, 0.04%)</title><rect x="1162.0" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (3 samples, 0.03%)</title><rect x="1162.0" y="659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (33 samples, 0.33%)</title><rect x="1162.5" y="691.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (33 samples, 0.33%)</title><rect x="1162.5" y="675.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (32 samples, 0.32%)</title><rect x="1162.5" y="659.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (32 samples, 0.32%)</title><rect x="1162.5" y="643.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (32 samples, 0.32%)</title><rect x="1162.5" y="627.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (32 samples, 0.32%)</title><rect x="1162.5" y="611.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (22 samples, 0.22%)</title><rect x="1162.8" y="595.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (22 samples, 0.22%)</title><rect x="1162.8" y="579.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (20 samples, 0.20%)</title><rect x="1162.8" y="563.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (20 samples, 0.20%)</title><rect x="1162.8" y="547.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (20 samples, 0.20%)</title><rect x="1162.8" y="531.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.18%)</title><rect x="1162.9" y="515.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 0.17%)</title><rect x="1163.0" y="499.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 0.17%)</title><rect x="1163.0" y="483.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.16%)</title><rect x="1163.0" y="467.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.16%)</title><rect x="1163.0" y="451.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 0.16%)</title><rect x="1163.0" y="435.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.14%)</title><rect x="1163.0" y="419.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.14%)</title><rect x="1163.0" y="403.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.14%)</title><rect x="1163.0" y="387.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.14%)</title><rect x="1163.0" y="371.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.14%)</title><rect x="1163.0" y="355.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.14%)</title><rect x="1163.0" y="339.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.11%)</title><rect x="1163.2" y="323.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.10%)</title><rect x="1163.3" y="307.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.10%)</title><rect x="1163.3" y="291.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.10%)</title><rect x="1163.3" y="275.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.10%)</title><rect x="1163.3" y="259.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.10%)</title><rect x="1163.3" y="243.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.09%)</title><rect x="1163.4" y="227.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1163.4" y="211.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1163.4" y="195.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1163.4" y="179.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1163.4" y="163.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1163.4" y="147.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1163.4" y="131.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1163.4" y="115.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1163.4" y="99.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1163.4" y="83.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1163.4" y="67.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1163.4" y="51.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1163.4" y="35.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1165.4" y="595.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1165.4" y="579.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1165.4" y="563.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1165.4" y="547.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1165.4" y="531.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1165.4" y="515.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1165.4" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1165.4" y="483.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1165.4" y="467.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1165.4" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1165.4" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1165.4" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1165.4" y="403.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1165.4" y="387.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1165.4" y="371.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1165.4" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1165.4" y="339.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1165.4" y="323.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1165.4" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1165.4" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1165.4" y="275.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1165.4" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1165.4" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1165.4" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1165.4" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1165.4" y="195.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1165.4" y="179.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1165.4" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1165.4" y="147.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1165.4" y="131.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1165.4" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="126.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (4 samples, 0.04%)</title><rect x="1166.6" y="691.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.6" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (37 samples, 0.37%)</title><rect x="1167.2" y="723.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (37 samples, 0.37%)</title><rect x="1167.2" y="707.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (37 samples, 0.37%)</title><rect x="1167.2" y="691.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (31 samples, 0.31%)</title><rect x="1167.2" y="675.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="686.0"></text>
</g>
<g>
<title>Compilation::build_hir() (18 samples, 0.18%)</title><rect x="1167.2" y="659.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="670.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (16 samples, 0.16%)</title><rect x="1167.2" y="643.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.2" y="654.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (16 samples, 0.16%)</title><rect x="1167.2" y="627.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (16 samples, 0.16%)</title><rect x="1167.2" y="611.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (13 samples, 0.13%)</title><rect x="1167.3" y="595.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (13 samples, 0.13%)</title><rect x="1167.3" y="579.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (12 samples, 0.12%)</title><rect x="1167.4" y="563.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (8 samples, 0.08%)</title><rect x="1167.6" y="547.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1167.9" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1167.9" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="1167.9" y="499.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.03%)</title><rect x="1169.3" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (8 samples, 0.08%)</title><rect x="1169.7" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="670.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.06%)</title><rect x="1169.9" y="643.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.03%)</title><rect x="1170.2" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="638.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (5 samples, 0.05%)</title><rect x="1171.0" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (4 samples, 0.04%)</title><rect x="1171.1" y="659.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="670.0"></text>
</g>
<g>
<title>CompileQueue::get() (19 samples, 0.19%)</title><rect x="1172.0" y="739.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (17 samples, 0.17%)</title><rect x="1172.0" y="723.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (17 samples, 0.17%)</title><rect x="1172.0" y="707.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.15%)</title><rect x="1172.1" y="691.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.15%)</title><rect x="1172.1" y="675.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (10 samples, 0.10%)</title><rect x="1174.4" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="766.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (6 samples, 0.06%)</title><rect x="1174.4" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="750.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (6 samples, 0.06%)</title><rect x="1174.4" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="734.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (5 samples, 0.05%)</title><rect x="1174.6" y="707.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1177.6" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.04%)</title><rect x="1175.2" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.04%)</title><rect x="1175.2" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="1175.3" y="707.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="1175.3" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1175.3" y="675.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>VMThread::run() (58 samples, 0.58%)</title><rect x="1175.6" y="787.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>VMThread::loop() (58 samples, 0.58%)</title><rect x="1175.6" y="771.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.06%)</title><rect x="1175.6" y="755.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.06%)</title><rect x="1175.6" y="739.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.06%)</title><rect x="1175.6" y="723.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.06%)</title><rect x="1175.6" y="707.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (51 samples, 0.51%)</title><rect x="1176.5" y="755.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="766.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (51 samples, 0.51%)</title><rect x="1176.5" y="739.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="750.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (51 samples, 0.51%)</title><rect x="1176.5" y="723.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.5" y="734.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (51 samples, 0.51%)</title><rect x="1176.5" y="707.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (51 samples, 0.51%)</title><rect x="1176.5" y="691.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="702.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (51 samples, 0.51%)</title><rect x="1176.5" y="675.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="686.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (7 samples, 0.07%)</title><rect x="1177.1" y="659.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (7 samples, 0.07%)</title><rect x="1177.1" y="643.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.07%)</title><rect x="1177.1" y="627.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.07%)</title><rect x="1177.1" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (7 samples, 0.07%)</title><rect x="1177.1" y="595.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (7 samples, 0.07%)</title><rect x="1177.1" y="579.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.06%)</title><rect x="1177.1" y="563.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (35 samples, 0.35%)</title><rect x="1178.2" y="659.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (34 samples, 0.34%)</title><rect x="1178.2" y="643.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>WatcherThread::run() (63 samples, 0.63%)</title><rect x="1182.5" y="787.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.03%)</title><rect x="1182.5" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>StatSampler::sample_data(PerfDataList*) (3 samples, 0.03%)</title><rect x="1182.5" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (60 samples, 0.60%)</title><rect x="1182.9" y="771.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (59 samples, 0.59%)</title><rect x="1183.0" y="755.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (58 samples, 0.58%)</title><rect x="1183.0" y="739.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (57 samples, 0.57%)</title><rect x="1183.1" y="723.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (56 samples, 0.56%)</title><rect x="1183.2" y="707.0" width="6.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
</g>
</svg>

