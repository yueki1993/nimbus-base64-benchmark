<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (11,358 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.05%)</title><rect x="10.1" y="963.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.1" y="974.0"></text>
</g>
<g>
<title>Interpreter (6 samples, 0.05%)</title><rect x="10.1" y="947.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,693 samples, 76.54%)</title><rect x="10.7" y="963.0" width="903.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.7" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,693 samples, 76.54%)</title><rect x="10.7" y="947.0" width="903.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,693 samples, 76.54%)</title><rect x="10.7" y="931.0" width="903.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,692 samples, 76.53%)</title><rect x="10.7" y="915.0" width="903.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="926.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,692 samples, 76.53%)</title><rect x="10.7" y="899.0" width="903.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="910.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,692 samples, 76.53%)</title><rect x="10.7" y="883.0" width="903.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="894.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,692 samples, 76.53%)</title><rect x="10.7" y="867.0" width="903.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.7" y="878.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,692 samples, 76.53%)</title><rect x="10.7" y="851.0" width="903.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="862.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,692 samples, 76.53%)</title><rect x="10.7" y="835.0" width="903.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="846.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,692 samples, 76.53%)</title><rect x="10.7" y="819.0" width="903.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.7" y="830.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,692 samples, 76.53%)</title><rect x="10.7" y="803.0" width="903.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="814.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,692 samples, 76.53%)</title><rect x="10.7" y="787.0" width="903.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.7" y="798.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_medium_Throughput (8,692 samples, 76.53%)</title><rect x="10.7" y="771.0" width="903.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="782.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_m..</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_medium_jmhTest.JwtParse_callGetJwtClaimsSetTwice_medium_thrpt_jmhStub (8,080 samples, 71.14%)</title><rect x="10.7" y="755.0" width="839.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="766.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_medium_jmhTest.JwtParse_callGetJwtClaims..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_medium (8,067 samples, 71.02%)</title><rect x="12.1" y="739.0" width="838.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="750.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_medium</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,060 samples, 70.96%)</title><rect x="12.3" y="723.0" width="837.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.3" y="734.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (4,810 samples, 42.35%)</title><rect x="12.7" y="707.0" width="499.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.7" y="718.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (60 samples, 0.53%)</title><rect x="13.4" y="691.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (59 samples, 0.52%)</title><rect x="13.4" y="675.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (55 samples, 0.48%)</title><rect x="13.7" y="659.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="14.6" y="643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (27 samples, 0.24%)</title><rect x="15.2" y="643.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (14 samples, 0.12%)</title><rect x="18.0" y="643.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (13 samples, 0.11%)</title><rect x="18.1" y="627.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (13 samples, 0.11%)</title><rect x="18.1" y="611.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="622.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (13 samples, 0.11%)</title><rect x="18.1" y="595.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.1" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (9 samples, 0.08%)</title><rect x="18.5" y="579.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.04%)</title><rect x="18.6" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (4,743 samples, 41.76%)</title><rect x="19.7" y="691.0" width="492.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.7" y="702.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (71 samples, 0.63%)</title><rect x="20.0" y="675.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.0" y="686.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (67 samples, 0.59%)</title><rect x="20.4" y="659.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.4" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (56 samples, 0.49%)</title><rect x="21.2" y="643.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.2" y="654.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (55 samples, 0.48%)</title><rect x="21.3" y="627.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="24.3" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (55 samples, 0.48%)</title><rect x="21.3" y="611.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="622.0"></text>
</g>
<g>
<title>java/security/Provider.getService (46 samples, 0.41%)</title><rect x="21.6" y="595.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.6" y="606.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (20 samples, 0.18%)</title><rect x="23.5" y="579.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.5" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (20 samples, 0.18%)</title><rect x="23.5" y="563.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (20 samples, 0.18%)</title><rect x="23.5" y="547.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (6 samples, 0.05%)</title><rect x="24.5" y="531.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="542.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (6 samples, 0.05%)</title><rect x="24.5" y="515.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.5" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.matches (3 samples, 0.03%)</title><rect x="25.6" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.6" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.04%)</title><rect x="26.0" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="26.0" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.0" y="574.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (6 samples, 0.05%)</title><rect x="26.4" y="595.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="26.7" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (207 samples, 1.82%)</title><rect x="27.3" y="675.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.3" y="686.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (206 samples, 1.81%)</title><rect x="27.5" y="659.0" width="21.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.5" y="670.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (118 samples, 1.04%)</title><rect x="34.2" y="643.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.2" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (4 samples, 0.04%)</title><rect x="46.1" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (20 samples, 0.18%)</title><rect x="46.5" y="643.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (20 samples, 0.18%)</title><rect x="46.5" y="627.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (5 samples, 0.04%)</title><rect x="46.7" y="611.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.7" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="46.7" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.7" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="46.9" y="579.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="49.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (9 samples, 0.08%)</title><rect x="47.2" y="611.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="48.1" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="48.1" y="595.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="48.1" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="48.1" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="48.1" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="48.2" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.2" y="542.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (135 samples, 1.19%)</title><rect x="48.9" y="675.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.9" y="686.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (135 samples, 1.19%)</title><rect x="48.9" y="659.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.9" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (133 samples, 1.17%)</title><rect x="49.1" y="643.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.1" y="654.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (35 samples, 0.31%)</title><rect x="49.4" y="627.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.4" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (8 samples, 0.07%)</title><rect x="49.9" y="611.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (7 samples, 0.06%)</title><rect x="50.0" y="595.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.0" y="606.0"></text>
</g>
<g>
<title>Java_java_lang_Class_isAssignableFrom (4 samples, 0.04%)</title><rect x="50.2" y="579.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="53.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 0.18%)</title><rect x="50.8" y="611.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.14%)</title><rect x="51.0" y="595.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.0" y="606.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (3 samples, 0.03%)</title><rect x="51.8" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.8" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="52.1" y="579.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="55.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="52.7" y="595.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="52.7" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.7" y="590.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (6 samples, 0.05%)</title><rect x="53.0" y="627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.0" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (5 samples, 0.04%)</title><rect x="53.1" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.1" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (5 samples, 0.04%)</title><rect x="53.1" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.1" y="606.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (72 samples, 0.63%)</title><rect x="53.6" y="627.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.6" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (72 samples, 0.63%)</title><rect x="53.6" y="611.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (11 samples, 0.10%)</title><rect x="53.6" y="595.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (9 samples, 0.08%)</title><rect x="53.7" y="579.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (3 samples, 0.03%)</title><rect x="53.8" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (3 samples, 0.03%)</title><rect x="53.8" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.8" y="558.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (3 samples, 0.03%)</title><rect x="54.4" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.4" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (54 samples, 0.48%)</title><rect x="54.8" y="595.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.8" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (46 samples, 0.41%)</title><rect x="55.1" y="579.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.1" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (46 samples, 0.41%)</title><rect x="55.1" y="563.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.1" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (44 samples, 0.39%)</title><rect x="55.3" y="547.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.3" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (44 samples, 0.39%)</title><rect x="55.3" y="531.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.3" y="542.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (44 samples, 0.39%)</title><rect x="55.3" y="515.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.3" y="526.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (43 samples, 0.38%)</title><rect x="55.4" y="499.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (41 samples, 0.36%)</title><rect x="55.6" y="483.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.6" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (20 samples, 0.18%)</title><rect x="55.6" y="467.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.6" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (18 samples, 0.16%)</title><rect x="55.6" y="451.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (5 samples, 0.04%)</title><rect x="55.8" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (4 samples, 0.04%)</title><rect x="55.8" y="419.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.8" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.06%)</title><rect x="56.3" y="435.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.3" y="446.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.06%)</title><rect x="56.3" y="419.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.3" y="430.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (6 samples, 0.05%)</title><rect x="56.3" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.3" y="414.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="56.3" y="387.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="59.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="57.2" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="57.2" y="419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.2" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (19 samples, 0.17%)</title><rect x="57.7" y="467.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.7" y="478.0"></text>
</g>
<g>
<title>java/security/Provider.getService (16 samples, 0.14%)</title><rect x="57.7" y="451.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.7" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 0.08%)</title><rect x="58.4" y="435.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.08%)</title><rect x="58.4" y="419.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.4" y="430.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (7 samples, 0.06%)</title><rect x="58.6" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.6" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="59.3" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.3" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="59.3" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.3" y="446.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.quickCheckMemberAccess (5 samples, 0.04%)</title><rect x="59.9" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.9" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.getClassAccessFlags (3 samples, 0.03%)</title><rect x="60.1" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.1" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (7 samples, 0.06%)</title><rect x="60.4" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.4" y="606.0"></text>
</g>
<g>
<title>java/security/Signature.access$200 (17 samples, 0.15%)</title><rect x="61.1" y="627.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.1" y="638.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (17 samples, 0.15%)</title><rect x="61.1" y="611.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 0.11%)</title><rect x="61.5" y="595.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.04%)</title><rect x="62.2" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.2" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="62.3" y="563.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="65.3" y="574.0"></text>
</g>
<g>
<title>java/security/Signature.update (355 samples, 3.13%)</title><rect x="62.9" y="675.0" width="36.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.9" y="686.0">jav..</text>
</g>
<g>
<title>java/security/Signature.update (353 samples, 3.11%)</title><rect x="63.1" y="659.0" width="36.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.1" y="670.0">jav..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (352 samples, 3.10%)</title><rect x="63.2" y="643.0" width="36.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.2" y="654.0">jav..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (351 samples, 3.09%)</title><rect x="63.3" y="627.0" width="36.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.3" y="638.0">sun..</text>
</g>
<g>
<title>java/security/MessageDigest.update (349 samples, 3.07%)</title><rect x="63.5" y="611.0" width="36.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.5" y="622.0">jav..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (349 samples, 3.07%)</title><rect x="63.5" y="595.0" width="36.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.5" y="606.0">jav..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (348 samples, 3.06%)</title><rect x="63.6" y="579.0" width="36.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.6" y="590.0">sun..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (345 samples, 3.04%)</title><rect x="63.9" y="563.0" width="35.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.9" y="574.0">sun..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (342 samples, 3.01%)</title><rect x="64.2" y="547.0" width="35.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.2" y="558.0">sun..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (18 samples, 0.16%)</title><rect x="95.5" y="531.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.5" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (23 samples, 0.20%)</title><rect x="97.4" y="531.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.4" y="542.0"></text>
</g>
<g>
<title>java/security/Signature.verify (3,972 samples, 34.97%)</title><rect x="99.8" y="675.0" width="412.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.8" y="686.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (3,970 samples, 34.95%)</title><rect x="99.8" y="659.0" width="412.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="670.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="99.9" y="643.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.9" y="654.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (3,965 samples, 34.91%)</title><rect x="100.3" y="643.0" width="411.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.3" y="654.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (3,383 samples, 29.79%)</title><rect x="102.3" y="627.0" width="351.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.3" y="638.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (3,382 samples, 29.78%)</title><rect x="102.4" y="611.0" width="351.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.4" y="622.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (3,343 samples, 29.43%)</title><rect x="102.7" y="595.0" width="347.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.7" y="606.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.equals (5 samples, 0.04%)</title><rect x="103.1" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.1" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3,334 samples, 29.35%)</title><rect x="103.6" y="579.0" width="346.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.6" y="590.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (196 samples, 1.73%)</title><rect x="107.0" y="563.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="110.0" y="574.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (188 samples, 1.66%)</title><rect x="107.9" y="547.0" width="19.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="110.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (185 samples, 1.63%)</title><rect x="127.4" y="563.0" width="19.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="130.4" y="574.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (174 samples, 1.53%)</title><rect x="128.5" y="547.0" width="18.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="131.5" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (17 samples, 0.15%)</title><rect x="146.7" y="563.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.7" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (7 samples, 0.06%)</title><rect x="148.5" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.5" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.intArrayCmpToLen (5 samples, 0.04%)</title><rect x="148.7" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.7" y="558.0"></text>
</g>
<g>
<title>mulAdd (4 samples, 0.04%)</title><rect x="148.8" y="531.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="151.8" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="149.2" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.2" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="149.2" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.2" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (8 samples, 0.07%)</title><rect x="149.6" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.6" y="574.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (423 samples, 3.72%)</title><rect x="150.6" y="563.0" width="43.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.6" y="574.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (422 samples, 3.72%)</title><rect x="150.7" y="547.0" width="43.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="153.7" y="558.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (422 samples, 3.72%)</title><rect x="150.7" y="531.0" width="43.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.7" y="542.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (413 samples, 3.64%)</title><rect x="151.4" y="515.0" width="42.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.4" y="526.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (13 samples, 0.11%)</title><rect x="157.3" y="499.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.3" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (334 samples, 2.94%)</title><rect x="158.7" y="499.0" width="34.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.7" y="510.0">ja..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (3 samples, 0.03%)</title><rect x="193.4" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.4" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (2,295 samples, 20.21%)</title><rect x="194.5" y="563.0" width="238.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.5" y="574.0">java/math/MutableBigInteger.norm..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (2,293 samples, 20.19%)</title><rect x="194.7" y="547.0" width="238.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="197.7" y="558.0">SharedRuntime::montgomery_square..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2,233 samples, 19.66%)</title><rect x="201.0" y="531.0" width="231.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="204.0" y="542.0">montgomery_square(unsigned long..</text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (3 samples, 0.03%)</title><rect x="432.9" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.9" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="433.3" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.3" y="574.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (20 samples, 0.18%)</title><rect x="433.6" y="563.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="436.6" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="435.6" y="563.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="438.6" y="574.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="436.2" y="563.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="439.2" y="574.0"></text>
</g>
<g>
<title>mulAdd (130 samples, 1.14%)</title><rect x="436.5" y="563.0" width="13.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="439.5" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (15 samples, 0.13%)</title><rect x="450.1" y="595.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.1" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (10 samples, 0.09%)</title><rect x="450.3" y="579.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="453.3" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (8 samples, 0.07%)</title><rect x="450.5" y="563.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.5" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (3 samples, 0.03%)</title><rect x="451.3" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.3" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (20 samples, 0.18%)</title><rect x="451.6" y="595.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.6" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (17 samples, 0.15%)</title><rect x="452.0" y="579.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.0" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.getInt (10 samples, 0.09%)</title><rect x="452.4" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.4" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="453.4" y="563.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="456.4" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (430 samples, 3.79%)</title><rect x="453.8" y="627.0" width="44.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.8" y="638.0">sun/..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (429 samples, 3.78%)</title><rect x="453.9" y="611.0" width="44.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.9" y="622.0">sun/..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (422 samples, 3.72%)</title><rect x="454.7" y="595.0" width="43.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.7" y="606.0">java..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (419 samples, 3.69%)</title><rect x="454.9" y="579.0" width="43.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.9" y="590.0">java..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (418 samples, 3.68%)</title><rect x="454.9" y="563.0" width="43.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.9" y="574.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (418 samples, 3.68%)</title><rect x="454.9" y="547.0" width="43.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.9" y="558.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (418 samples, 3.68%)</title><rect x="454.9" y="531.0" width="43.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.9" y="542.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (414 samples, 3.65%)</title><rect x="455.3" y="515.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.3" y="526.0">java..</text>
</g>
<g>
<title>JVM_FillInStackTrace (6 samples, 0.05%)</title><rect x="456.6" y="499.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="459.6" y="510.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (393 samples, 3.46%)</title><rect x="457.3" y="499.0" width="40.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="460.3" y="510.0">Jav..</text>
</g>
<g>
<title>JVM_FillInStackTrace (386 samples, 3.40%)</title><rect x="457.7" y="483.0" width="40.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="460.7" y="494.0">JVM..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="457.9" y="467.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="460.9" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (7 samples, 0.06%)</title><rect x="459.2" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="462.2" y="478.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (362 samples, 3.19%)</title><rect x="460.1" y="467.0" width="37.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="463.1" y="478.0">jav..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (3 samples, 0.03%)</title><rect x="460.3" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="463.3" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="460.9" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="463.9" y="462.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="461.4" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="464.4" y="462.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (338 samples, 2.98%)</title><rect x="462.0" y="451.0" width="35.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="465.0" y="462.0">jav..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (33 samples, 0.29%)</title><rect x="471.2" y="435.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="474.2" y="446.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (27 samples, 0.24%)</title><rect x="471.2" y="419.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="474.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (9 samples, 0.08%)</title><rect x="471.5" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="474.5" y="414.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (4 samples, 0.04%)</title><rect x="472.0" y="387.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="475.0" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 0.11%)</title><rect x="472.5" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="475.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (6 samples, 0.05%)</title><rect x="473.1" y="387.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="476.1" y="398.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.04%)</title><rect x="474.0" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.0" y="430.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (77 samples, 0.68%)</title><rect x="474.8" y="435.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="477.8" y="446.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (7 samples, 0.06%)</title><rect x="482.9" y="435.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="485.9" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (21 samples, 0.18%)</title><rect x="484.1" y="435.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="487.1" y="446.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (14 samples, 0.12%)</title><rect x="484.1" y="419.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="487.1" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (13 samples, 0.11%)</title><rect x="484.1" y="403.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="487.1" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (12 samples, 0.11%)</title><rect x="484.2" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="487.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="485.5" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="488.5" y="430.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="485.9" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="488.9" y="430.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (7 samples, 0.06%)</title><rect x="486.2" y="435.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.2" y="446.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (14 samples, 0.12%)</title><rect x="487.0" y="435.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="490.0" y="446.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (3 samples, 0.03%)</title><rect x="488.4" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.4" y="446.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="488.7" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="491.7" y="446.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (3 samples, 0.03%)</title><rect x="489.4" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="492.4" y="446.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (58 samples, 0.51%)</title><rect x="489.7" y="435.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="492.7" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (26 samples, 0.23%)</title><rect x="490.2" y="419.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="493.2" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="490.3" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="493.3" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (21 samples, 0.18%)</title><rect x="490.6" y="403.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="493.6" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (19 samples, 0.17%)</title><rect x="490.6" y="387.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="493.6" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (18 samples, 0.16%)</title><rect x="490.7" y="371.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.7" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (7 samples, 0.06%)</title><rect x="492.9" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="495.9" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.05%)</title><rect x="493.0" y="403.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="496.0" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (6 samples, 0.05%)</title><rect x="493.0" y="387.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="496.0" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.05%)</title><rect x="493.0" y="371.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.0" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (19 samples, 0.17%)</title><rect x="493.6" y="419.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.6" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (13 samples, 0.11%)</title><rect x="494.0" y="403.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="497.0" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (12 samples, 0.11%)</title><rect x="494.1" y="387.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="497.1" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (11 samples, 0.10%)</title><rect x="494.2" y="371.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="497.2" y="382.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.03%)</title><rect x="496.0" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="499.0" y="446.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (3 samples, 0.03%)</title><rect x="496.8" y="435.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="499.8" y="446.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (96 samples, 0.85%)</title><rect x="498.5" y="627.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.5" y="638.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="498.5" y="611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.5" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.init (3 samples, 0.03%)</title><rect x="498.5" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.5" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (33 samples, 0.29%)</title><rect x="498.9" y="611.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.9" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (30 samples, 0.26%)</title><rect x="499.2" y="595.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.2" y="606.0"></text>
</g>
<g>
<title>java/util/Vector.elementAt (4 samples, 0.04%)</title><rect x="499.8" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.8" y="590.0"></text>
</g>
<g>
<title>java/util/Vector.elementData (3 samples, 0.03%)</title><rect x="500.0" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.0" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (18 samples, 0.16%)</title><rect x="500.5" y="579.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.5" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (18 samples, 0.16%)</title><rect x="500.5" y="563.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.5" y="574.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (15 samples, 0.13%)</title><rect x="500.7" y="547.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.7" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (4 samples, 0.04%)</title><rect x="500.8" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.8" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.06%)</title><rect x="501.2" y="531.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.2" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="501.9" y="531.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="504.9" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (6 samples, 0.05%)</title><rect x="502.3" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.3" y="622.0"></text>
</g>
<g>
<title>java/io/InputStream.read (3 samples, 0.03%)</title><rect x="502.5" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.5" y="606.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.equals (4 samples, 0.04%)</title><rect x="503.0" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="506.0" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.equals (3 samples, 0.03%)</title><rect x="503.1" y="595.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.1" y="606.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (48 samples, 0.42%)</title><rect x="503.5" y="611.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.5" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (18 samples, 0.16%)</title><rect x="504.1" y="595.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.1" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (17 samples, 0.15%)</title><rect x="504.2" y="579.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.2" y="590.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.skip (3 samples, 0.03%)</title><rect x="504.6" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.6" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (9 samples, 0.08%)</title><rect x="504.9" y="563.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.clone (7 samples, 0.06%)</title><rect x="505.1" y="547.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.1" y="558.0"></text>
</g>
<g>
<title>JVM_Clone (3 samples, 0.03%)</title><rect x="505.3" y="531.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="508.3" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (23 samples, 0.20%)</title><rect x="506.0" y="595.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.0" y="606.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (23 samples, 0.20%)</title><rect x="506.0" y="579.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.0" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.available (11 samples, 0.10%)</title><rect x="506.4" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="509.4" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="506.9" y="547.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="509.9" y="558.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (5 samples, 0.04%)</title><rect x="507.5" y="563.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.5" y="574.0"></text>
</g>
<g>
<title>java/io/InputStream.read (3 samples, 0.03%)</title><rect x="507.7" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="510.7" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="507.7" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.7" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getLength (3 samples, 0.03%)</title><rect x="508.1" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="511.1" y="574.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (36 samples, 0.32%)</title><rect x="508.5" y="627.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.5" y="638.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (36 samples, 0.32%)</title><rect x="508.5" y="611.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.5" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (35 samples, 0.31%)</title><rect x="508.6" y="595.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.6" y="606.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (35 samples, 0.31%)</title><rect x="508.6" y="579.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.6" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (35 samples, 0.31%)</title><rect x="508.6" y="563.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.6" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (35 samples, 0.31%)</title><rect x="508.6" y="547.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.6" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (5 samples, 0.04%)</title><rect x="508.7" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.7" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (29 samples, 0.26%)</title><rect x="509.2" y="531.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.2" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (4 samples, 0.04%)</title><rect x="511.8" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.8" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (7 samples, 0.06%)</title><rect x="512.4" y="707.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.4" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (6 samples, 0.05%)</title><rect x="512.5" y="691.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.5" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (4 samples, 0.04%)</title><rect x="512.7" y="675.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.7" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/BaseJWSProvider.&lt;init&gt; (3 samples, 0.03%)</title><rect x="512.8" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.8" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (393 samples, 3.46%)</title><rect x="513.3" y="707.0" width="40.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="516.3" y="718.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (84 samples, 0.74%)</title><rect x="513.5" y="691.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.5" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.&lt;init&gt; (9 samples, 0.08%)</title><rect x="514.0" y="675.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.0" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.&lt;init&gt; (9 samples, 0.08%)</title><rect x="514.0" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (12 samples, 0.11%)</title><rect x="514.9" y="675.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (12 samples, 0.11%)</title><rect x="514.9" y="659.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="517.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (57 samples, 0.50%)</title><rect x="516.2" y="675.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (40 samples, 0.35%)</title><rect x="517.7" y="659.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.7" y="670.0"></text>
</g>
<g>
<title>java/lang/System.getSecurityManager (3 samples, 0.03%)</title><rect x="519.1" y="643.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.1" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (18 samples, 0.16%)</title><rect x="519.8" y="643.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.8" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (307 samples, 2.70%)</title><rect x="522.2" y="691.0" width="31.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.2" y="702.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (302 samples, 2.66%)</title><rect x="522.3" y="675.0" width="31.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.3" y="686.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (298 samples, 2.62%)</title><rect x="522.3" y="659.0" width="30.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.3" y="670.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.&lt;init&gt; (8 samples, 0.07%)</title><rect x="522.3" y="643.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="525.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (260 samples, 2.29%)</title><rect x="523.1" y="643.0" width="27.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.1" y="654.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (169 samples, 1.49%)</title><rect x="523.4" y="627.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.4" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (120 samples, 1.06%)</title><rect x="523.4" y="611.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (10 samples, 0.09%)</title><rect x="525.3" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.3" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (3 samples, 0.03%)</title><rect x="525.4" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.4" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (5 samples, 0.04%)</title><rect x="525.7" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.04%)</title><rect x="525.7" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="525.8" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="528.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="525.8" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.build (6 samples, 0.05%)</title><rect x="526.4" y="595.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.&lt;init&gt; (6 samples, 0.05%)</title><rect x="526.4" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.4" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (70 samples, 0.62%)</title><rect x="527.1" y="595.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.1" y="606.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (67 samples, 0.59%)</title><rect x="527.4" y="579.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.4" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (65 samples, 0.57%)</title><rect x="527.4" y="563.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.4" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (8 samples, 0.07%)</title><rect x="528.0" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.0" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (7 samples, 0.06%)</title><rect x="528.1" y="531.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.04%)</title><rect x="528.3" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.3" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (4 samples, 0.04%)</title><rect x="528.8" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.8" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (4 samples, 0.04%)</title><rect x="528.8" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.8" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="528.9" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="531.9" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (4 samples, 0.04%)</title><rect x="529.2" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="532.2" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="529.2" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.2" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="529.4" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="532.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="529.4" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="532.4" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (27 samples, 0.24%)</title><rect x="529.7" y="547.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.7" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (27 samples, 0.24%)</title><rect x="529.7" y="531.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="532.7" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (26 samples, 0.23%)</title><rect x="529.8" y="515.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="532.8" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (13 samples, 0.11%)</title><rect x="529.9" y="499.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="532.9" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (7 samples, 0.06%)</title><rect x="530.1" y="483.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.1" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (4 samples, 0.04%)</title><rect x="530.1" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="530.1" y="451.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.1" y="462.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (3 samples, 0.03%)</title><rect x="530.5" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.5" y="478.0"></text>
</g>
<g>
<title>java/net/URI.match (3 samples, 0.03%)</title><rect x="530.5" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.5" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (3 samples, 0.03%)</title><rect x="530.8" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="530.8" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.8" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (4 samples, 0.04%)</title><rect x="531.2" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.2" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scanIPv4Address (4 samples, 0.04%)</title><rect x="531.2" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.2" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="531.2" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.2" y="478.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (3 samples, 0.03%)</title><rect x="531.3" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.3" y="462.0"></text>
</g>
<g>
<title>java/net/URI.match (3 samples, 0.03%)</title><rect x="531.3" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.3" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (8 samples, 0.07%)</title><rect x="531.6" y="499.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="531.7" y="483.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="534.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="531.7" y="467.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.7" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.05%)</title><rect x="532.5" y="547.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="532.5" y="531.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.04%)</title><rect x="532.6" y="515.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.6" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (9 samples, 0.08%)</title><rect x="533.1" y="547.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.07%)</title><rect x="533.2" y="531.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="536.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.04%)</title><rect x="533.5" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="536.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (8 samples, 0.07%)</title><rect x="534.3" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (8 samples, 0.07%)</title><rect x="534.3" y="579.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.06%)</title><rect x="535.2" y="595.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (7 samples, 0.06%)</title><rect x="535.2" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="538.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (7 samples, 0.06%)</title><rect x="535.2" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="538.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (49 samples, 0.43%)</title><rect x="535.9" y="611.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.9" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (46 samples, 0.41%)</title><rect x="536.2" y="595.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (4 samples, 0.04%)</title><rect x="536.2" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.2" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (4 samples, 0.04%)</title><rect x="536.2" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (4 samples, 0.04%)</title><rect x="536.2" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.2" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (42 samples, 0.37%)</title><rect x="536.6" y="579.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (42 samples, 0.37%)</title><rect x="536.6" y="563.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.6" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (41 samples, 0.36%)</title><rect x="536.6" y="547.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.6" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (38 samples, 0.33%)</title><rect x="536.8" y="531.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (37 samples, 0.33%)</title><rect x="536.9" y="515.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (22 samples, 0.19%)</title><rect x="537.0" y="499.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.0" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (22 samples, 0.19%)</title><rect x="537.0" y="483.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="540.0" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (12 samples, 0.11%)</title><rect x="537.1" y="467.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="540.1" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (4 samples, 0.04%)</title><rect x="537.5" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.5" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="538.0" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.0" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (6 samples, 0.05%)</title><rect x="538.4" y="467.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="538.4" y="451.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.4" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (7 samples, 0.06%)</title><rect x="539.3" y="499.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.3" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (4 samples, 0.04%)</title><rect x="539.4" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.06%)</title><rect x="540.1" y="499.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="540.2" y="483.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.2" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (87 samples, 0.77%)</title><rect x="541.0" y="627.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.0" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (66 samples, 0.58%)</title><rect x="541.2" y="611.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="544.2" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (66 samples, 0.58%)</title><rect x="541.2" y="595.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (26 samples, 0.23%)</title><rect x="543.7" y="579.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (15 samples, 0.13%)</title><rect x="546.4" y="579.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="549.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (15 samples, 0.13%)</title><rect x="546.4" y="563.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (10 samples, 0.09%)</title><rect x="546.9" y="547.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="549.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (9 samples, 0.08%)</title><rect x="547.0" y="531.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (9 samples, 0.08%)</title><rect x="547.0" y="515.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.0" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (9 samples, 0.08%)</title><rect x="547.0" y="499.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.0" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="547.4" y="483.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="550.4" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="547.5" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (19 samples, 0.17%)</title><rect x="548.1" y="611.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.1" y="622.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.available (3 samples, 0.03%)</title><rect x="548.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.14%)</title><rect x="548.4" y="595.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (13 samples, 0.11%)</title><rect x="548.7" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (3 samples, 0.03%)</title><rect x="549.7" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.7" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (30 samples, 0.26%)</title><rect x="550.1" y="643.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 0.12%)</title><rect x="551.2" y="627.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.2" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 0.12%)</title><rect x="551.2" y="611.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="554.2" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.09%)</title><rect x="551.5" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="554.5" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="551.7" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.7" y="590.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.03%)</title><rect x="552.0" y="579.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="555.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (6 samples, 0.05%)</title><rect x="552.6" y="627.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="552.6" y="611.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.6" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="552.7" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.&lt;init&gt; (4 samples, 0.04%)</title><rect x="553.2" y="659.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.03%)</title><rect x="553.4" y="643.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.4" y="654.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (4 samples, 0.04%)</title><rect x="553.7" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.7" y="686.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (1,549 samples, 13.64%)</title><rect x="554.1" y="707.0" width="160.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.1" y="718.0">com/yueki/SignedJwtB..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (1,549 samples, 13.64%)</title><rect x="554.1" y="691.0" width="160.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="557.1" y="702.0">com/nimbusds/jwt/Sig..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (1,464 samples, 12.89%)</title><rect x="554.3" y="675.0" width="152.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.3" y="686.0">com/nimbusds/jose/P..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (949 samples, 8.36%)</title><rect x="554.5" y="659.0" width="98.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.5" y="670.0">com/nimbusds..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (948 samples, 8.35%)</title><rect x="554.5" y="643.0" width="98.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.5" y="654.0">com/nimbusds..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (903 samples, 7.95%)</title><rect x="554.9" y="627.0" width="93.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.9" y="638.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (901 samples, 7.93%)</title><rect x="555.0" y="611.0" width="93.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.0" y="622.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (514 samples, 4.53%)</title><rect x="587.1" y="595.0" width="53.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.1" y="606.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (32 samples, 0.28%)</title><rect x="637.2" y="579.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (66 samples, 0.58%)</title><rect x="640.5" y="595.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (66 samples, 0.58%)</title><rect x="640.5" y="579.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.5" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="641.7" y="563.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="644.7" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="641.7" y="547.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="644.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (3 samples, 0.03%)</title><rect x="641.7" y="531.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="644.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="641.7" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="644.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (6 samples, 0.05%)</title><rect x="642.0" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.0" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.05%)</title><rect x="642.0" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.0" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="642.1" y="531.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="645.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (39 samples, 0.34%)</title><rect x="642.9" y="563.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.04%)</title><rect x="647.0" y="563.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (3 samples, 0.03%)</title><rect x="647.4" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="650.4" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.07%)</title><rect x="647.8" y="595.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="650.8" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="648.0" y="579.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="651.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (41 samples, 0.36%)</title><rect x="648.7" y="627.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (40 samples, 0.35%)</title><rect x="648.8" y="611.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="651.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (40 samples, 0.35%)</title><rect x="648.8" y="595.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (21 samples, 0.18%)</title><rect x="649.8" y="579.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (10 samples, 0.09%)</title><rect x="651.9" y="579.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (10 samples, 0.09%)</title><rect x="651.9" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (10 samples, 0.09%)</title><rect x="651.9" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.9" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (10 samples, 0.09%)</title><rect x="651.9" y="531.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.9" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (10 samples, 0.09%)</title><rect x="651.9" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.9" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (5 samples, 0.04%)</title><rect x="652.2" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.2" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (3 samples, 0.03%)</title><rect x="652.7" y="499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.7" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (513 samples, 4.52%)</title><rect x="653.1" y="659.0" width="53.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.1" y="670.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (513 samples, 4.52%)</title><rect x="653.1" y="643.0" width="53.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.1" y="654.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (511 samples, 4.50%)</title><rect x="653.3" y="627.0" width="53.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.3" y="638.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (511 samples, 4.50%)</title><rect x="653.3" y="611.0" width="53.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.3" y="622.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (511 samples, 4.50%)</title><rect x="653.3" y="595.0" width="53.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.3" y="606.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (509 samples, 4.48%)</title><rect x="653.5" y="579.0" width="52.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.5" y="590.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (506 samples, 4.46%)</title><rect x="653.8" y="563.0" width="52.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.8" y="574.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (470 samples, 4.14%)</title><rect x="654.0" y="547.0" width="48.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.0" y="558.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (14 samples, 0.12%)</title><rect x="655.2" y="531.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.2" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.skipDigits (3 samples, 0.03%)</title><rect x="655.9" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (4 samples, 0.04%)</title><rect x="656.2" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.04%)</title><rect x="656.2" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="656.2" y="483.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="656.2" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.2" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (3 samples, 0.03%)</title><rect x="656.2" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.2" y="462.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (445 samples, 3.92%)</title><rect x="656.6" y="531.0" width="46.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.6" y="542.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (431 samples, 3.79%)</title><rect x="657.1" y="515.0" width="44.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.1" y="526.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (137 samples, 1.21%)</title><rect x="669.6" y="499.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="672.6" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (11 samples, 0.10%)</title><rect x="683.8" y="499.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.8" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="683.9" y="483.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.9" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="684.0" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="687.0" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="684.4" y="483.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="687.4" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (163 samples, 1.44%)</title><rect x="685.0" y="499.0" width="16.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (109 samples, 0.96%)</title><rect x="690.6" y="483.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.6" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (16 samples, 0.14%)</title><rect x="700.3" y="467.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="703.3" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="701.9" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.9" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="702.3" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="702.3" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.3" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (18 samples, 0.16%)</title><rect x="702.9" y="547.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.9" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (9 samples, 0.08%)</title><rect x="703.3" y="531.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="703.5" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="706.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="703.8" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.8" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="703.9" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.9" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (3 samples, 0.03%)</title><rect x="704.2" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="707.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="704.2" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 0.14%)</title><rect x="704.7" y="547.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="707.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="704.7" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="707.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.04%)</title><rect x="704.7" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="707.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.11%)</title><rect x="705.1" y="531.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="708.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="706.1" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.1" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (83 samples, 0.73%)</title><rect x="706.4" y="675.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.4" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (17 samples, 0.15%)</title><rect x="707.2" y="659.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.2" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (14 samples, 0.12%)</title><rect x="707.5" y="643.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.10%)</title><rect x="707.8" y="627.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="710.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.05%)</title><rect x="707.9" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="708.6" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.6" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (24 samples, 0.21%)</title><rect x="709.0" y="659.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.0" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (24 samples, 0.21%)</title><rect x="709.0" y="643.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.0" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (24 samples, 0.21%)</title><rect x="709.0" y="627.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (23 samples, 0.20%)</title><rect x="709.0" y="611.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="712.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (22 samples, 0.19%)</title><rect x="709.1" y="595.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="712.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="709.5" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.08%)</title><rect x="709.9" y="579.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.9" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="710.5" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (11 samples, 0.10%)</title><rect x="711.5" y="659.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.09%)</title><rect x="711.6" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.08%)</title><rect x="711.7" y="627.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.7" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (4 samples, 0.04%)</title><rect x="712.6" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="712.6" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="712.6" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.6" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="712.7" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.7" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (14 samples, 0.12%)</title><rect x="713.0" y="659.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 0.12%)</title><rect x="713.0" y="643.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 0.12%)</title><rect x="713.0" y="627.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.0" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (4 samples, 0.04%)</title><rect x="714.5" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="714.5" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="714.5" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.5" y="638.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (1,295 samples, 11.40%)</title><rect x="715.0" y="707.0" width="134.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="718.0" y="718.0">com/yueki/SignedJ..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (1,294 samples, 11.39%)</title><rect x="715.1" y="691.0" width="134.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.1" y="702.0">com/nimbusds/jwt/..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (1,259 samples, 11.08%)</title><rect x="715.6" y="675.0" width="130.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="718.6" y="686.0">com/nimbusds/jos..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (906 samples, 7.98%)</title><rect x="715.6" y="659.0" width="94.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.6" y="670.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (906 samples, 7.98%)</title><rect x="715.6" y="643.0" width="94.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.6" y="654.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (866 samples, 7.62%)</title><rect x="715.6" y="627.0" width="90.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.6" y="638.0">com/nimbus..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (865 samples, 7.62%)</title><rect x="715.6" y="611.0" width="89.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.6" y="622.0">com/nimbus..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (518 samples, 4.56%)</title><rect x="745.6" y="595.0" width="53.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="748.6" y="606.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (29 samples, 0.26%)</title><rect x="796.4" y="579.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="799.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (53 samples, 0.47%)</title><rect x="799.4" y="595.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (53 samples, 0.47%)</title><rect x="799.4" y="579.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (6 samples, 0.05%)</title><rect x="800.3" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.3" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.05%)</title><rect x="800.3" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.3" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="800.5" y="531.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="803.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (36 samples, 0.32%)</title><rect x="800.9" y="563.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.9" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="805.0" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (40 samples, 0.35%)</title><rect x="805.6" y="627.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (39 samples, 0.34%)</title><rect x="805.7" y="611.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="808.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (39 samples, 0.34%)</title><rect x="805.7" y="595.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (26 samples, 0.23%)</title><rect x="806.3" y="579.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.06%)</title><rect x="809.0" y="579.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="809.0" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="809.0" y="547.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.0" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="809.0" y="531.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.0" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.06%)</title><rect x="809.0" y="515.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.0" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (4 samples, 0.04%)</title><rect x="809.2" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (353 samples, 3.11%)</title><rect x="809.8" y="659.0" width="36.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.8" y="670.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (353 samples, 3.11%)</title><rect x="809.8" y="643.0" width="36.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.8" y="654.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (352 samples, 3.10%)</title><rect x="809.9" y="627.0" width="36.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.9" y="638.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (352 samples, 3.10%)</title><rect x="809.9" y="611.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.9" y="622.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (352 samples, 3.10%)</title><rect x="809.9" y="595.0" width="36.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.9" y="606.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (352 samples, 3.10%)</title><rect x="809.9" y="579.0" width="36.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.9" y="590.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (351 samples, 3.09%)</title><rect x="810.0" y="563.0" width="36.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.0" y="574.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (323 samples, 2.84%)</title><rect x="810.8" y="547.0" width="33.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.8" y="558.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (3 samples, 0.03%)</title><rect x="811.1" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (317 samples, 2.79%)</title><rect x="811.4" y="531.0" width="33.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="814.4" y="542.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (303 samples, 2.67%)</title><rect x="811.9" y="515.0" width="31.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.9" y="526.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (113 samples, 0.99%)</title><rect x="818.7" y="499.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.7" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (6 samples, 0.05%)</title><rect x="830.4" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="833.4" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="830.5" y="483.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="833.5" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (119 samples, 1.05%)</title><rect x="831.1" y="499.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (82 samples, 0.72%)</title><rect x="834.9" y="483.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.9" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="842.8" y="467.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="845.8" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (3 samples, 0.03%)</title><rect x="843.4" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="843.4" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="843.4" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.4" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="843.4" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.4" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="843.7" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="843.7" y="499.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.7" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (17 samples, 0.15%)</title><rect x="844.4" y="547.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="847.4" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (8 samples, 0.07%)</title><rect x="844.4" y="531.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="847.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.07%)</title><rect x="844.4" y="515.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.04%)</title><rect x="844.7" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="847.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="844.7" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.7" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="844.9" y="467.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="847.9" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="845.2" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="845.2" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="848.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="845.6" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="846.1" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="849.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="846.1" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="849.1" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (30 samples, 0.26%)</title><rect x="846.4" y="675.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.4" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.05%)</title><rect x="846.7" y="659.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.7" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.04%)</title><rect x="846.8" y="643.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.8" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (14 samples, 0.12%)</title><rect x="847.4" y="659.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.4" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (14 samples, 0.12%)</title><rect x="847.4" y="643.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (14 samples, 0.12%)</title><rect x="847.4" y="627.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (11 samples, 0.10%)</title><rect x="847.4" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (11 samples, 0.10%)</title><rect x="847.4" y="595.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.04%)</title><rect x="847.6" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.6" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (3 samples, 0.03%)</title><rect x="848.2" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.2" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (4 samples, 0.04%)</title><rect x="849.0" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="849.0" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="849.0" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.0" y="638.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (5 samples, 0.04%)</title><rect x="849.7" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.7" y="734.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_medium_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (612 samples, 5.39%)</title><rect x="850.2" y="755.0" width="63.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.2" y="766.0">com/yue..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (611 samples, 5.38%)</title><rect x="850.3" y="739.0" width="63.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.3" y="750.0">com/yue..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (389 samples, 3.42%)</title><rect x="850.8" y="723.0" width="40.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.8" y="734.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="851.0" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.0" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="851.0" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.03%)</title><rect x="851.0" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.0" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.03%)</title><rect x="851.0" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.0" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.03%)</title><rect x="851.0" y="643.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="851.0" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.0" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (321 samples, 2.83%)</title><rect x="851.3" y="707.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.3" y="718.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (321 samples, 2.83%)</title><rect x="851.3" y="691.0" width="33.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.3" y="702.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (6 samples, 0.05%)</title><rect x="851.5" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="854.5" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (3 samples, 0.03%)</title><rect x="851.6" y="659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.6" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeDigitBase64URL (3 samples, 0.03%)</title><rect x="851.6" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.6" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (3 samples, 0.03%)</title><rect x="851.6" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.6" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (3 samples, 0.03%)</title><rect x="851.6" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="854.6" y="622.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (5 samples, 0.04%)</title><rect x="852.1" y="675.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.1" y="686.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (5 samples, 0.04%)</title><rect x="852.1" y="659.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.1" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (5 samples, 0.04%)</title><rect x="852.1" y="643.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.1" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (3 samples, 0.03%)</title><rect x="852.4" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.4" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (3 samples, 0.03%)</title><rect x="852.4" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.4" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.03%)</title><rect x="852.4" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.4" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.03%)</title><rect x="852.4" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.4" y="590.0"></text>
</g>
<g>
<title>java/security/Signature.sign (299 samples, 2.63%)</title><rect x="852.7" y="675.0" width="31.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.7" y="686.0">ja..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (299 samples, 2.63%)</title><rect x="852.7" y="659.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.7" y="670.0">ja..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (298 samples, 2.62%)</title><rect x="852.8" y="643.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="855.8" y="654.0">su..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (292 samples, 2.57%)</title><rect x="852.8" y="627.0" width="30.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.8" y="638.0">su..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (292 samples, 2.57%)</title><rect x="852.8" y="611.0" width="30.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.8" y="622.0">su..</text>
</g>
<g>
<title>java/math/BigInteger.mod (6 samples, 0.05%)</title><rect x="852.9" y="595.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.9" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (6 samples, 0.05%)</title><rect x="852.9" y="579.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.9" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (6 samples, 0.05%)</title><rect x="852.9" y="563.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.9" y="574.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (5 samples, 0.04%)</title><rect x="853.0" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="856.0" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (5 samples, 0.04%)</title><rect x="853.0" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.0" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (5 samples, 0.04%)</title><rect x="853.0" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.0" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (4 samples, 0.04%)</title><rect x="853.1" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.1" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (277 samples, 2.44%)</title><rect x="853.5" y="595.0" width="28.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.5" y="606.0">ja..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (276 samples, 2.43%)</title><rect x="853.6" y="579.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="856.6" y="590.0">ja..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (24 samples, 0.21%)</title><rect x="854.0" y="563.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="857.0" y="574.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (22 samples, 0.19%)</title><rect x="854.2" y="547.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="857.2" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (4 samples, 0.04%)</title><rect x="856.7" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="859.7" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.subN (4 samples, 0.04%)</title><rect x="856.7" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="859.7" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (4 samples, 0.04%)</title><rect x="856.7" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="859.7" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="856.7" y="515.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="859.7" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (8 samples, 0.07%)</title><rect x="857.1" y="563.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="860.1" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (8 samples, 0.07%)</title><rect x="857.1" y="547.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.1" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (8 samples, 0.07%)</title><rect x="857.1" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.1" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (8 samples, 0.07%)</title><rect x="857.1" y="515.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="860.1" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (41 samples, 0.36%)</title><rect x="858.0" y="563.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.0" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (7 samples, 0.06%)</title><rect x="858.0" y="547.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.0" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (7 samples, 0.06%)</title><rect x="858.0" y="531.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.0" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (7 samples, 0.06%)</title><rect x="858.0" y="515.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="861.0" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (34 samples, 0.30%)</title><rect x="858.7" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.7" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (34 samples, 0.30%)</title><rect x="858.7" y="531.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.7" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (31 samples, 0.27%)</title><rect x="858.9" y="515.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="861.9" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (189 samples, 1.66%)</title><rect x="862.4" y="563.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.4" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (188 samples, 1.66%)</title><rect x="862.4" y="547.0" width="19.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.4" y="558.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (173 samples, 1.52%)</title><rect x="863.3" y="531.0" width="17.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="866.3" y="542.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (7 samples, 0.06%)</title><rect x="881.2" y="531.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="884.2" y="542.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (6 samples, 0.05%)</title><rect x="882.3" y="595.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="885.3" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (5 samples, 0.04%)</title><rect x="882.4" y="579.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.4" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (5 samples, 0.04%)</title><rect x="882.4" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="885.4" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4 samples, 0.04%)</title><rect x="882.5" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.5" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="882.5" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.5" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="882.5" y="515.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="885.5" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 0.04%)</title><rect x="882.5" y="499.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="885.5" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (4 samples, 0.04%)</title><rect x="882.5" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="885.5" y="494.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.encodeSignature (4 samples, 0.04%)</title><rect x="883.2" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="886.2" y="638.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.encode (3 samples, 0.03%)</title><rect x="883.3" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.3" y="622.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.derEncode (3 samples, 0.03%)</title><rect x="883.3" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.3" y="606.0"></text>
</g>
<g>
<title>java/security/Signature.update (9 samples, 0.08%)</title><rect x="883.7" y="675.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="886.7" y="686.0"></text>
</g>
<g>
<title>java/security/Signature.update (9 samples, 0.08%)</title><rect x="883.7" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="886.7" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (9 samples, 0.08%)</title><rect x="883.7" y="643.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="886.7" y="654.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (9 samples, 0.08%)</title><rect x="883.7" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="886.7" y="638.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (9 samples, 0.08%)</title><rect x="883.7" y="611.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.7" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (9 samples, 0.08%)</title><rect x="883.7" y="595.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="886.7" y="606.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (9 samples, 0.08%)</title><rect x="883.7" y="579.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.7" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (9 samples, 0.08%)</title><rect x="883.7" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="886.7" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (8 samples, 0.07%)</title><rect x="883.8" y="547.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="886.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (38 samples, 0.33%)</title><rect x="885.0" y="707.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.0" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (34 samples, 0.30%)</title><rect x="885.1" y="691.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.1" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (34 samples, 0.30%)</title><rect x="885.1" y="675.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.1" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (12 samples, 0.11%)</title><rect x="885.1" y="659.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="888.1" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (11 samples, 0.10%)</title><rect x="885.1" y="643.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="888.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (9 samples, 0.08%)</title><rect x="885.3" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.3" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (8 samples, 0.07%)</title><rect x="885.3" y="611.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="888.3" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (3 samples, 0.03%)</title><rect x="885.3" y="595.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.3" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (3 samples, 0.03%)</title><rect x="885.3" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="888.3" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (3 samples, 0.03%)</title><rect x="885.3" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.3" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (3 samples, 0.03%)</title><rect x="885.3" y="547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.3" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (5 samples, 0.04%)</title><rect x="885.6" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="888.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (3 samples, 0.03%)</title><rect x="885.8" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.8" y="590.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (3 samples, 0.03%)</title><rect x="885.8" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (3 samples, 0.03%)</title><rect x="885.8" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (20 samples, 0.18%)</title><rect x="886.3" y="659.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.3" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (9 samples, 0.08%)</title><rect x="886.3" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (7 samples, 0.06%)</title><rect x="886.5" y="627.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="889.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (7 samples, 0.06%)</title><rect x="886.5" y="611.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (7 samples, 0.06%)</title><rect x="886.5" y="595.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.5" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (7 samples, 0.06%)</title><rect x="886.5" y="579.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="889.5" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (7 samples, 0.06%)</title><rect x="886.5" y="563.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.5" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (7 samples, 0.06%)</title><rect x="886.5" y="547.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="889.5" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (7 samples, 0.06%)</title><rect x="886.5" y="531.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="889.5" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (6 samples, 0.05%)</title><rect x="886.6" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (5 samples, 0.04%)</title><rect x="886.6" y="499.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.6" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (5 samples, 0.04%)</title><rect x="886.6" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="889.6" y="494.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (5 samples, 0.04%)</title><rect x="886.6" y="467.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="889.6" y="478.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (5 samples, 0.04%)</title><rect x="886.6" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="889.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.03%)</title><rect x="886.8" y="435.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="889.8" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.03%)</title><rect x="886.8" y="419.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.8" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.03%)</title><rect x="886.8" y="403.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.8" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (11 samples, 0.10%)</title><rect x="887.3" y="643.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="890.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (11 samples, 0.10%)</title><rect x="887.3" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="890.3" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeDigitBase64URL (5 samples, 0.04%)</title><rect x="887.6" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="890.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="888.1" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="888.1" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (3 samples, 0.03%)</title><rect x="888.1" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (3 samples, 0.03%)</title><rect x="888.9" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="891.9" y="718.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (3 samples, 0.03%)</title><rect x="888.9" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="891.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (3 samples, 0.03%)</title><rect x="888.9" y="675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="891.9" y="686.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (3 samples, 0.03%)</title><rect x="888.9" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.9" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.03%)</title><rect x="888.9" y="643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="891.9" y="654.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (3 samples, 0.03%)</title><rect x="888.9" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="891.9" y="638.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (3 samples, 0.03%)</title><rect x="888.9" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="891.9" y="622.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (3 samples, 0.03%)</title><rect x="888.9" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="891.9" y="606.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (3 samples, 0.03%)</title><rect x="888.9" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="891.9" y="590.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (3 samples, 0.03%)</title><rect x="888.9" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="891.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (3 samples, 0.03%)</title><rect x="888.9" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (3 samples, 0.03%)</title><rect x="888.9" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="891.9" y="542.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (4 samples, 0.04%)</title><rect x="889.2" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.2" y="718.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (4 samples, 0.04%)</title><rect x="889.2" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.2" y="702.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (14 samples, 0.12%)</title><rect x="889.8" y="707.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.8" y="718.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (14 samples, 0.12%)</title><rect x="889.8" y="691.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="892.8" y="702.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (14 samples, 0.12%)</title><rect x="889.8" y="675.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="892.8" y="686.0"></text>
</g>
<g>
<title>java/util/Random.nextInt (7 samples, 0.06%)</title><rect x="890.5" y="659.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="893.5" y="670.0"></text>
</g>
<g>
<title>java/util/Random.next (5 samples, 0.04%)</title><rect x="890.7" y="643.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="893.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (5 samples, 0.04%)</title><rect x="890.7" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="893.7" y="638.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (216 samples, 1.90%)</title><rect x="891.3" y="723.0" width="22.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.3" y="734.0">j..</text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (216 samples, 1.90%)</title><rect x="891.3" y="707.0" width="22.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.3" y="718.0">j..</text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (216 samples, 1.90%)</title><rect x="891.3" y="691.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="894.3" y="702.0">s..</text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (214 samples, 1.88%)</title><rect x="891.4" y="675.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.4" y="686.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.largePrime (214 samples, 1.88%)</title><rect x="891.4" y="659.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.4" y="670.0">j..</text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (11 samples, 0.10%)</title><rect x="891.4" y="643.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="894.4" y="654.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (11 samples, 0.10%)</title><rect x="891.4" y="627.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="894.4" y="638.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSearch (4 samples, 0.04%)</title><rect x="891.4" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="894.4" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.get (4 samples, 0.04%)</title><rect x="891.4" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.4" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (3 samples, 0.03%)</title><rect x="891.5" y="579.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="894.5" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="891.5" y="563.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.5" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="891.5" y="547.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.5" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (3 samples, 0.03%)</title><rect x="891.5" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.5" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (3 samples, 0.03%)</title><rect x="891.5" y="515.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.5" y="526.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (7 samples, 0.06%)</title><rect x="891.8" y="611.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="894.8" y="622.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (7 samples, 0.06%)</title><rect x="891.8" y="595.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.8" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (6 samples, 0.05%)</title><rect x="891.9" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.9" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (6 samples, 0.05%)</title><rect x="891.9" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="894.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (6 samples, 0.05%)</title><rect x="891.9" y="547.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (4 samples, 0.04%)</title><rect x="891.9" y="531.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.9" y="542.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (201 samples, 1.77%)</title><rect x="892.8" y="643.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.8" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (201 samples, 1.77%)</title><rect x="892.8" y="627.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.8" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (30 samples, 0.26%)</title><rect x="892.9" y="611.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.9" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (30 samples, 0.26%)</title><rect x="892.9" y="595.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="895.9" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (21 samples, 0.18%)</title><rect x="893.1" y="579.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.1" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (20 samples, 0.18%)</title><rect x="893.2" y="563.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.2" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (19 samples, 0.17%)</title><rect x="893.3" y="547.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.3" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (17 samples, 0.15%)</title><rect x="893.5" y="531.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.5" y="542.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (17 samples, 0.15%)</title><rect x="893.5" y="515.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.5" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (17 samples, 0.15%)</title><rect x="893.5" y="499.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="896.5" y="510.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (4 samples, 0.04%)</title><rect x="894.7" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="897.7" y="494.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="895.3" y="579.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="898.3" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="895.3" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.3" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (170 samples, 1.50%)</title><rect x="896.0" y="611.0" width="17.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="899.0" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (6 samples, 0.05%)</title><rect x="896.1" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.1" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.randomBits (6 samples, 0.05%)</title><rect x="896.1" y="579.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.1" y="590.0"></text>
</g>
<g>
<title>java/security/SecureRandom.nextBytes (6 samples, 0.05%)</title><rect x="896.1" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.1" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG.engineNextBytes (6 samples, 0.05%)</title><rect x="896.1" y="547.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="899.1" y="558.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.access$400 (6 samples, 0.05%)</title><rect x="896.1" y="531.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="899.1" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.implNextBytes (6 samples, 0.05%)</title><rect x="896.1" y="515.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="899.1" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/SecureRandom.engineNextBytes (4 samples, 0.04%)</title><rect x="896.3" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="899.3" y="510.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (163 samples, 1.44%)</title><rect x="896.7" y="595.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="899.7" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (163 samples, 1.44%)</title><rect x="896.7" y="579.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="899.7" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (7 samples, 0.06%)</title><rect x="898.0" y="563.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.0" y="574.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (7 samples, 0.06%)</title><rect x="898.0" y="547.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="901.0" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (60 samples, 0.53%)</title><rect x="898.7" y="563.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.7" y="574.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (59 samples, 0.52%)</title><rect x="898.8" y="547.0" width="6.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="901.8" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (16 samples, 0.14%)</title><rect x="905.2" y="563.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.2" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (6 samples, 0.05%)</title><rect x="905.2" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.2" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (3 samples, 0.03%)</title><rect x="905.2" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="908.2" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (3 samples, 0.03%)</title><rect x="905.2" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="908.2" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="905.5" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="908.5" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (10 samples, 0.09%)</title><rect x="905.9" y="547.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (10 samples, 0.09%)</title><rect x="905.9" y="531.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="908.9" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (10 samples, 0.09%)</title><rect x="905.9" y="515.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="908.9" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (61 samples, 0.54%)</title><rect x="906.9" y="563.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.9" y="574.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (5 samples, 0.04%)</title><rect x="907.1" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.1" y="558.0"></text>
</g>
<g>
<title>java/math/BigInteger.squareToLen (3 samples, 0.03%)</title><rect x="907.3" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.3" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.implSquareToLen (3 samples, 0.03%)</title><rect x="907.3" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="910.3" y="526.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (54 samples, 0.48%)</title><rect x="907.6" y="547.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="910.6" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (53 samples, 0.47%)</title><rect x="907.7" y="531.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.7" y="542.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (51 samples, 0.45%)</title><rect x="907.9" y="515.0" width="5.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="910.9" y="526.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="913.2" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.2" y="574.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 0.04%)</title><rect x="913.2" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="916.2" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (3 samples, 0.03%)</title><rect x="913.3" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="916.3" y="542.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (4 samples, 0.04%)</title><rect x="913.9" y="963.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.9" y="974.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (4 samples, 0.04%)</title><rect x="913.9" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="916.9" y="958.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (4 samples, 0.04%)</title><rect x="913.9" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.9" y="942.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (4 samples, 0.04%)</title><rect x="913.9" y="915.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.9" y="926.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (4 samples, 0.04%)</title><rect x="913.9" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="916.9" y="910.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (4 samples, 0.04%)</title><rect x="913.9" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.9" y="894.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler.runIteration (3 samples, 0.03%)</title><rect x="914.0" y="867.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.0" y="878.0"></text>
</g>
<g>
<title>thread_start (2,654 samples, 23.37%)</title><rect x="914.3" y="963.0" width="275.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="917.3" y="974.0">thread_start</text>
</g>
<g>
<title>_pthread_start (2,654 samples, 23.37%)</title><rect x="914.3" y="947.0" width="275.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="917.3" y="958.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (2,654 samples, 23.37%)</title><rect x="914.3" y="931.0" width="275.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="917.3" y="942.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (2,654 samples, 23.37%)</title><rect x="914.3" y="915.0" width="275.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="917.3" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (125 samples, 1.10%)</title><rect x="914.3" y="899.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.3" y="910.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (32 samples, 0.28%)</title><rect x="914.3" y="883.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.3" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (29 samples, 0.26%)</title><rect x="914.3" y="867.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.3" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (29 samples, 0.26%)</title><rect x="914.3" y="851.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.3" y="862.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (26 samples, 0.23%)</title><rect x="914.3" y="835.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="917.3" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (24 samples, 0.21%)</title><rect x="914.3" y="819.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.3" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.21%)</title><rect x="914.3" y="803.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="917.3" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="917.0" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.0" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="917.3" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="920.3" y="878.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="917.3" y="851.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="920.3" y="862.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="917.6" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.6" y="894.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (3 samples, 0.03%)</title><rect x="917.6" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="920.6" y="878.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.06%)</title><rect x="917.9" y="883.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.9" y="894.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (7 samples, 0.06%)</title><rect x="917.9" y="867.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.9" y="878.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (6 samples, 0.05%)</title><rect x="917.9" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.9" y="862.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (6 samples, 0.05%)</title><rect x="917.9" y="835.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.9" y="846.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (74 samples, 0.65%)</title><rect x="918.6" y="883.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.6" y="894.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (3 samples, 0.03%)</title><rect x="918.6" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.6" y="878.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (3 samples, 0.03%)</title><rect x="918.6" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.6" y="862.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="918.6" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.6" y="846.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="918.6" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.6" y="830.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="918.6" y="803.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="921.6" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (64 samples, 0.56%)</title><rect x="919.1" y="867.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="922.1" y="878.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (62 samples, 0.55%)</title><rect x="919.3" y="851.0" width="6.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="922.3" y="862.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.05%)</title><rect x="925.7" y="867.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="928.7" y="878.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.04%)</title><rect x="926.3" y="883.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="929.3" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (5 samples, 0.04%)</title><rect x="926.3" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.3" y="878.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (4 samples, 0.04%)</title><rect x="926.8" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="929.8" y="894.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="926.8" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.8" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="926.8" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.8" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="926.8" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.8" y="846.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="926.8" y="819.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="929.8" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="926.8" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.8" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="926.8" y="787.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="929.8" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (2,404 samples, 21.17%)</title><rect x="927.3" y="899.0" width="249.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.3" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,404 samples, 21.17%)</title><rect x="927.3" y="883.0" width="249.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.3" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,395 samples, 21.09%)</title><rect x="927.3" y="867.0" width="248.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="930.3" y="878.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,370 samples, 20.87%)</title><rect x="927.3" y="851.0" width="246.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.3" y="862.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (2,302 samples, 20.27%)</title><rect x="927.3" y="835.0" width="239.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.3" y="846.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (2,300 samples, 20.25%)</title><rect x="927.4" y="819.0" width="238.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.4" y="830.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (714 samples, 6.29%)</title><rect x="927.4" y="803.0" width="74.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.4" y="814.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (24 samples, 0.21%)</title><rect x="927.4" y="787.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.4" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (14 samples, 0.12%)</title><rect x="927.5" y="771.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.5" y="782.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (4 samples, 0.04%)</title><rect x="928.3" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.3" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (9 samples, 0.08%)</title><rect x="928.9" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.9" y="782.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (7 samples, 0.06%)</title><rect x="929.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.0" y="766.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.03%)</title><rect x="929.3" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="932.3" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (24 samples, 0.21%)</title><rect x="929.9" y="787.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.9" y="798.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.04%)</title><rect x="930.1" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.1" y="782.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (10 samples, 0.09%)</title><rect x="930.6" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.6" y="782.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (9 samples, 0.08%)</title><rect x="930.7" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.7" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.04%)</title><rect x="931.1" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.1" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (5 samples, 0.04%)</title><rect x="931.1" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.1" y="734.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (5 samples, 0.04%)</title><rect x="931.1" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.1" y="718.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (5 samples, 0.04%)</title><rect x="931.6" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.6" y="782.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (5 samples, 0.04%)</title><rect x="931.6" y="755.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.6" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.04%)</title><rect x="931.6" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.6" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.04%)</title><rect x="931.6" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.6" y="734.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (4 samples, 0.04%)</title><rect x="931.6" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.6" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (67 samples, 0.59%)</title><rect x="932.3" y="787.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.3" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (6 samples, 0.05%)</title><rect x="932.8" y="771.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="935.8" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (57 samples, 0.50%)</title><rect x="933.4" y="771.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.4" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (18 samples, 0.16%)</title><rect x="934.2" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.2" y="766.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (5 samples, 0.04%)</title><rect x="936.6" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.6" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (19 samples, 0.17%)</title><rect x="937.1" y="755.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.1" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (10 samples, 0.09%)</title><rect x="937.3" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.3" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (8 samples, 0.07%)</title><rect x="937.4" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.4" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (5 samples, 0.04%)</title><rect x="937.4" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.4" y="718.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (3 samples, 0.03%)</title><rect x="938.0" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="941.0" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (6 samples, 0.05%)</title><rect x="938.4" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (3 samples, 0.03%)</title><rect x="939.4" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (3 samples, 0.03%)</title><rect x="939.4" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (36 samples, 0.32%)</title><rect x="939.7" y="787.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (34 samples, 0.30%)</title><rect x="939.9" y="771.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (24 samples, 0.21%)</title><rect x="940.3" y="755.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.3" y="766.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (10 samples, 0.09%)</title><rect x="940.3" y="739.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="943.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (10 samples, 0.09%)</title><rect x="941.4" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.4" y="750.0"></text>
</g>
<g>
<title>Block::end_idx() const (7 samples, 0.06%)</title><rect x="941.6" y="723.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.6" y="734.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (5 samples, 0.04%)</title><rect x="941.8" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.03%)</title><rect x="942.4" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (5 samples, 0.04%)</title><rect x="942.8" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (556 samples, 4.90%)</title><rect x="943.6" y="787.0" width="57.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="946.6" y="798.0">PhaseC..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (25 samples, 0.22%)</title><rect x="944.7" y="771.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (41 samples, 0.36%)</title><rect x="947.3" y="771.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="948.1" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="948.6" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.6" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (19 samples, 0.17%)</title><rect x="949.1" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="952.1" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (7 samples, 0.06%)</title><rect x="949.1" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.1" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.07%)</title><rect x="950.0" y="739.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.0" y="750.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (3 samples, 0.03%)</title><rect x="951.3" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (42 samples, 0.37%)</title><rect x="951.6" y="771.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.6" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="951.8" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="952.1" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.1" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (34 samples, 0.30%)</title><rect x="952.4" y="755.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.4" y="766.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (13 samples, 0.11%)</title><rect x="952.5" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (13 samples, 0.11%)</title><rect x="954.0" y="739.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="750.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (3 samples, 0.03%)</title><rect x="955.5" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (71 samples, 0.63%)</title><rect x="955.9" y="771.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.9" y="782.0"></text>
</g>
<g>
<title>Block::end_idx() const (3 samples, 0.03%)</title><rect x="960.0" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.0" y="766.0"></text>
</g>
<g>
<title>Node::rematerialize() const (11 samples, 0.10%)</title><rect x="960.7" y="755.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.7" y="766.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 0.03%)</title><rect x="961.3" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (8 samples, 0.07%)</title><rect x="962.2" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (4 samples, 0.04%)</title><rect x="962.5" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (113 samples, 0.99%)</title><rect x="963.3" y="771.0" width="11.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.3" y="782.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (7 samples, 0.06%)</title><rect x="965.5" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (8 samples, 0.07%)</title><rect x="967.0" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.0" y="766.0"></text>
</g>
<g>
<title>Node::rematerialize() const (7 samples, 0.06%)</title><rect x="967.9" y="755.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="970.9" y="766.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (6 samples, 0.05%)</title><rect x="967.9" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (51 samples, 0.45%)</title><rect x="968.6" y="755.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.6" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (13 samples, 0.11%)</title><rect x="969.1" y="739.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.1" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (16 samples, 0.14%)</title><rect x="970.6" y="739.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.6" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (10 samples, 0.09%)</title><rect x="972.2" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.2" y="750.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (6 samples, 0.05%)</title><rect x="973.3" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.3" y="750.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (6 samples, 0.05%)</title><rect x="974.2" y="755.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="977.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (12 samples, 0.11%)</title><rect x="975.0" y="771.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.04%)</title><rect x="975.8" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (4 samples, 0.04%)</title><rect x="976.3" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (60 samples, 0.53%)</title><rect x="976.8" y="771.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.8" y="782.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.03%)</title><rect x="980.7" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.7" y="766.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (6 samples, 0.05%)</title><rect x="981.2" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.2" y="766.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (9 samples, 0.08%)</title><rect x="981.9" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.9" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (8 samples, 0.07%)</title><rect x="981.9" y="739.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (5 samples, 0.04%)</title><rect x="983.0" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (30 samples, 0.26%)</title><rect x="983.6" y="771.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.6" y="782.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (3 samples, 0.03%)</title><rect x="984.6" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (17 samples, 0.15%)</title><rect x="984.9" y="755.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (3 samples, 0.03%)</title><rect x="986.7" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.7" y="782.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (33 samples, 0.29%)</title><rect x="987.0" y="771.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.0" y="782.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (7 samples, 0.06%)</title><rect x="987.0" y="755.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.0" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (4 samples, 0.04%)</title><rect x="987.3" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.3" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (3 samples, 0.03%)</title><rect x="987.4" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.4" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (25 samples, 0.22%)</title><rect x="987.7" y="755.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.7" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (4 samples, 0.04%)</title><rect x="987.8" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.8" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (20 samples, 0.18%)</title><rect x="988.2" y="739.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.2" y="750.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.05%)</title><rect x="988.5" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="991.5" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.09%)</title><rect x="989.1" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.1" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="989.3" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.3" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (18 samples, 0.16%)</title><rect x="990.4" y="771.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.4" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (17 samples, 0.15%)</title><rect x="990.5" y="755.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="991.5" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.04%)</title><rect x="991.8" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (14 samples, 0.12%)</title><rect x="992.3" y="771.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="995.3" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="992.3" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.3" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (4 samples, 0.04%)</title><rect x="992.9" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="993.3" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (10 samples, 0.09%)</title><rect x="993.7" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.7" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (8 samples, 0.07%)</title><rect x="993.7" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.7" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (54 samples, 0.48%)</title><rect x="994.9" y="771.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.9" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (20 samples, 0.18%)</title><rect x="998.3" y="755.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.3" y="766.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="999.0" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.0" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (3 samples, 0.03%)</title><rect x="999.4" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="999.7" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1002.7" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (1,518 samples, 13.37%)</title><rect x="1001.5" y="803.0" width="157.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.5" y="814.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (5 samples, 0.04%)</title><rect x="1001.6" y="787.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.6" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (4 samples, 0.04%)</title><rect x="1001.6" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.6" y="782.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.03%)</title><rect x="1002.2" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.07%)</title><rect x="1002.5" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.07%)</title><rect x="1002.5" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="1002.6" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1005.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.03%)</title><rect x="1003.0" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1006.0" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.05%)</title><rect x="1003.4" y="787.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.4" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (7 samples, 0.06%)</title><rect x="1004.0" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.0" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (7 samples, 0.06%)</title><rect x="1004.0" y="771.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.0" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (4 samples, 0.04%)</title><rect x="1004.3" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1,423 samples, 12.53%)</title><rect x="1004.9" y="787.0" width="147.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1007.9" y="798.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (4 samples, 0.04%)</title><rect x="1005.1" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.1" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (4 samples, 0.04%)</title><rect x="1005.1" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.1" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (8 samples, 0.07%)</title><rect x="1005.5" y="771.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.5" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.04%)</title><rect x="1005.5" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1008.5" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1005.5" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.5" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1006.0" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (24 samples, 0.21%)</title><rect x="1006.7" y="771.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.7" y="782.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (6 samples, 0.05%)</title><rect x="1008.1" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.1" y="766.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (3 samples, 0.03%)</title><rect x="1008.7" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (30 samples, 0.26%)</title><rect x="1009.2" y="771.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1012.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (6 samples, 0.05%)</title><rect x="1010.8" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1011.1" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.03%)</title><rect x="1011.1" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.1" y="734.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (4 samples, 0.04%)</title><rect x="1011.9" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1,278 samples, 11.25%)</title><rect x="1012.3" y="771.0" width="132.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.3" y="782.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1,254 samples, 11.04%)</title><rect x="1014.8" y="755.0" width="130.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.8" y="766.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1,226 samples, 10.79%)</title><rect x="1015.8" y="739.0" width="127.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.8" y="750.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (17 samples, 0.15%)</title><rect x="1021.6" y="723.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.6" y="734.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (13 samples, 0.11%)</title><rect x="1021.6" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.6" y="718.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.05%)</title><rect x="1021.6" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.6" y="702.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (3 samples, 0.03%)</title><rect x="1021.9" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.9" y="686.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (3 samples, 0.03%)</title><rect x="1021.9" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.9" y="670.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="1021.9" y="643.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1024.9" y="654.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="1021.9" y="627.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1024.9" y="638.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1021.9" y="611.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1024.9" y="622.0"></text>
</g>
<g>
<title>large_malloc (3 samples, 0.03%)</title><rect x="1021.9" y="595.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1024.9" y="606.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (7 samples, 0.06%)</title><rect x="1022.2" y="691.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1025.2" y="702.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="1022.9" y="707.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1025.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.04%)</title><rect x="1023.4" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (4 samples, 0.04%)</title><rect x="1023.5" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1026.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1023.6" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (22 samples, 0.19%)</title><rect x="1023.9" y="723.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1026.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (11 samples, 0.10%)</title><rect x="1026.2" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (11 samples, 0.10%)</title><rect x="1026.2" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1,112 samples, 9.79%)</title><rect x="1027.6" y="723.0" width="115.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.6" y="734.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (162 samples, 1.43%)</title><rect x="1041.9" y="707.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (813 samples, 7.16%)</title><rect x="1058.7" y="707.0" width="84.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.7" y="718.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (8 samples, 0.07%)</title><rect x="1143.1" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.04%)</title><rect x="1143.6" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (11 samples, 0.10%)</title><rect x="1144.0" y="739.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (10 samples, 0.09%)</title><rect x="1145.1" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (25 samples, 0.22%)</title><rect x="1146.6" y="771.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (3 samples, 0.03%)</title><rect x="1147.5" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (12 samples, 0.11%)</title><rect x="1147.8" y="755.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (5 samples, 0.04%)</title><rect x="1148.3" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 0.24%)</title><rect x="1149.2" y="771.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (27 samples, 0.24%)</title><rect x="1149.2" y="755.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.2" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (7 samples, 0.06%)</title><rect x="1151.1" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.1" y="750.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (4 samples, 0.04%)</title><rect x="1151.4" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="734.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (4 samples, 0.04%)</title><rect x="1151.4" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.04%)</title><rect x="1152.2" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.2" y="782.0"></text>
</g>
<g>
<title>Chunk::next_chop() (5 samples, 0.04%)</title><rect x="1152.2" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="766.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (5 samples, 0.04%)</title><rect x="1152.2" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.2" y="750.0"></text>
</g>
<g>
<title>free_large (4 samples, 0.04%)</title><rect x="1152.3" y="723.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1155.3" y="734.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (4 samples, 0.04%)</title><rect x="1152.3" y="707.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1155.3" y="718.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (4 samples, 0.04%)</title><rect x="1152.3" y="691.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1155.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (51 samples, 0.45%)</title><rect x="1153.0" y="787.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.0" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (50 samples, 0.44%)</title><rect x="1153.1" y="771.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1153.8" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1154.2" y="755.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="766.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1154.2" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1154.6" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.6" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (4 samples, 0.04%)</title><rect x="1155.1" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.1" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.03%)</title><rect x="1155.5" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.08%)</title><rect x="1155.8" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.03%)</title><rect x="1156.3" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="750.0"></text>
</g>
<g>
<title>NodeHash::grow() (3 samples, 0.03%)</title><rect x="1156.3" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (3 samples, 0.03%)</title><rect x="1156.3" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="718.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (8 samples, 0.07%)</title><rect x="1156.8" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="766.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (6 samples, 0.05%)</title><rect x="1157.0" y="739.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.0" y="750.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (5 samples, 0.04%)</title><rect x="1157.1" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.04%)</title><rect x="1157.6" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.6" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.04%)</title><rect x="1158.5" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="798.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (4 samples, 0.04%)</title><rect x="1159.2" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (50 samples, 0.44%)</title><rect x="1159.8" y="803.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (50 samples, 0.44%)</title><rect x="1159.8" y="787.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (50 samples, 0.44%)</title><rect x="1159.8" y="771.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (50 samples, 0.44%)</title><rect x="1159.8" y="755.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (50 samples, 0.44%)</title><rect x="1159.8" y="739.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (40 samples, 0.35%)</title><rect x="1159.9" y="723.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (34 samples, 0.30%)</title><rect x="1160.2" y="707.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (34 samples, 0.30%)</title><rect x="1160.2" y="691.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (34 samples, 0.30%)</title><rect x="1160.2" y="675.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (34 samples, 0.30%)</title><rect x="1160.2" y="659.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (34 samples, 0.30%)</title><rect x="1160.2" y="643.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (30 samples, 0.26%)</title><rect x="1160.2" y="627.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (25 samples, 0.22%)</title><rect x="1160.5" y="611.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (25 samples, 0.22%)</title><rect x="1160.5" y="595.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (24 samples, 0.21%)</title><rect x="1160.5" y="579.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (24 samples, 0.21%)</title><rect x="1160.5" y="563.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (24 samples, 0.21%)</title><rect x="1160.5" y="547.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (23 samples, 0.20%)</title><rect x="1160.5" y="531.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (22 samples, 0.19%)</title><rect x="1160.6" y="515.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (22 samples, 0.19%)</title><rect x="1160.6" y="499.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 0.18%)</title><rect x="1160.7" y="483.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (20 samples, 0.18%)</title><rect x="1160.7" y="467.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (20 samples, 0.18%)</title><rect x="1160.7" y="451.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.18%)</title><rect x="1160.7" y="435.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.18%)</title><rect x="1160.7" y="419.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.18%)</title><rect x="1160.7" y="403.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.17%)</title><rect x="1160.8" y="387.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.17%)</title><rect x="1160.8" y="371.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 0.16%)</title><rect x="1160.8" y="355.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.14%)</title><rect x="1160.9" y="339.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.10%)</title><rect x="1160.9" y="323.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.10%)</title><rect x="1160.9" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.10%)</title><rect x="1160.9" y="291.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.10%)</title><rect x="1160.9" y="275.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.10%)</title><rect x="1160.9" y="259.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1161.0" y="243.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="1161.1" y="227.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.06%)</title><rect x="1161.1" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.06%)</title><rect x="1161.1" y="195.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="1161.1" y="179.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.05%)</title><rect x="1161.2" y="163.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.04%)</title><rect x="1161.2" y="147.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1161.2" y="131.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1161.2" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.04%)</title><rect x="1162.1" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.04%)</title><rect x="1162.1" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.04%)</title><rect x="1162.1" y="291.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1162.1" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1162.1" y="259.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.04%)</title><rect x="1162.1" y="243.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.04%)</title><rect x="1162.1" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1162.2" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1162.2" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1162.2" y="179.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1162.2" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1162.2" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1162.2" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1162.2" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1162.2" y="99.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1162.2" y="83.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1162.2" y="67.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1162.3" y="51.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1162.3" y="35.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.7" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1163.7" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1163.7" y="675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1163.7" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1163.7" y="643.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1163.7" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1163.7" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (5 samples, 0.04%)</title><rect x="1164.0" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (8 samples, 0.07%)</title><rect x="1165.0" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.03%)</title><rect x="1165.0" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="798.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (4 samples, 0.04%)</title><rect x="1165.3" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::member(Node*) (3 samples, 0.03%)</title><rect x="1165.4" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (5 samples, 0.04%)</title><rect x="1165.8" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1165.8" y="787.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.8" y="798.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (4 samples, 0.04%)</title><rect x="1166.4" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.4" y="846.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (3 samples, 0.03%)</title><rect x="1166.4" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.4" y="830.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (3 samples, 0.03%)</title><rect x="1166.4" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (53 samples, 0.47%)</title><rect x="1167.0" y="835.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (53 samples, 0.47%)</title><rect x="1167.0" y="819.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (53 samples, 0.47%)</title><rect x="1167.0" y="803.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (46 samples, 0.41%)</title><rect x="1167.0" y="787.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() (20 samples, 0.18%)</title><rect x="1167.0" y="771.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (20 samples, 0.18%)</title><rect x="1167.0" y="755.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (19 samples, 0.17%)</title><rect x="1167.1" y="739.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (19 samples, 0.17%)</title><rect x="1167.1" y="723.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (16 samples, 0.14%)</title><rect x="1167.2" y="707.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (15 samples, 0.13%)</title><rect x="1167.4" y="691.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (14 samples, 0.12%)</title><rect x="1167.5" y="675.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (8 samples, 0.07%)</title><rect x="1167.5" y="659.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (8 samples, 0.07%)</title><rect x="1167.5" y="643.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.04%)</title><rect x="1167.7" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.04%)</title><rect x="1167.7" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.7" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (4 samples, 0.04%)</title><rect x="1168.4" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1168.4" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1168.4" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.4" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (3 samples, 0.03%)</title><rect x="1168.5" y="611.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (3 samples, 0.03%)</title><rect x="1168.5" y="595.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="606.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1168.5" y="579.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (8 samples, 0.07%)</title><rect x="1169.1" y="771.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (4 samples, 0.04%)</title><rect x="1169.1" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.1" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (4 samples, 0.04%)</title><rect x="1169.5" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.5" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (4 samples, 0.04%)</title><rect x="1169.5" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (17 samples, 0.15%)</title><rect x="1169.9" y="771.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.03%)</title><rect x="1169.9" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (3 samples, 0.03%)</title><rect x="1169.9" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (14 samples, 0.12%)</title><rect x="1170.3" y="755.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (3 samples, 0.03%)</title><rect x="1170.5" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (4 samples, 0.04%)</title><rect x="1170.8" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="750.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (3 samples, 0.03%)</title><rect x="1171.3" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="750.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (7 samples, 0.06%)</title><rect x="1171.8" y="787.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (7 samples, 0.06%)</title><rect x="1171.8" y="771.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (5 samples, 0.04%)</title><rect x="1171.8" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (5 samples, 0.04%)</title><rect x="1171.8" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (3 samples, 0.03%)</title><rect x="1171.8" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (3 samples, 0.03%)</title><rect x="1171.8" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1172.5" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="846.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1172.5" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="830.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1172.5" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="814.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="1172.5" y="787.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1175.5" y="798.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="1172.5" y="771.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1175.5" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (25 samples, 0.22%)</title><rect x="1173.5" y="851.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (24 samples, 0.21%)</title><rect x="1173.5" y="835.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (24 samples, 0.21%)</title><rect x="1173.5" y="819.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (22 samples, 0.19%)</title><rect x="1173.5" y="803.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.18%)</title><rect x="1173.5" y="787.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (9 samples, 0.08%)</title><rect x="1176.1" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.04%)</title><rect x="1176.1" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.04%)</title><rect x="1176.1" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (3 samples, 0.03%)</title><rect x="1176.1" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (3 samples, 0.03%)</title><rect x="1176.1" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.04%)</title><rect x="1176.5" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.04%)</title><rect x="1176.5" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.5" y="846.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (5 samples, 0.04%)</title><rect x="1176.5" y="819.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1179.5" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (5 samples, 0.04%)</title><rect x="1176.5" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.04%)</title><rect x="1176.5" y="787.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.5" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (61 samples, 0.54%)</title><rect x="1177.0" y="899.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (61 samples, 0.54%)</title><rect x="1177.0" y="883.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1177.2" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1177.2" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.03%)</title><rect x="1177.2" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1177.2" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (14 samples, 0.12%)</title><rect x="1177.5" y="867.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>os::NakedYield() (14 samples, 0.12%)</title><rect x="1177.5" y="851.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="862.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (14 samples, 0.12%)</title><rect x="1177.5" y="835.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (42 samples, 0.37%)</title><rect x="1179.0" y="867.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="878.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (42 samples, 0.37%)</title><rect x="1179.0" y="851.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="862.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (42 samples, 0.37%)</title><rect x="1179.0" y="835.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="846.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (42 samples, 0.37%)</title><rect x="1179.0" y="819.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="830.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (42 samples, 0.37%)</title><rect x="1179.0" y="803.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="814.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (42 samples, 0.37%)</title><rect x="1179.0" y="787.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (4 samples, 0.04%)</title><rect x="1179.4" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (4 samples, 0.04%)</title><rect x="1179.4" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.04%)</title><rect x="1179.4" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="750.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.04%)</title><rect x="1179.4" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="734.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 0.04%)</title><rect x="1179.4" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.04%)</title><rect x="1179.4" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.04%)</title><rect x="1179.4" y="675.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (28 samples, 0.25%)</title><rect x="1180.4" y="771.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (27 samples, 0.24%)</title><rect x="1180.5" y="755.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (64 samples, 0.56%)</title><rect x="1183.4" y="899.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.03%)</title><rect x="1183.4" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (61 samples, 0.54%)</title><rect x="1183.7" y="883.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (61 samples, 0.54%)</title><rect x="1183.7" y="867.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.7" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (60 samples, 0.53%)</title><rect x="1183.8" y="851.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (58 samples, 0.51%)</title><rect x="1183.9" y="835.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>__gettimeofday (3 samples, 0.03%)</title><rect x="1183.9" y="819.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1186.9" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (53 samples, 0.47%)</title><rect x="1184.2" y="819.0" width="5.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
</g>
</svg>

