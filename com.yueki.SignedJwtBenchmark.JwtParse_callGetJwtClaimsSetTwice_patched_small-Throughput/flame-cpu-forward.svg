<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (9,399 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.02%)</title><rect x="10.1" y="659.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.1" y="670.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.02%)</title><rect x="10.1" y="643.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,633 samples, 91.85%)</title><rect x="10.4" y="659.0" width="1083.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.4" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,633 samples, 91.85%)</title><rect x="10.4" y="643.0" width="1083.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,633 samples, 91.85%)</title><rect x="10.4" y="627.0" width="1083.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.4" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,633 samples, 91.85%)</title><rect x="10.4" y="611.0" width="1083.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="622.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,633 samples, 91.85%)</title><rect x="10.4" y="595.0" width="1083.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="606.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,633 samples, 91.85%)</title><rect x="10.4" y="579.0" width="1083.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="590.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,633 samples, 91.85%)</title><rect x="10.4" y="563.0" width="1083.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.4" y="574.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,633 samples, 91.85%)</title><rect x="10.4" y="547.0" width="1083.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="558.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,633 samples, 91.85%)</title><rect x="10.4" y="531.0" width="1083.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="542.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,633 samples, 91.85%)</title><rect x="10.4" y="515.0" width="1083.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.4" y="526.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,633 samples, 91.85%)</title><rect x="10.4" y="499.0" width="1083.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="510.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,633 samples, 91.85%)</title><rect x="10.4" y="483.0" width="1083.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="494.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_small_Throughput (8,633 samples, 91.85%)</title><rect x="10.4" y="467.0" width="1083.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="478.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_small_Throu..</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_small_thrpt_jmhStub (8,456 samples, 89.97%)</title><rect x="10.4" y="451.0" width="1061.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="462.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_small_jmhTest.JwtParse_callGetJwtClaimsSetTwice_patched_small_th..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_small (8,450 samples, 89.90%)</title><rect x="11.1" y="435.0" width="1060.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="446.0">com/yueki/SignedJwtBenchmark.JwtParse_callGetJwtClaimsSetTwice_patched_small</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice (8,438 samples, 89.78%)</title><rect x="11.1" y="419.0" width="1059.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.1" y="430.0">com/yueki/SignedJwtBenchmark.callGetJwtClaimsSetTwice</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (7,401 samples, 78.74%)</title><rect x="11.4" y="403.0" width="929.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.4" y="414.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (27 samples, 0.29%)</title><rect x="11.8" y="387.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (27 samples, 0.29%)</title><rect x="11.8" y="371.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (27 samples, 0.29%)</title><rect x="11.8" y="355.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (2 samples, 0.02%)</title><rect x="12.8" y="339.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="12.8" y="323.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (14 samples, 0.15%)</title><rect x="13.0" y="339.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (3 samples, 0.03%)</title><rect x="14.8" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="14.8" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="14.8" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.8" y="318.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="14.8" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="302.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="14.9" y="275.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="286.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (2 samples, 0.02%)</title><rect x="14.9" y="259.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.9" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (7,371 samples, 78.42%)</title><rect x="15.1" y="387.0" width="925.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.1" y="398.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (56 samples, 0.60%)</title><rect x="15.6" y="371.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="382.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (54 samples, 0.57%)</title><rect x="15.9" y="355.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.9" y="366.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (12 samples, 0.13%)</title><rect x="16.0" y="339.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.0" y="350.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getClassName (2 samples, 0.02%)</title><rect x="16.5" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.05%)</title><rect x="16.9" y="323.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="17.2" y="307.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.2" y="318.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getServices (3 samples, 0.03%)</title><rect x="17.5" y="339.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getProviderList (2 samples, 0.02%)</title><rect x="17.7" y="323.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="334.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getThreadProviderList (2 samples, 0.02%)</title><rect x="17.7" y="307.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="318.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (36 samples, 0.38%)</title><rect x="17.9" y="339.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.9" y="350.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (33 samples, 0.35%)</title><rect x="18.3" y="323.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.3" y="334.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (33 samples, 0.35%)</title><rect x="18.3" y="307.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="318.0"></text>
</g>
<g>
<title>java/security/Provider.getService (25 samples, 0.27%)</title><rect x="18.9" y="291.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.9" y="302.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (7 samples, 0.07%)</title><rect x="20.7" y="275.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.7" y="286.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (7 samples, 0.07%)</title><rect x="20.7" y="259.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (7 samples, 0.07%)</title><rect x="20.7" y="243.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 0.03%)</title><rect x="21.7" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="21.7" y="259.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.7" y="270.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="22.1" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.1" y="302.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (3 samples, 0.03%)</title><rect x="22.1" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (316 samples, 3.36%)</title><rect x="22.7" y="371.0" width="39.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.7" y="382.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (316 samples, 3.36%)</title><rect x="22.7" y="355.0" width="39.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.7" y="366.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (179 samples, 1.90%)</title><rect x="35.9" y="339.0" width="22.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="350.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (9 samples, 0.10%)</title><rect x="57.2" y="323.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (29 samples, 0.31%)</title><rect x="58.3" y="339.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (29 samples, 0.31%)</title><rect x="58.3" y="323.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (2 samples, 0.02%)</title><rect x="58.6" y="307.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="58.6" y="291.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (22 samples, 0.23%)</title><rect x="59.0" y="307.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (2 samples, 0.02%)</title><rect x="61.7" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.7" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="62.1" y="339.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="65.1" y="350.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (71 samples, 0.76%)</title><rect x="62.4" y="371.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="382.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (71 samples, 0.76%)</title><rect x="62.4" y="355.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.4" y="366.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (71 samples, 0.76%)</title><rect x="62.4" y="339.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.4" y="350.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (7 samples, 0.07%)</title><rect x="62.9" y="323.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.9" y="334.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (4 samples, 0.04%)</title><rect x="62.9" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="63.5" y="307.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.5" y="318.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (3 samples, 0.03%)</title><rect x="63.7" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.7" y="334.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (3 samples, 0.03%)</title><rect x="63.7" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.7" y="318.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (3 samples, 0.03%)</title><rect x="63.7" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.7" y="302.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (2 samples, 0.02%)</title><rect x="63.7" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.7" y="286.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (56 samples, 0.60%)</title><rect x="64.1" y="323.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.1" y="334.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (55 samples, 0.59%)</title><rect x="64.2" y="307.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (12 samples, 0.13%)</title><rect x="64.5" y="291.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (11 samples, 0.12%)</title><rect x="64.5" y="275.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (6 samples, 0.06%)</title><rect x="64.5" y="259.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (6 samples, 0.06%)</title><rect x="64.5" y="243.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.5" y="254.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (3 samples, 0.03%)</title><rect x="64.7" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.7" y="238.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (3 samples, 0.03%)</title><rect x="65.5" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.5" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyConstructor (2 samples, 0.02%)</title><rect x="65.5" y="243.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.5" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (2 samples, 0.02%)</title><rect x="65.5" y="227.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="238.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (39 samples, 0.41%)</title><rect x="66.0" y="291.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.0" y="302.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (38 samples, 0.40%)</title><rect x="66.0" y="275.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.0" y="286.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (38 samples, 0.40%)</title><rect x="66.0" y="259.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.0" y="270.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (38 samples, 0.40%)</title><rect x="66.0" y="243.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.0" y="254.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (38 samples, 0.40%)</title><rect x="66.0" y="227.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.0" y="238.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (38 samples, 0.40%)</title><rect x="66.0" y="211.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.0" y="222.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (38 samples, 0.40%)</title><rect x="66.0" y="195.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.0" y="206.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (7 samples, 0.07%)</title><rect x="66.0" y="179.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.07%)</title><rect x="66.0" y="163.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.0" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (31 samples, 0.33%)</title><rect x="66.9" y="179.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.9" y="190.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (22 samples, 0.23%)</title><rect x="66.9" y="163.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.9" y="174.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (19 samples, 0.20%)</title><rect x="66.9" y="147.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.9" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.12%)</title><rect x="67.1" y="131.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.1" y="142.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.11%)</title><rect x="67.1" y="115.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.1" y="126.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (4 samples, 0.04%)</title><rect x="67.1" y="99.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.1" y="110.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="67.1" y="83.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="70.1" y="94.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (6 samples, 0.06%)</title><rect x="67.6" y="99.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.6" y="110.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.&lt;init&gt; (6 samples, 0.06%)</title><rect x="67.6" y="83.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.6" y="94.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.&lt;init&gt; (6 samples, 0.06%)</title><rect x="67.6" y="67.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.6" y="78.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.06%)</title><rect x="68.5" y="131.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.5" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.06%)</title><rect x="68.5" y="115.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.5" y="126.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (3 samples, 0.03%)</title><rect x="69.3" y="147.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.3" y="158.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (8 samples, 0.09%)</title><rect x="69.6" y="163.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.6" y="174.0"></text>
</g>
<g>
<title>java/security/Provider.getService (4 samples, 0.04%)</title><rect x="69.9" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="72.9" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.02%)</title><rect x="70.1" y="131.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.1" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="70.1" y="115.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.1" y="126.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (2 samples, 0.02%)</title><rect x="70.4" y="147.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.4" y="158.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (2 samples, 0.02%)</title><rect x="70.4" y="131.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.4" y="142.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (2 samples, 0.02%)</title><rect x="70.9" y="291.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.9" y="302.0"></text>
</g>
<g>
<title>java/security/Signature.update (132 samples, 1.40%)</title><rect x="71.3" y="371.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.3" y="382.0"></text>
</g>
<g>
<title>java/security/Signature.update (132 samples, 1.40%)</title><rect x="71.3" y="355.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.3" y="366.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (132 samples, 1.40%)</title><rect x="71.3" y="339.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.3" y="350.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (132 samples, 1.40%)</title><rect x="71.3" y="323.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.3" y="334.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (132 samples, 1.40%)</title><rect x="71.3" y="307.0" width="16.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.3" y="318.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (132 samples, 1.40%)</title><rect x="71.3" y="291.0" width="16.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.3" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="71.3" y="275.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="74.3" y="286.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (130 samples, 1.38%)</title><rect x="71.5" y="275.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.5" y="286.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (129 samples, 1.37%)</title><rect x="71.6" y="259.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.6" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (124 samples, 1.32%)</title><rect x="72.3" y="243.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.3" y="254.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (6 samples, 0.06%)</title><rect x="85.6" y="227.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.6" y="238.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (12 samples, 0.13%)</title><rect x="86.3" y="227.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.3" y="238.0"></text>
</g>
<g>
<title>java/security/Signature.verify (6,792 samples, 72.26%)</title><rect x="87.8" y="371.0" width="852.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.8" y="382.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (6,791 samples, 72.25%)</title><rect x="88.0" y="355.0" width="852.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.0" y="366.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (6,783 samples, 72.17%)</title><rect x="89.0" y="339.0" width="851.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.0" y="350.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="90.0" y="323.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="93.0" y="334.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (23 samples, 0.24%)</title><rect x="90.5" y="323.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="334.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (11 samples, 0.12%)</title><rect x="91.4" y="307.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.4" y="318.0"></text>
</g>
<g>
<title>java/math/BigInteger.bitLength (7 samples, 0.07%)</title><rect x="91.9" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.9" y="302.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.getModulus (5 samples, 0.05%)</title><rect x="92.7" y="307.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.7" y="318.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (6,212 samples, 66.09%)</title><rect x="93.4" y="323.0" width="779.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="334.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (6,210 samples, 66.07%)</title><rect x="93.6" y="307.0" width="779.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="318.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (6,142 samples, 65.35%)</title><rect x="93.9" y="291.0" width="771.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.9" y="302.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.equals (6 samples, 0.06%)</title><rect x="94.6" y="275.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.6" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (6,127 samples, 65.19%)</title><rect x="95.4" y="275.0" width="769.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.4" y="286.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (316 samples, 3.36%)</title><rect x="100.5" y="259.0" width="39.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="103.5" y="270.0">Sha..</text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (298 samples, 3.17%)</title><rect x="102.8" y="243.0" width="37.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="105.8" y="254.0">mon..</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (330 samples, 3.51%)</title><rect x="140.2" y="259.0" width="41.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="143.2" y="270.0">Sha..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (317 samples, 3.37%)</title><rect x="141.8" y="243.0" width="39.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="144.8" y="254.0">mon..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (5 samples, 0.05%)</title><rect x="181.6" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.6" y="270.0"></text>
</g>
<g>
<title>mulAdd (4 samples, 0.04%)</title><rect x="181.7" y="243.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="184.7" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (25 samples, 0.27%)</title><rect x="182.2" y="259.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.2" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="184.3" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="187.3" y="254.0"></text>
</g>
<g>
<title>mulAdd (6 samples, 0.06%)</title><rect x="184.6" y="243.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="187.6" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (8 samples, 0.09%)</title><rect x="185.4" y="259.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.4" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.intArrayCmpToLen (6 samples, 0.06%)</title><rect x="185.5" y="243.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.5" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (6 samples, 0.06%)</title><rect x="186.4" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.4" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (3 samples, 0.03%)</title><rect x="186.8" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.8" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (10 samples, 0.11%)</title><rect x="187.1" y="259.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (4 samples, 0.04%)</title><rect x="187.1" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.1" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="187.1" y="227.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="190.1" y="238.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (6 samples, 0.06%)</title><rect x="187.6" y="243.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.6" y="254.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.&lt;init&gt; (2 samples, 0.02%)</title><rect x="188.4" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="188.4" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.4" y="254.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (834 samples, 8.87%)</title><rect x="188.7" y="259.0" width="104.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.7" y="270.0">java/math/Mu..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (832 samples, 8.85%)</title><rect x="188.8" y="243.0" width="104.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.8" y="254.0">java/math/Mu..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (832 samples, 8.85%)</title><rect x="188.8" y="227.0" width="104.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.8" y="238.0">java/math/Mu..</text>
</g>
<g>
<title>java/math/MutableBigInteger.clear (2 samples, 0.02%)</title><rect x="189.2" y="211.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.2" y="222.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (824 samples, 8.77%)</title><rect x="189.4" y="211.0" width="103.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.4" y="222.0">java/math/Mu..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (29 samples, 0.31%)</title><rect x="203.3" y="195.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.3" y="206.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (662 samples, 7.04%)</title><rect x="207.0" y="195.0" width="83.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.0" y="206.0">java/math..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (4 samples, 0.04%)</title><rect x="290.1" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.1" y="206.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.unsignedLongCompare (12 samples, 0.13%)</title><rect x="290.6" y="195.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.6" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="292.1" y="195.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.1" y="206.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="292.6" y="195.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="295.6" y="206.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (3 samples, 0.03%)</title><rect x="292.9" y="211.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.9" y="222.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (4,333 samples, 46.10%)</title><rect x="293.4" y="259.0" width="543.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.4" y="270.0">java/math/MutableBigInteger.normalize</text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (4,333 samples, 46.10%)</title><rect x="293.4" y="243.0" width="543.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="296.4" y="254.0">SharedRuntime::montgomery_square(int*, int*, int, long, int*)</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4,240 samples, 45.11%)</title><rect x="305.0" y="227.0" width="532.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="308.0" y="238.0">montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned..</text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (6 samples, 0.06%)</title><rect x="837.3" y="259.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.3" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.primitiveLeftShift (4 samples, 0.04%)</title><rect x="837.6" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.6" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="838.1" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="841.1" y="270.0"></text>
</g>
<g>
<title>mulAdd (2 samples, 0.02%)</title><rect x="838.3" y="243.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="841.3" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="838.6" y="259.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="841.6" y="270.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (19 samples, 0.20%)</title><rect x="839.4" y="259.0" width="2.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="842.4" y="270.0"></text>
</g>
<g>
<title>mulAdd (182 samples, 1.94%)</title><rect x="841.7" y="259.0" width="22.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="844.7" y="270.0">m..</text>
</g>
<g>
<title>java/math/BigInteger.testBit (3 samples, 0.03%)</title><rect x="864.6" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="867.6" y="286.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (54 samples, 0.57%)</title><rect x="865.0" y="291.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.0" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (34 samples, 0.36%)</title><rect x="865.8" y="275.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.8" y="286.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (4 samples, 0.04%)</title><rect x="866.1" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="869.1" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (3 samples, 0.03%)</title><rect x="866.2" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.2" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (28 samples, 0.30%)</title><rect x="866.6" y="259.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.6" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (13 samples, 0.14%)</title><rect x="870.1" y="275.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="873.1" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (9 samples, 0.10%)</title><rect x="870.6" y="259.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.6" y="270.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.02%)</title><rect x="871.5" y="243.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.5" y="254.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (12 samples, 0.13%)</title><rect x="871.7" y="291.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.7" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (11 samples, 0.12%)</title><rect x="871.9" y="275.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="874.9" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.getInt (8 samples, 0.09%)</title><rect x="872.2" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="875.2" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (2 samples, 0.02%)</title><rect x="873.0" y="243.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.0" y="254.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (399 samples, 4.25%)</title><rect x="873.2" y="323.0" width="50.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.2" y="334.0">sun/s..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (398 samples, 4.23%)</title><rect x="873.4" y="307.0" width="49.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.4" y="318.0">sun/s..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (397 samples, 4.22%)</title><rect x="873.5" y="291.0" width="49.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="876.5" y="302.0">javax..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (397 samples, 4.22%)</title><rect x="873.5" y="275.0" width="49.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="876.5" y="286.0">java/..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (397 samples, 4.22%)</title><rect x="873.5" y="259.0" width="49.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.5" y="270.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (397 samples, 4.22%)</title><rect x="873.5" y="243.0" width="49.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.5" y="254.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (397 samples, 4.22%)</title><rect x="873.5" y="227.0" width="49.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="876.5" y="238.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (395 samples, 4.20%)</title><rect x="873.8" y="211.0" width="49.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.8" y="222.0">java/..</text>
</g>
<g>
<title>JVM_FillInStackTrace (4 samples, 0.04%)</title><rect x="874.9" y="195.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="877.9" y="206.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (379 samples, 4.03%)</title><rect x="875.4" y="195.0" width="47.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="878.4" y="206.0">Java..</text>
</g>
<g>
<title>JVM_FillInStackTrace (370 samples, 3.94%)</title><rect x="876.0" y="179.0" width="46.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="879.0" y="190.0">JVM_..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="876.4" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="879.4" y="174.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="877.0" y="163.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.05%)</title><rect x="877.4" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.4" y="174.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (353 samples, 3.76%)</title><rect x="878.0" y="163.0" width="44.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.0" y="174.0">java..</text>
</g>
<g>
<title>CompressedReadStream::read_int() (2 samples, 0.02%)</title><rect x="878.4" y="147.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="881.4" y="158.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="879.0" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.0" y="158.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (2 samples, 0.02%)</title><rect x="879.3" y="147.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.3" y="158.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="879.7" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.7" y="158.0"></text>
</g>
<g>
<title>PreserveExceptionMark::~PreserveExceptionMark() (2 samples, 0.02%)</title><rect x="880.0" y="147.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="883.0" y="158.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (2 samples, 0.02%)</title><rect x="880.4" y="147.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="883.4" y="158.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (320 samples, 3.40%)</title><rect x="880.7" y="147.0" width="40.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="883.7" y="158.0">jav..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (39 samples, 0.41%)</title><rect x="888.6" y="131.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="142.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="888.7" y="115.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.7" y="126.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (33 samples, 0.35%)</title><rect x="888.9" y="115.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.9" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (12 samples, 0.13%)</title><rect x="889.6" y="99.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.6" y="110.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="890.1" y="83.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.1" y="94.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="890.3" y="83.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.3" y="94.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (3 samples, 0.03%)</title><rect x="890.7" y="83.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="893.7" y="94.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (5 samples, 0.05%)</title><rect x="891.1" y="99.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.1" y="110.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (2 samples, 0.02%)</title><rect x="891.5" y="83.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.5" y="94.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.10%)</title><rect x="891.7" y="99.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.7" y="110.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (7 samples, 0.07%)</title><rect x="892.0" y="83.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.0" y="94.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.02%)</title><rect x="892.6" y="67.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.6" y="78.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="893.2" y="115.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.2" y="126.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (58 samples, 0.62%)</title><rect x="893.5" y="131.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.5" y="142.0"></text>
</g>
<g>
<title>objArrayOopDesc::obj_at_put(int, oopDesc*) (2 samples, 0.02%)</title><rect x="900.4" y="115.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.4" y="126.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="900.7" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.7" y="142.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (6 samples, 0.06%)</title><rect x="901.0" y="131.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.0" y="142.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (2 samples, 0.02%)</title><rect x="901.7" y="131.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.7" y="142.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (16 samples, 0.17%)</title><rect x="902.1" y="131.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.1" y="142.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (11 samples, 0.12%)</title><rect x="902.1" y="115.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.1" y="126.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.09%)</title><rect x="902.1" y="99.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.1" y="110.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.09%)</title><rect x="902.1" y="83.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="905.1" y="94.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="903.3" y="99.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.3" y="110.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (2 samples, 0.02%)</title><rect x="903.6" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.6" y="126.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="903.9" y="115.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="906.9" y="126.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (9 samples, 0.10%)</title><rect x="904.1" y="131.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.1" y="142.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (11 samples, 0.12%)</title><rect x="905.3" y="131.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.3" y="142.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="906.8" y="131.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.8" y="142.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.02%)</title><rect x="907.0" y="131.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="910.0" y="142.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (3 samples, 0.03%)</title><rect x="907.3" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="910.3" y="142.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.05%)</title><rect x="907.6" y="131.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.6" y="142.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (80 samples, 0.85%)</title><rect x="908.3" y="131.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.3" y="142.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.02%)</title><rect x="908.7" y="115.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="911.7" y="126.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (49 samples, 0.52%)</title><rect x="908.9" y="115.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.9" y="126.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.04%)</title><rect x="909.7" y="99.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.7" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (35 samples, 0.37%)</title><rect x="910.2" y="99.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.2" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (28 samples, 0.30%)</title><rect x="910.3" y="83.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.3" y="94.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (25 samples, 0.27%)</title><rect x="910.7" y="67.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.7" y="78.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (6 samples, 0.06%)</title><rect x="913.8" y="83.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.8" y="94.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (4 samples, 0.04%)</title><rect x="914.6" y="99.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="917.6" y="110.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (6 samples, 0.06%)</title><rect x="915.1" y="115.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.1" y="126.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.02%)</title><rect x="915.1" y="99.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.1" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.04%)</title><rect x="915.3" y="99.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.3" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="915.3" y="83.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.3" y="94.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.03%)</title><rect x="915.3" y="67.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.3" y="78.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (20 samples, 0.21%)</title><rect x="915.8" y="115.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="918.8" y="126.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (2 samples, 0.02%)</title><rect x="916.3" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.3" y="110.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.02%)</title><rect x="916.6" y="99.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.6" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.13%)</title><rect x="916.8" y="99.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.8" y="110.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (9 samples, 0.10%)</title><rect x="917.2" y="83.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.2" y="94.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (9 samples, 0.10%)</title><rect x="917.2" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.2" y="78.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc(unsigned char*, bool) (5 samples, 0.05%)</title><rect x="918.3" y="131.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.3" y="142.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (6 samples, 0.06%)</title><rect x="918.9" y="131.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.9" y="142.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (6 samples, 0.06%)</title><rect x="918.9" y="115.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.9" y="126.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (2 samples, 0.02%)</title><rect x="919.7" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.7" y="142.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (2 samples, 0.02%)</title><rect x="920.0" y="131.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.0" y="142.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (3 samples, 0.03%)</title><rect x="920.3" y="131.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="923.3" y="142.0"></text>
</g>
<g>
<title>pthread_getspecific (6 samples, 0.06%)</title><rect x="921.3" y="147.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="924.3" y="158.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (2 samples, 0.02%)</title><rect x="922.1" y="147.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="925.1" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.03%)</title><rect x="922.6" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.6" y="190.0"></text>
</g>
<g>
<title>jsqrt (3 samples, 0.03%)</title><rect x="923.0" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="926.0" y="206.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (91 samples, 0.97%)</title><rect x="923.3" y="323.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.3" y="334.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.6" y="307.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.6" y="318.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (27 samples, 0.29%)</title><rect x="923.8" y="307.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.8" y="318.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (27 samples, 0.29%)</title><rect x="923.8" y="291.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.8" y="302.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.available (2 samples, 0.02%)</title><rect x="924.8" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.8" y="286.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.available (2 samples, 0.02%)</title><rect x="924.8" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="927.8" y="270.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (15 samples, 0.16%)</title><rect x="925.2" y="275.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.2" y="286.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (14 samples, 0.15%)</title><rect x="925.4" y="259.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="928.4" y="270.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (10 samples, 0.11%)</title><rect x="925.9" y="243.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.9" y="254.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (5 samples, 0.05%)</title><rect x="926.0" y="227.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.0" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="926.6" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.6" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="926.9" y="227.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="929.9" y="238.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (10 samples, 0.11%)</title><rect x="927.2" y="307.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.2" y="318.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.available (3 samples, 0.03%)</title><rect x="928.0" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="931.0" y="302.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.equals (3 samples, 0.03%)</title><rect x="928.5" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="931.5" y="318.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (47 samples, 0.50%)</title><rect x="928.9" y="307.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="931.9" y="318.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (3 samples, 0.03%)</title><rect x="929.9" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.9" y="302.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (3 samples, 0.03%)</title><rect x="929.9" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.9" y="286.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (2 samples, 0.02%)</title><rect x="930.0" y="259.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.0" y="270.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (32 samples, 0.34%)</title><rect x="930.2" y="291.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.2" y="302.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (25 samples, 0.27%)</title><rect x="931.1" y="275.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.1" y="286.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getByte (17 samples, 0.18%)</title><rect x="931.4" y="259.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.4" y="270.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (16 samples, 0.17%)</title><rect x="931.5" y="243.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.5" y="254.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (4 samples, 0.04%)</title><rect x="933.5" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="936.5" y="270.0"></text>
</g>
<g>
<title>java/io/InputStream.read (4 samples, 0.04%)</title><rect x="933.5" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="936.5" y="254.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (4 samples, 0.04%)</title><rect x="933.5" y="227.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="936.5" y="238.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.toDerInputStream (3 samples, 0.03%)</title><rect x="934.3" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="937.3" y="302.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="934.3" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.3" y="286.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (46 samples, 0.49%)</title><rect x="934.8" y="323.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.8" y="334.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (46 samples, 0.49%)</title><rect x="934.8" y="307.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="937.8" y="318.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (46 samples, 0.49%)</title><rect x="934.8" y="291.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="937.8" y="302.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (45 samples, 0.48%)</title><rect x="934.9" y="275.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="937.9" y="286.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (45 samples, 0.48%)</title><rect x="934.9" y="259.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.9" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (45 samples, 0.48%)</title><rect x="934.9" y="243.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.9" y="254.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (6 samples, 0.06%)</title><rect x="935.3" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.3" y="238.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (3 samples, 0.03%)</title><rect x="935.6" y="211.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="938.6" y="222.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (36 samples, 0.38%)</title><rect x="936.0" y="227.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.0" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (2 samples, 0.02%)</title><rect x="940.5" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.5" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (2 samples, 0.02%)</title><rect x="940.5" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.5" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (2 samples, 0.02%)</title><rect x="940.5" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.5" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/BaseJWSProvider.&lt;init&gt; (2 samples, 0.02%)</title><rect x="940.5" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.5" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (404 samples, 4.30%)</title><rect x="940.8" y="403.0" width="50.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.8" y="414.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (51 samples, 0.54%)</title><rect x="941.3" y="387.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="944.3" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (3 samples, 0.03%)</title><rect x="941.7" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (26 samples, 0.28%)</title><rect x="942.2" y="371.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (12 samples, 0.13%)</title><rect x="943.9" y="355.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="946.9" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/ContentHandlerDumy.endJSON (2 samples, 0.02%)</title><rect x="944.6" y="339.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="947.6" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.04%)</title><rect x="944.8" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (17 samples, 0.18%)</title><rect x="945.4" y="371.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="948.4" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.&lt;init&gt; (3 samples, 0.03%)</title><rect x="945.8" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="948.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.12%)</title><rect x="946.2" y="355.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.2" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.09%)</title><rect x="946.4" y="339.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="949.4" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (349 samples, 3.71%)</title><rect x="947.7" y="387.0" width="43.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.7" y="398.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (349 samples, 3.71%)</title><rect x="947.7" y="371.0" width="43.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.7" y="382.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (338 samples, 3.60%)</title><rect x="949.1" y="355.0" width="42.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="952.1" y="366.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.&lt;init&gt; (4 samples, 0.04%)</title><rect x="949.2" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="952.2" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (307 samples, 3.27%)</title><rect x="949.7" y="339.0" width="38.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="952.7" y="350.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (205 samples, 2.18%)</title><rect x="949.7" y="323.0" width="25.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="952.7" y="334.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (145 samples, 1.54%)</title><rect x="949.7" y="307.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.7" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (11 samples, 0.12%)</title><rect x="952.8" y="291.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.8" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (4 samples, 0.04%)</title><rect x="952.8" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.8" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.getName (2 samples, 0.02%)</title><rect x="953.1" y="259.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.1" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.06%)</title><rect x="953.3" y="275.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.3" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (5 samples, 0.05%)</title><rect x="953.5" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.05%)</title><rect x="953.5" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="956.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="953.5" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.5" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="953.8" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="953.8" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.8" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="954.2" y="291.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.2" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader$Builder.build (2 samples, 0.02%)</title><rect x="954.6" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.6" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.&lt;init&gt; (2 samples, 0.02%)</title><rect x="954.6" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="957.6" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/CommonSEHeader.&lt;init&gt; (2 samples, 0.02%)</title><rect x="954.6" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="957.6" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.&lt;init&gt; (2 samples, 0.02%)</title><rect x="954.6" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="957.6" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.06%)</title><rect x="955.0" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="958.0" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="955.4" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="955.4" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="958.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="955.4" y="243.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="958.4" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (72 samples, 0.77%)</title><rect x="955.7" y="291.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="958.7" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (2 samples, 0.02%)</title><rect x="955.7" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="958.7" y="286.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (70 samples, 0.74%)</title><rect x="956.0" y="275.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.0" y="286.0"></text>
</g>
<g>
<title>java/net/URI$Parser.&lt;init&gt; (2 samples, 0.02%)</title><rect x="956.0" y="259.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.0" y="270.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (67 samples, 0.71%)</title><rect x="956.2" y="259.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="959.2" y="270.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (3 samples, 0.03%)</title><rect x="956.5" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="959.5" y="254.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="956.5" y="227.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="959.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="956.6" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.6" y="222.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (5 samples, 0.05%)</title><rect x="956.9" y="243.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.9" y="254.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (5 samples, 0.05%)</title><rect x="956.9" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="959.9" y="238.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.04%)</title><rect x="957.0" y="211.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="960.0" y="222.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (2 samples, 0.02%)</title><rect x="957.2" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="960.2" y="206.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (7 samples, 0.07%)</title><rect x="957.5" y="243.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.5" y="254.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (7 samples, 0.07%)</title><rect x="957.5" y="227.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.5" y="238.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (4 samples, 0.04%)</title><rect x="957.9" y="211.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="957.9" y="195.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="960.9" y="206.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (27 samples, 0.29%)</title><rect x="958.4" y="243.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.4" y="254.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (27 samples, 0.29%)</title><rect x="958.4" y="227.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.4" y="238.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (24 samples, 0.26%)</title><rect x="958.5" y="211.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="961.5" y="222.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (21 samples, 0.22%)</title><rect x="958.5" y="195.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="961.5" y="206.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (15 samples, 0.16%)</title><rect x="958.9" y="179.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="961.9" y="190.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (4 samples, 0.04%)</title><rect x="959.6" y="163.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="959.6" y="147.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="962.6" y="158.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (5 samples, 0.05%)</title><rect x="960.1" y="163.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.1" y="174.0"></text>
</g>
<g>
<title>java/net/URI.match (3 samples, 0.03%)</title><rect x="960.4" y="147.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.4" y="158.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (3 samples, 0.03%)</title><rect x="960.8" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="963.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="960.8" y="163.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.8" y="174.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (2 samples, 0.02%)</title><rect x="961.3" y="195.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="964.3" y="206.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (2 samples, 0.02%)</title><rect x="961.5" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="964.5" y="222.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (12 samples, 0.13%)</title><rect x="961.8" y="243.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.11%)</title><rect x="962.0" y="227.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.11%)</title><rect x="962.0" y="211.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="965.0" y="222.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (9 samples, 0.10%)</title><rect x="963.3" y="243.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="966.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.10%)</title><rect x="963.3" y="227.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="963.9" y="211.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="966.9" y="222.0"></text>
</g>
<g>
<title>java/net/URI.access$702 (2 samples, 0.02%)</title><rect x="964.4" y="243.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.03%)</title><rect x="964.8" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="967.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (12 samples, 0.13%)</title><rect x="965.1" y="291.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (11 samples, 0.12%)</title><rect x="965.3" y="275.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="968.3" y="286.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (2 samples, 0.02%)</title><rect x="966.4" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="969.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (9 samples, 0.10%)</title><rect x="966.7" y="291.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="969.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (8 samples, 0.09%)</title><rect x="966.8" y="275.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (8 samples, 0.09%)</title><rect x="966.8" y="259.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.8" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (60 samples, 0.64%)</title><rect x="967.9" y="307.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="970.9" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (60 samples, 0.64%)</title><rect x="967.9" y="291.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="970.9" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (6 samples, 0.06%)</title><rect x="967.9" y="275.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="970.9" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (6 samples, 0.06%)</title><rect x="967.9" y="259.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.9" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (6 samples, 0.06%)</title><rect x="967.9" y="243.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="970.9" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 0.06%)</title><rect x="967.9" y="227.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.9" y="238.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (6 samples, 0.06%)</title><rect x="967.9" y="211.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="970.9" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (54 samples, 0.57%)</title><rect x="968.7" y="275.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.7" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (54 samples, 0.57%)</title><rect x="968.7" y="259.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.7" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (54 samples, 0.57%)</title><rect x="968.7" y="243.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.7" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (53 samples, 0.56%)</title><rect x="968.7" y="227.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="971.7" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (53 samples, 0.56%)</title><rect x="968.7" y="211.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="971.7" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (36 samples, 0.38%)</title><rect x="969.0" y="195.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="972.0" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (32 samples, 0.34%)</title><rect x="969.5" y="179.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.5" y="190.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (2 samples, 0.02%)</title><rect x="969.5" y="163.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="972.5" y="174.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (23 samples, 0.24%)</title><rect x="969.8" y="163.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.8" y="174.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (9 samples, 0.10%)</title><rect x="970.4" y="147.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.4" y="158.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="971.2" y="131.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="974.2" y="142.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (8 samples, 0.09%)</title><rect x="971.7" y="147.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="972.2" y="131.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="975.2" y="142.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (5 samples, 0.05%)</title><rect x="972.7" y="163.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="975.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="972.7" y="147.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="972.9" y="131.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="975.9" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="972.9" y="115.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="975.9" y="126.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="973.1" y="99.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="976.1" y="110.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (11 samples, 0.12%)</title><rect x="973.6" y="195.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="976.6" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (7 samples, 0.07%)</title><rect x="973.8" y="179.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.07%)</title><rect x="973.8" y="163.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="976.8" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="974.3" y="147.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="977.3" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.02%)</title><rect x="975.1" y="195.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.1" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.02%)</title><rect x="975.1" y="179.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.1" y="190.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (102 samples, 1.09%)</title><rect x="975.4" y="323.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.4" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (93 samples, 0.99%)</title><rect x="975.4" y="307.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.4" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (93 samples, 0.99%)</title><rect x="975.4" y="291.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.4" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (52 samples, 0.55%)</title><rect x="978.1" y="275.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="981.1" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (4 samples, 0.04%)</title><rect x="984.1" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (19 samples, 0.20%)</title><rect x="984.6" y="275.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (19 samples, 0.20%)</title><rect x="984.6" y="259.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (3 samples, 0.03%)</title><rect x="984.7" y="243.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.7" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="984.7" y="227.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="987.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.scale (2 samples, 0.02%)</title><rect x="985.1" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (6 samples, 0.06%)</title><rect x="985.4" y="243.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="988.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (7 samples, 0.07%)</title><rect x="986.1" y="243.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="986.1" y="227.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="986.1" y="211.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="989.1" y="222.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="986.1" y="195.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.1" y="206.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="986.1" y="179.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="989.1" y="190.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (3 samples, 0.03%)</title><rect x="986.2" y="163.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="989.2" y="174.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (3 samples, 0.03%)</title><rect x="986.6" y="163.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="989.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.10%)</title><rect x="987.1" y="307.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="990.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.10%)</title><rect x="987.1" y="291.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="990.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (9 samples, 0.10%)</title><rect x="987.1" y="275.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.1" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (2 samples, 0.02%)</title><rect x="987.2" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (2 samples, 0.02%)</title><rect x="987.9" y="259.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="990.9" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (25 samples, 0.27%)</title><rect x="988.2" y="339.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="988.4" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.4" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="988.4" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="991.4" y="318.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="988.4" y="291.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="991.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 0.13%)</title><rect x="988.9" y="323.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="991.9" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.13%)</title><rect x="988.9" y="307.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="991.9" y="318.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.09%)</title><rect x="989.0" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="992.0" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.02%)</title><rect x="989.1" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="992.1" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="989.4" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.4" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="990.0" y="291.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="993.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (5 samples, 0.05%)</title><rect x="990.4" y="323.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="993.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="990.5" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="993.5" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.02%)</title><rect x="990.6" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.6" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="991.0" y="323.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="994.0" y="334.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet1 (627 samples, 6.67%)</title><rect x="991.5" y="403.0" width="78.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="994.5" y="414.0">com/yueki..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (625 samples, 6.65%)</title><rect x="991.8" y="387.0" width="78.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.8" y="398.0">com/nimbu..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (480 samples, 5.11%)</title><rect x="991.8" y="371.0" width="60.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.8" y="382.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (292 samples, 3.11%)</title><rect x="991.9" y="355.0" width="36.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="994.9" y="366.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (291 samples, 3.10%)</title><rect x="992.0" y="339.0" width="36.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="995.0" y="350.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (266 samples, 2.83%)</title><rect x="992.4" y="323.0" width="33.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="995.4" y="334.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (266 samples, 2.83%)</title><rect x="992.4" y="307.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.4" y="318.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (142 samples, 1.51%)</title><rect x="1003.4" y="291.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.4" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (9 samples, 0.10%)</title><rect x="1020.1" y="275.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (34 samples, 0.36%)</title><rect x="1021.3" y="291.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (34 samples, 0.36%)</title><rect x="1021.3" y="275.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1024.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (2 samples, 0.02%)</title><rect x="1021.6" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (2 samples, 0.02%)</title><rect x="1021.6" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1024.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.scale (3 samples, 0.03%)</title><rect x="1021.9" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (19 samples, 0.20%)</title><rect x="1022.3" y="259.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (7 samples, 0.07%)</title><rect x="1024.7" y="259.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1027.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1024.8" y="243.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1027.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1024.8" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1027.8" y="238.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1024.8" y="211.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1027.8" y="222.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1024.8" y="195.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1027.8" y="206.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (4 samples, 0.04%)</title><rect x="1024.8" y="179.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1027.8" y="190.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (2 samples, 0.02%)</title><rect x="1025.3" y="179.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (22 samples, 0.23%)</title><rect x="1025.8" y="323.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1028.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (22 samples, 0.23%)</title><rect x="1025.8" y="307.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (22 samples, 0.23%)</title><rect x="1025.8" y="291.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (12 samples, 0.13%)</title><rect x="1026.0" y="275.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1029.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (8 samples, 0.09%)</title><rect x="1027.5" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1030.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1027.7" y="259.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1030.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1027.7" y="243.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1030.7" y="254.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1027.7" y="227.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.7" y="238.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1027.7" y="211.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.7" y="222.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (2 samples, 0.02%)</title><rect x="1027.7" y="195.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1030.7" y="206.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (5 samples, 0.05%)</title><rect x="1027.9" y="195.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1030.9" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (187 samples, 1.99%)</title><rect x="1028.5" y="355.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.5" y="366.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (187 samples, 1.99%)</title><rect x="1028.5" y="339.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.5" y="350.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (186 samples, 1.98%)</title><rect x="1028.7" y="323.0" width="23.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.7" y="334.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (185 samples, 1.97%)</title><rect x="1028.8" y="307.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1031.8" y="318.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (185 samples, 1.97%)</title><rect x="1028.8" y="291.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1031.8" y="302.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (180 samples, 1.92%)</title><rect x="1029.4" y="275.0" width="22.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.4" y="286.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (178 samples, 1.89%)</title><rect x="1029.7" y="259.0" width="22.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.7" y="270.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (134 samples, 1.43%)</title><rect x="1030.6" y="243.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.6" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (12 samples, 0.13%)</title><rect x="1031.7" y="227.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.7" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (2 samples, 0.02%)</title><rect x="1032.2" y="211.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.2" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.skipDigits (2 samples, 0.02%)</title><rect x="1032.4" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.4" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (4 samples, 0.04%)</title><rect x="1032.7" y="211.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.7" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (2 samples, 0.02%)</title><rect x="1032.8" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1035.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="1032.8" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1035.8" y="190.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1032.8" y="163.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1035.8" y="174.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (113 samples, 1.20%)</title><rect x="1033.2" y="227.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.2" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.checkControleChar (2 samples, 0.02%)</title><rect x="1033.3" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1036.3" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (92 samples, 0.98%)</title><rect x="1033.6" y="211.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1036.6" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (45 samples, 0.48%)</title><rect x="1036.0" y="195.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.0" y="206.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1041.4" y="179.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1044.4" y="190.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (2 samples, 0.02%)</title><rect x="1041.6" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.6" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (26 samples, 0.28%)</title><rect x="1041.9" y="195.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.9" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.12%)</title><rect x="1043.7" y="179.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.7" y="190.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (8 samples, 0.09%)</title><rect x="1045.1" y="211.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1048.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.09%)</title><rect x="1045.1" y="195.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1045.6" y="179.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1045.7" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.7" y="174.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1045.9" y="147.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1048.9" y="158.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.04%)</title><rect x="1046.1" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1046.3" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.3" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (2 samples, 0.02%)</title><rect x="1046.6" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="1046.9" y="211.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1049.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="1046.9" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.9" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (18 samples, 0.19%)</title><rect x="1047.4" y="243.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1050.4" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (7 samples, 0.07%)</title><rect x="1048.0" y="227.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1051.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.07%)</title><rect x="1048.0" y="211.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1048.0" y="195.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1051.0" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.07%)</title><rect x="1048.0" y="179.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.0" y="190.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.02%)</title><rect x="1048.4" y="163.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1051.4" y="174.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1048.6" y="163.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1051.6" y="174.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (2 samples, 0.02%)</title><rect x="1048.9" y="227.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1048.9" y="211.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1051.9" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (2 samples, 0.02%)</title><rect x="1049.1" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1052.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="1049.1" y="211.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1049.4" y="227.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1052.4" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1049.4" y="211.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1052.4" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 0.19%)</title><rect x="1049.8" y="243.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1052.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="1049.8" y="227.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="1049.8" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1052.8" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 0.16%)</title><rect x="1050.1" y="227.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.1" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.05%)</title><rect x="1050.8" y="211.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1053.8" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (5 samples, 0.05%)</title><rect x="1051.4" y="211.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.4" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (145 samples, 1.54%)</title><rect x="1052.0" y="371.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.0" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (4 samples, 0.04%)</title><rect x="1052.5" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.5" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (6 samples, 0.06%)</title><rect x="1053.0" y="355.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.0" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (6 samples, 0.06%)</title><rect x="1053.0" y="339.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="1053.5" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1056.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="1053.5" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.5" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (21 samples, 0.22%)</title><rect x="1053.8" y="355.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1056.8" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (15 samples, 0.16%)</title><rect x="1054.5" y="339.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.10%)</title><rect x="1055.3" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.06%)</title><rect x="1055.4" y="307.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="1056.2" y="307.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.2" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (61 samples, 0.65%)</title><rect x="1056.4" y="355.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.4" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (61 samples, 0.65%)</title><rect x="1056.4" y="339.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.4" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (61 samples, 0.65%)</title><rect x="1056.4" y="323.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (56 samples, 0.60%)</title><rect x="1056.4" y="307.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (56 samples, 0.60%)</title><rect x="1056.4" y="291.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="1057.4" y="275.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (22 samples, 0.23%)</title><rect x="1058.1" y="275.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1061.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (5 samples, 0.05%)</title><rect x="1058.6" y="259.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1061.6" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (12 samples, 0.13%)</title><rect x="1059.3" y="259.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.3" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (3 samples, 0.03%)</title><rect x="1060.4" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1063.4" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.size (6 samples, 0.06%)</title><rect x="1060.8" y="275.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1063.8" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (3 samples, 0.03%)</title><rect x="1061.6" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.6" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (3 samples, 0.03%)</title><rect x="1061.6" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.6" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (2 samples, 0.02%)</title><rect x="1061.9" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.9" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (3 samples, 0.03%)</title><rect x="1062.2" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.2" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (7 samples, 0.07%)</title><rect x="1062.6" y="275.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1065.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="1063.1" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.1" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (5 samples, 0.05%)</title><rect x="1063.5" y="307.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.5" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (8 samples, 0.09%)</title><rect x="1064.1" y="355.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1067.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.09%)</title><rect x="1064.1" y="339.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="1064.1" y="323.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="1064.1" y="307.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.06%)</title><rect x="1064.3" y="323.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.3" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="1064.7" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.7" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (4 samples, 0.04%)</title><rect x="1065.1" y="355.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="1065.1" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="1065.1" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.1" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (15 samples, 0.16%)</title><rect x="1065.6" y="355.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1068.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (15 samples, 0.16%)</title><rect x="1065.6" y="339.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.13%)</title><rect x="1066.0" y="323.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1069.0" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (17 samples, 0.18%)</title><rect x="1067.5" y="355.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1070.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (17 samples, 0.18%)</title><rect x="1067.5" y="339.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1070.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 0.18%)</title><rect x="1067.5" y="323.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1070.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.02%)</title><rect x="1069.0" y="307.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1072.0" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.03%)</title><rect x="1069.2" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.2" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (2 samples, 0.02%)</title><rect x="1069.4" y="291.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1072.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.04%)</title><rect x="1069.6" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1072.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.03%)</title><rect x="1069.7" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1072.7" y="350.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getClaimsSet2 (2 samples, 0.02%)</title><rect x="1070.2" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1073.2" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (2 samples, 0.02%)</title><rect x="1070.2" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.2" y="398.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (12 samples, 0.13%)</title><rect x="1070.5" y="419.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.5" y="430.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtParse_callGetJwtClaimsSetTwice_patched_small_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (176 samples, 1.87%)</title><rect x="1072.0" y="451.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.0" y="462.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (176 samples, 1.87%)</title><rect x="1072.0" y="435.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.0" y="446.0">c..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (130 samples, 1.38%)</title><rect x="1072.2" y="419.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.2" y="430.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (2 samples, 0.02%)</title><rect x="1072.4" y="403.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.4" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (2 samples, 0.02%)</title><rect x="1072.4" y="387.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.02%)</title><rect x="1072.4" y="371.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1075.4" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.02%)</title><rect x="1072.4" y="355.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1075.4" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.02%)</title><rect x="1072.4" y="339.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.4" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="1072.4" y="323.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.4" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (109 samples, 1.16%)</title><rect x="1072.6" y="403.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1075.6" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (109 samples, 1.16%)</title><rect x="1072.6" y="387.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.6" y="398.0"></text>
</g>
<g>
<title>java/security/Signature.initSign (2 samples, 0.02%)</title><rect x="1072.6" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.6" y="382.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (2 samples, 0.02%)</title><rect x="1072.6" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.6" y="366.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (2 samples, 0.02%)</title><rect x="1072.6" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.6" y="350.0"></text>
</g>
<g>
<title>java/security/Signature.sign (106 samples, 1.13%)</title><rect x="1072.9" y="371.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.9" y="382.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (106 samples, 1.13%)</title><rect x="1072.9" y="355.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1075.9" y="366.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (106 samples, 1.13%)</title><rect x="1072.9" y="339.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.9" y="350.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (103 samples, 1.10%)</title><rect x="1072.9" y="323.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.9" y="334.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (103 samples, 1.10%)</title><rect x="1072.9" y="307.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.9" y="318.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (95 samples, 1.01%)</title><rect x="1073.0" y="291.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.0" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (95 samples, 1.01%)</title><rect x="1073.0" y="275.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1076.0" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (11 samples, 0.12%)</title><rect x="1073.4" y="259.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.4" y="270.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (9 samples, 0.10%)</title><rect x="1073.6" y="243.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1076.6" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (4 samples, 0.04%)</title><rect x="1074.9" y="259.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1077.9" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (4 samples, 0.04%)</title><rect x="1074.9" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1077.9" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (4 samples, 0.04%)</title><rect x="1074.9" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.9" y="238.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (4 samples, 0.04%)</title><rect x="1074.9" y="211.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1077.9" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (16 samples, 0.17%)</title><rect x="1075.4" y="259.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1078.4" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (2 samples, 0.02%)</title><rect x="1075.4" y="243.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.4" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (2 samples, 0.02%)</title><rect x="1075.4" y="227.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.4" y="238.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2 samples, 0.02%)</title><rect x="1075.4" y="211.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1078.4" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (14 samples, 0.15%)</title><rect x="1075.6" y="243.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.6" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (14 samples, 0.15%)</title><rect x="1075.6" y="227.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.6" y="238.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (10 samples, 0.11%)</title><rect x="1076.0" y="211.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1079.0" y="222.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (60 samples, 0.64%)</title><rect x="1077.4" y="259.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1080.4" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (60 samples, 0.64%)</title><rect x="1077.4" y="243.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.4" y="254.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (58 samples, 0.62%)</title><rect x="1077.5" y="227.0" width="7.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1080.5" y="238.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (2 samples, 0.02%)</title><rect x="1084.9" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1087.9" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (2 samples, 0.02%)</title><rect x="1084.9" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1087.9" y="286.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1085.2" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1088.2" y="302.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore$BlindingParameters.getBlindingRandomPair (4 samples, 0.04%)</title><rect x="1085.2" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1088.2" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (4 samples, 0.04%)</title><rect x="1085.2" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.2" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (4 samples, 0.04%)</title><rect x="1085.2" y="243.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1088.2" y="254.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.encodeSignature (2 samples, 0.02%)</title><rect x="1085.8" y="323.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1088.8" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (13 samples, 0.14%)</title><rect x="1086.3" y="403.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.3" y="414.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1086.4" y="387.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.4" y="398.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (12 samples, 0.13%)</title><rect x="1086.4" y="371.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.4" y="382.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (5 samples, 0.05%)</title><rect x="1086.4" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1089.4" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (5 samples, 0.05%)</title><rect x="1086.4" y="339.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.4" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (5 samples, 0.05%)</title><rect x="1086.4" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.4" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (5 samples, 0.05%)</title><rect x="1086.4" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.4" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (2 samples, 0.02%)</title><rect x="1086.4" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.4" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (3 samples, 0.03%)</title><rect x="1086.7" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1089.7" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1086.8" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1089.8" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.init (2 samples, 0.02%)</title><rect x="1086.8" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1089.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.02%)</title><rect x="1086.8" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1089.8" y="254.0"></text>
</g>
<g>
<title>sun/misc/Launcher$AppClassLoader.loadClass (2 samples, 0.02%)</title><rect x="1086.8" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1089.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.02%)</title><rect x="1086.8" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.8" y="222.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (2 samples, 0.02%)</title><rect x="1086.8" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.8" y="206.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.02%)</title><rect x="1086.8" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.8" y="190.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (2 samples, 0.02%)</title><rect x="1086.8" y="163.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1089.8" y="174.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (2 samples, 0.02%)</title><rect x="1086.8" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.8" y="158.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (2 samples, 0.02%)</title><rect x="1086.8" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.8" y="142.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (2 samples, 0.02%)</title><rect x="1086.8" y="115.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.8" y="126.0"></text>
</g>
<g>
<title>sun/misc/Resource.getBytes (2 samples, 0.02%)</title><rect x="1086.8" y="99.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.8" y="110.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (7 samples, 0.07%)</title><rect x="1087.1" y="355.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.1" y="366.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (2 samples, 0.02%)</title><rect x="1087.1" y="339.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.1" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (2 samples, 0.02%)</title><rect x="1087.1" y="323.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1090.1" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (2 samples, 0.02%)</title><rect x="1087.1" y="307.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1090.1" y="318.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (2 samples, 0.02%)</title><rect x="1087.1" y="291.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.1" y="302.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (2 samples, 0.02%)</title><rect x="1087.1" y="275.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.1" y="286.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (2 samples, 0.02%)</title><rect x="1087.1" y="259.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1090.1" y="270.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (2 samples, 0.02%)</title><rect x="1087.1" y="243.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.1" y="254.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (2 samples, 0.02%)</title><rect x="1087.1" y="227.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.1" y="238.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (2 samples, 0.02%)</title><rect x="1087.1" y="211.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.1" y="222.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (2 samples, 0.02%)</title><rect x="1087.1" y="195.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.1" y="206.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (2 samples, 0.02%)</title><rect x="1087.1" y="179.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.1" y="190.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (2 samples, 0.02%)</title><rect x="1087.1" y="163.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1090.1" y="174.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (2 samples, 0.02%)</title><rect x="1087.1" y="147.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1090.1" y="158.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (5 samples, 0.05%)</title><rect x="1087.3" y="339.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.3" y="350.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (5 samples, 0.05%)</title><rect x="1087.3" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.3" y="334.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeDigitBase64URL (2 samples, 0.02%)</title><rect x="1087.6" y="307.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.6" y="318.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (5 samples, 0.05%)</title><rect x="1087.9" y="403.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.9" y="414.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (5 samples, 0.05%)</title><rect x="1087.9" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1090.9" y="398.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (4 samples, 0.04%)</title><rect x="1088.1" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1091.1" y="382.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (43 samples, 0.46%)</title><rect x="1088.7" y="419.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1091.7" y="430.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (43 samples, 0.46%)</title><rect x="1088.7" y="403.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.7" y="414.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (43 samples, 0.46%)</title><rect x="1088.7" y="387.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1091.7" y="398.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (41 samples, 0.44%)</title><rect x="1088.9" y="371.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1091.9" y="382.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (41 samples, 0.44%)</title><rect x="1088.9" y="355.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1091.9" y="366.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="1088.9" y="339.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1091.9" y="350.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1088.9" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1091.9" y="334.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (3 samples, 0.03%)</title><rect x="1089.1" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1092.1" y="318.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (3 samples, 0.03%)</title><rect x="1089.1" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.1" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (3 samples, 0.03%)</title><rect x="1089.1" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.1" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="1089.1" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.1" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (3 samples, 0.03%)</title><rect x="1089.1" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.1" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (2 samples, 0.02%)</title><rect x="1089.2" y="227.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.2" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (2 samples, 0.02%)</title><rect x="1089.2" y="211.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.2" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (2 samples, 0.02%)</title><rect x="1089.2" y="195.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.2" y="206.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle, int, Thread*) (2 samples, 0.02%)</title><rect x="1089.2" y="179.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.2" y="190.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (36 samples, 0.38%)</title><rect x="1089.6" y="339.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.6" y="350.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (36 samples, 0.38%)</title><rect x="1089.6" y="323.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1092.6" y="334.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (5 samples, 0.05%)</title><rect x="1089.6" y="307.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.6" y="318.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (5 samples, 0.05%)</title><rect x="1089.6" y="291.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.6" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (2 samples, 0.02%)</title><rect x="1089.6" y="275.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.6" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (2 samples, 0.02%)</title><rect x="1089.6" y="259.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.6" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (2 samples, 0.02%)</title><rect x="1089.6" y="243.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.6" y="254.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 0.02%)</title><rect x="1089.6" y="227.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1092.6" y="238.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 0.02%)</title><rect x="1089.6" y="211.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.6" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="1089.8" y="275.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1092.8" y="286.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiply (3 samples, 0.03%)</title><rect x="1089.8" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.8" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="1089.8" y="243.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.8" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (31 samples, 0.33%)</title><rect x="1090.2" y="307.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.2" y="318.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1090.2" y="291.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1093.2" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.randomBits (2 samples, 0.02%)</title><rect x="1090.2" y="275.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1093.2" y="286.0"></text>
</g>
<g>
<title>java/security/SecureRandom.nextBytes (2 samples, 0.02%)</title><rect x="1090.2" y="259.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.2" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG.engineNextBytes (2 samples, 0.02%)</title><rect x="1090.2" y="243.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.2" y="254.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.access$400 (2 samples, 0.02%)</title><rect x="1090.2" y="227.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1093.2" y="238.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.implNextBytes (2 samples, 0.02%)</title><rect x="1090.2" y="211.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1093.2" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (29 samples, 0.31%)</title><rect x="1090.4" y="291.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1093.4" y="302.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (28 samples, 0.30%)</title><rect x="1090.6" y="275.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1093.6" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (2 samples, 0.02%)</title><rect x="1090.9" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.9" y="270.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2 samples, 0.02%)</title><rect x="1090.9" y="243.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1093.9" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (5 samples, 0.05%)</title><rect x="1091.2" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1094.2" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (3 samples, 0.03%)</title><rect x="1091.2" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1094.2" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (3 samples, 0.03%)</title><rect x="1091.2" y="227.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1094.2" y="238.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (2 samples, 0.02%)</title><rect x="1091.6" y="243.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1094.6" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (2 samples, 0.02%)</title><rect x="1091.6" y="227.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.6" y="238.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2 samples, 0.02%)</title><rect x="1091.6" y="211.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1094.6" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (16 samples, 0.17%)</title><rect x="1091.8" y="259.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1094.8" y="270.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (2 samples, 0.02%)</title><rect x="1091.9" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1094.9" y="254.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (2 samples, 0.02%)</title><rect x="1091.9" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1094.9" y="238.0"></text>
</g>
<g>
<title>java/math/BigInteger.mulAdd (2 samples, 0.02%)</title><rect x="1091.9" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1094.9" y="222.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMulAdd (2 samples, 0.02%)</title><rect x="1091.9" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.9" y="206.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (13 samples, 0.14%)</title><rect x="1092.2" y="243.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1095.2" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (13 samples, 0.14%)</title><rect x="1092.2" y="227.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.2" y="238.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (13 samples, 0.14%)</title><rect x="1092.2" y="211.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1095.2" y="222.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (2 samples, 0.02%)</title><rect x="1094.2" y="659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.2" y="670.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (2 samples, 0.02%)</title><rect x="1094.2" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1097.2" y="654.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (2 samples, 0.02%)</title><rect x="1094.2" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1097.2" y="638.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (2 samples, 0.02%)</title><rect x="1094.2" y="611.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1097.2" y="622.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (2 samples, 0.02%)</title><rect x="1094.2" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1097.2" y="606.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (2 samples, 0.02%)</title><rect x="1094.2" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.2" y="590.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler.runIteration (2 samples, 0.02%)</title><rect x="1094.2" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1097.2" y="574.0"></text>
</g>
<g>
<title>thread_start (761 samples, 8.10%)</title><rect x="1094.5" y="659.0" width="95.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1097.5" y="670.0">thread_start</text>
</g>
<g>
<title>_pthread_start (761 samples, 8.10%)</title><rect x="1094.5" y="643.0" width="95.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1097.5" y="654.0">_pthread_st..</text>
</g>
<g>
<title>_pthread_body (761 samples, 8.10%)</title><rect x="1094.5" y="627.0" width="95.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1097.5" y="638.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (761 samples, 8.10%)</title><rect x="1094.5" y="611.0" width="95.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1097.5" y="622.0">java_start(..</text>
</g>
<g>
<title>GCTaskThread::run() (99 samples, 1.05%)</title><rect x="1094.5" y="595.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.5" y="606.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (25 samples, 0.27%)</title><rect x="1094.5" y="579.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.5" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (22 samples, 0.23%)</title><rect x="1094.6" y="563.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.6" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (22 samples, 0.23%)</title><rect x="1094.6" y="547.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.6" y="558.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (19 samples, 0.20%)</title><rect x="1094.6" y="531.0" width="2.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1097.6" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (19 samples, 0.20%)</title><rect x="1094.6" y="515.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.19%)</title><rect x="1094.6" y="499.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1097.6" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1097.0" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.0" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.02%)</title><rect x="1097.0" y="515.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1100.0" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.02%)</title><rect x="1097.3" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.3" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.02%)</title><rect x="1097.3" y="547.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1100.3" y="558.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.07%)</title><rect x="1097.7" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.7" y="590.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (7 samples, 0.07%)</title><rect x="1097.7" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.7" y="574.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (4 samples, 0.04%)</title><rect x="1097.8" y="547.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.8" y="558.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="1098.0" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.0" y="542.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (15 samples, 0.16%)</title><rect x="1098.6" y="579.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.6" y="590.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (15 samples, 0.16%)</title><rect x="1098.6" y="563.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.6" y="574.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (11 samples, 0.12%)</title><rect x="1098.6" y="547.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.6" y="558.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (11 samples, 0.12%)</title><rect x="1098.6" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.6" y="542.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.04%)</title><rect x="1100.0" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.0" y="558.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (2 samples, 0.02%)</title><rect x="1100.0" y="531.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.0" y="542.0"></text>
</g>
<g>
<title>void PSRootsClosure&lt;false&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.02%)</title><rect x="1100.2" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.2" y="542.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (36 samples, 0.38%)</title><rect x="1100.5" y="579.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="590.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (2 samples, 0.02%)</title><rect x="1100.6" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.6" y="574.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (2 samples, 0.02%)</title><rect x="1100.6" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.6" y="558.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (2 samples, 0.02%)</title><rect x="1100.6" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.6" y="542.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.02%)</title><rect x="1100.6" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.6" y="526.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (19 samples, 0.20%)</title><rect x="1101.0" y="563.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.0" y="574.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (14 samples, 0.15%)</title><rect x="1101.6" y="547.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1104.6" y="558.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.14%)</title><rect x="1103.4" y="563.0" width="1.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1106.4" y="574.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (13 samples, 0.14%)</title><rect x="1105.0" y="579.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.0" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (12 samples, 0.13%)</title><rect x="1105.0" y="563.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.0" y="574.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (7 samples, 0.07%)</title><rect x="1105.4" y="547.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.4" y="558.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.02%)</title><rect x="1105.5" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.5" y="542.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (4 samples, 0.04%)</title><rect x="1105.8" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (4 samples, 0.04%)</title><rect x="1105.8" y="515.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.8" y="526.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (4 samples, 0.04%)</title><rect x="1105.8" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.8" y="510.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.02%)</title><rect x="1106.3" y="547.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.3" y="558.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (2 samples, 0.02%)</title><rect x="1106.6" y="579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.6" y="590.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (2 samples, 0.02%)</title><rect x="1106.6" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.6" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.02%)</title><rect x="1106.6" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.6" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.02%)</title><rect x="1106.6" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.6" y="542.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.02%)</title><rect x="1106.6" y="515.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1109.6" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.02%)</title><rect x="1106.6" y="499.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.6" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.02%)</title><rect x="1106.6" y="483.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1109.6" y="494.0"></text>
</g>
<g>
<title>JavaThread::run() (558 samples, 5.94%)</title><rect x="1106.9" y="595.0" width="70.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="606.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (558 samples, 5.94%)</title><rect x="1106.9" y="579.0" width="70.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="590.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (547 samples, 5.82%)</title><rect x="1106.9" y="563.0" width="68.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.9" y="574.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (532 samples, 5.66%)</title><rect x="1107.0" y="547.0" width="66.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.0" y="558.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (492 samples, 5.23%)</title><rect x="1107.1" y="531.0" width="61.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.1" y="542.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (490 samples, 5.21%)</title><rect x="1107.3" y="515.0" width="61.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.3" y="526.0">Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (4 samples, 0.04%)</title><rect x="1107.3" y="499.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.3" y="510.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.04%)</title><rect x="1107.3" y="483.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.04%)</title><rect x="1107.3" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (4 samples, 0.04%)</title><rect x="1107.3" y="451.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (4 samples, 0.04%)</title><rect x="1107.3" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.04%)</title><rect x="1107.3" y="419.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.04%)</title><rect x="1107.3" y="403.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (4 samples, 0.04%)</title><rect x="1107.3" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (4 samples, 0.04%)</title><rect x="1107.3" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (4 samples, 0.04%)</title><rect x="1107.3" y="355.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.3" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1107.3" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.3" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.04%)</title><rect x="1107.3" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.02%)</title><rect x="1107.5" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.5" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.02%)</title><rect x="1107.5" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.5" y="302.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1107.5" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.5" y="286.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (219 samples, 2.33%)</title><rect x="1107.8" y="499.0" width="27.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.8" y="510.0">C..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.10%)</title><rect x="1107.8" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.8" y="494.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (7 samples, 0.07%)</title><rect x="1107.8" y="467.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="478.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.02%)</title><rect x="1108.6" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.6" y="478.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.02%)</title><rect x="1108.6" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.6" y="462.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.02%)</title><rect x="1108.6" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.6" y="446.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.06%)</title><rect x="1108.9" y="483.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.9" y="494.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.02%)</title><rect x="1108.9" y="467.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.9" y="478.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (3 samples, 0.03%)</title><rect x="1109.3" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.3" y="478.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 0.18%)</title><rect x="1109.7" y="483.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.7" y="494.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.02%)</title><rect x="1110.0" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.0" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.12%)</title><rect x="1110.4" y="467.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.4" y="478.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.02%)</title><rect x="1110.4" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.4" y="462.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.02%)</title><rect x="1110.7" y="451.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.7" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.02%)</title><rect x="1110.7" y="435.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.7" y="446.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (7 samples, 0.07%)</title><rect x="1110.9" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.9" y="462.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.03%)</title><rect x="1111.0" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.0" y="446.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.02%)</title><rect x="1111.2" y="419.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.2" y="430.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.03%)</title><rect x="1111.4" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.4" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.02%)</title><rect x="1111.8" y="483.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.8" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.02%)</title><rect x="1111.8" y="467.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.8" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (13 samples, 0.14%)</title><rect x="1112.0" y="483.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.0" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (13 samples, 0.14%)</title><rect x="1112.0" y="467.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.0" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1112.2" y="451.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.2" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1112.4" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.4" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (6 samples, 0.06%)</title><rect x="1112.8" y="451.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.8" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (171 samples, 1.82%)</title><rect x="1113.8" y="483.0" width="21.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.8" y="494.0">P..</text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1114.2" y="467.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.2" y="478.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 0.07%)</title><rect x="1114.4" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (15 samples, 0.16%)</title><rect x="1115.3" y="467.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.3" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1115.8" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (7 samples, 0.07%)</title><rect x="1116.3" y="451.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.3" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1116.4" y="435.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.4" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1116.7" y="435.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.7" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1116.9" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (12 samples, 0.13%)</title><rect x="1117.2" y="467.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.2" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1117.8" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.8" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.05%)</title><rect x="1118.1" y="451.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.1" y="462.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (2 samples, 0.02%)</title><rect x="1118.1" y="435.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.1" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1118.3" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.3" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (22 samples, 0.23%)</title><rect x="1118.7" y="467.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (30 samples, 0.32%)</title><rect x="1121.5" y="467.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.14%)</title><rect x="1122.8" y="451.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.8" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1123.1" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.1" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1123.6" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.6" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1124.0" y="435.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.0" y="446.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.02%)</title><rect x="1124.2" y="435.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.02%)</title><rect x="1124.5" y="451.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="462.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.02%)</title><rect x="1124.7" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.7" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.04%)</title><rect x="1125.2" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.02%)</title><rect x="1125.5" y="451.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1125.5" y="435.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (16 samples, 0.17%)</title><rect x="1125.7" y="467.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.7" y="478.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.02%)</title><rect x="1126.7" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.7" y="462.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.03%)</title><rect x="1127.0" y="451.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="462.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.02%)</title><rect x="1127.0" y="435.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.0" y="446.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.03%)</title><rect x="1127.4" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="462.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.03%)</title><rect x="1127.4" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (14 samples, 0.15%)</title><rect x="1127.9" y="467.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.07%)</title><rect x="1128.4" y="451.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.4" y="462.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (3 samples, 0.03%)</title><rect x="1129.2" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="462.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.03%)</title><rect x="1129.2" y="435.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1132.2" y="446.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 0.11%)</title><rect x="1129.6" y="467.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.03%)</title><rect x="1129.6" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.6" y="462.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (2 samples, 0.02%)</title><rect x="1129.7" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.7" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (2 samples, 0.02%)</title><rect x="1129.7" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.7" y="430.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1129.7" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.7" y="414.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.07%)</title><rect x="1130.0" y="451.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.0" y="462.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.06%)</title><rect x="1130.1" y="435.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.1" y="446.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.02%)</title><rect x="1130.1" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.1" y="430.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.03%)</title><rect x="1130.5" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.5" y="430.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1130.5" y="403.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.5" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (7 samples, 0.07%)</title><rect x="1130.9" y="467.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.9" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (7 samples, 0.07%)</title><rect x="1130.9" y="451.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.9" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1131.4" y="435.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.4" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (8 samples, 0.09%)</title><rect x="1131.7" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.7" y="478.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="1131.7" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.7" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1132.2" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.2" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1132.5" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.5" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.02%)</title><rect x="1132.8" y="467.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.8" y="478.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (17 samples, 0.18%)</title><rect x="1133.0" y="467.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.0" y="478.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.10%)</title><rect x="1133.9" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.9" y="462.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.04%)</title><rect x="1134.3" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.3" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1134.8" y="435.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (250 samples, 2.66%)</title><rect x="1135.3" y="499.0" width="31.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="510.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.02%)</title><rect x="1135.3" y="483.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.3" y="494.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.02%)</title><rect x="1135.3" y="467.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.04%)</title><rect x="1135.8" y="483.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.04%)</title><rect x="1135.8" y="467.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.8" y="478.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.02%)</title><rect x="1136.0" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.0" y="462.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.03%)</title><rect x="1136.3" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.3" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.02%)</title><rect x="1136.6" y="483.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.6" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.02%)</title><rect x="1136.6" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.6" y="478.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.02%)</title><rect x="1136.6" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (219 samples, 2.33%)</title><rect x="1136.9" y="483.0" width="27.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.9" y="494.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.05%)</title><rect x="1137.0" y="467.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1137.0" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.0" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1137.3" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (2 samples, 0.02%)</title><rect x="1137.3" y="435.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (2 samples, 0.02%)</title><rect x="1137.3" y="419.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.3" y="430.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1137.6" y="467.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.6" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1137.6" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.6" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1137.6" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.6" y="446.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1137.6" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.6" y="430.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1137.6" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.6" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.02%)</title><rect x="1137.6" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.6" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.09%)</title><rect x="1138.1" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.1" y="478.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.02%)</title><rect x="1138.7" y="451.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="462.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (2 samples, 0.02%)</title><rect x="1138.9" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.9" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.11%)</title><rect x="1139.2" y="467.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.2" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1139.7" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.7" y="462.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (3 samples, 0.03%)</title><rect x="1140.0" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.0" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (170 samples, 1.81%)</title><rect x="1140.4" y="467.0" width="21.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="478.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (164 samples, 1.74%)</title><rect x="1141.0" y="451.0" width="20.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.0" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (154 samples, 1.64%)</title><rect x="1141.7" y="435.0" width="19.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.7" y="446.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (3 samples, 0.03%)</title><rect x="1142.7" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.7" y="430.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1142.7" y="403.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1145.7" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1143.2" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.2" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1143.2" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.2" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (2 samples, 0.02%)</title><rect x="1143.7" y="419.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (136 samples, 1.45%)</title><rect x="1143.9" y="419.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (20 samples, 0.21%)</title><rect x="1147.2" y="403.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.2" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (90 samples, 0.96%)</title><rect x="1149.7" y="403.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.7" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (4 samples, 0.04%)</title><rect x="1161.0" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.02%)</title><rect x="1161.3" y="419.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.3" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.05%)</title><rect x="1161.8" y="467.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.06%)</title><rect x="1162.5" y="467.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.04%)</title><rect x="1162.8" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.02%)</title><rect x="1162.8" y="435.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.02%)</title><rect x="1163.0" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.0" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.09%)</title><rect x="1163.3" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.09%)</title><rect x="1163.3" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.11%)</title><rect x="1164.5" y="483.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.09%)</title><rect x="1164.5" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.02%)</title><rect x="1164.8" y="451.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.03%)</title><rect x="1165.0" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="462.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (2 samples, 0.02%)</title><rect x="1165.5" y="467.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (6 samples, 0.06%)</title><rect x="1165.9" y="483.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.02%)</title><rect x="1165.9" y="467.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (3 samples, 0.03%)</title><rect x="1166.1" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.15%)</title><rect x="1166.8" y="499.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.15%)</title><rect x="1166.8" y="483.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.15%)</title><rect x="1166.8" y="467.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.15%)</title><rect x="1166.8" y="451.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.15%)</title><rect x="1166.8" y="435.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.15%)</title><rect x="1166.8" y="419.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.10%)</title><rect x="1166.8" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.10%)</title><rect x="1166.8" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.10%)</title><rect x="1166.8" y="371.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.10%)</title><rect x="1166.8" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.10%)</title><rect x="1166.8" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.09%)</title><rect x="1166.8" y="323.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.0" y="307.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1167.0" y="291.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1167.0" y="275.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1167.0" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1167.0" y="243.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1167.0" y="227.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.2" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.2" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1167.2" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1167.2" y="163.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1167.2" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1167.2" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1167.2" y="115.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1167.2" y="99.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1167.3" y="83.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1167.3" y="67.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1167.3" y="51.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1167.3" y="35.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.9" y="403.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1167.9" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1167.9" y="371.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1167.9" y="355.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1167.9" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1167.9" y="323.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1167.9" y="307.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1167.9" y="291.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1167.9" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1167.9" y="259.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1167.9" y="243.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1167.9" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1167.9" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1167.9" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1167.9" y="179.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1167.9" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1167.9" y="147.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1167.9" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.02%)</title><rect x="1168.2" y="115.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1168.2" y="99.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="110.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.02%)</title><rect x="1168.5" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="510.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.02%)</title><rect x="1168.5" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.5" y="494.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.02%)</title><rect x="1168.5" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (33 samples, 0.35%)</title><rect x="1169.0" y="531.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="542.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (33 samples, 0.35%)</title><rect x="1169.0" y="515.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_method() (33 samples, 0.35%)</title><rect x="1169.0" y="499.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.0" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (30 samples, 0.32%)</title><rect x="1169.0" y="483.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.0" y="494.0"></text>
</g>
<g>
<title>Compilation::build_hir() (16 samples, 0.17%)</title><rect x="1169.0" y="467.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.0" y="478.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (15 samples, 0.16%)</title><rect x="1169.0" y="451.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.0" y="462.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (15 samples, 0.16%)</title><rect x="1169.0" y="435.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.0" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (14 samples, 0.15%)</title><rect x="1169.0" y="419.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (13 samples, 0.14%)</title><rect x="1169.0" y="403.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.0" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (13 samples, 0.14%)</title><rect x="1169.0" y="387.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.0" y="398.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (2 samples, 0.02%)</title><rect x="1169.0" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.07%)</title><rect x="1169.8" y="371.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.8" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1169.9" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1170.0" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1170.0" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.0" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="1170.0" y="307.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="1170.0" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.02%)</title><rect x="1170.0" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.02%)</title><rect x="1170.0" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.0" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.02%)</title><rect x="1170.4" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.4" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1170.4" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1170.4" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="334.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (2 samples, 0.02%)</title><rect x="1170.4" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="318.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.03%)</title><rect x="1171.0" y="467.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (2 samples, 0.02%)</title><rect x="1171.0" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (11 samples, 0.12%)</title><rect x="1171.4" y="467.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="478.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.03%)</title><rect x="1171.4" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.4" y="462.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (3 samples, 0.03%)</title><rect x="1171.4" y="435.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="446.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (2 samples, 0.02%)</title><rect x="1171.4" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="430.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (7 samples, 0.07%)</title><rect x="1171.8" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.02%)</title><rect x="1171.8" y="435.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="446.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.03%)</title><rect x="1172.2" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="446.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 0.03%)</title><rect x="1172.8" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 0.03%)</title><rect x="1172.8" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1172.8" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.02%)</title><rect x="1172.9" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="446.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (2 samples, 0.02%)</title><rect x="1172.9" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="430.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (2 samples, 0.02%)</title><rect x="1172.9" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="414.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.02%)</title><rect x="1173.2" y="531.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.02%)</title><rect x="1173.4" y="531.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="542.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.02%)</title><rect x="1173.4" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="526.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.02%)</title><rect x="1173.4" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="510.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.02%)</title><rect x="1173.4" y="483.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1176.4" y="494.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.02%)</title><rect x="1173.4" y="467.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1176.4" y="478.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.02%)</title><rect x="1173.4" y="451.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1176.4" y="462.0"></text>
</g>
<g>
<title>CompileQueue::get() (12 samples, 0.13%)</title><rect x="1173.8" y="547.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.13%)</title><rect x="1173.8" y="531.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.13%)</title><rect x="1173.8" y="515.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.12%)</title><rect x="1173.9" y="499.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.10%)</title><rect x="1173.9" y="483.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (11 samples, 0.12%)</title><rect x="1175.6" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="574.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (6 samples, 0.06%)</title><rect x="1175.6" y="547.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="558.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (6 samples, 0.06%)</title><rect x="1175.6" y="531.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.6" y="542.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (6 samples, 0.06%)</title><rect x="1175.6" y="515.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1178.6" y="526.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.03%)</title><rect x="1175.7" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.02%)</title><rect x="1175.8" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (2 samples, 0.02%)</title><rect x="1175.8" y="467.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (2 samples, 0.02%)</title><rect x="1176.1" y="499.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.05%)</title><rect x="1176.3" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.05%)</title><rect x="1176.3" y="531.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (5 samples, 0.05%)</title><rect x="1176.3" y="515.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (5 samples, 0.05%)</title><rect x="1176.3" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.05%)</title><rect x="1176.3" y="483.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>VMThread::run() (49 samples, 0.52%)</title><rect x="1176.9" y="595.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (49 samples, 0.52%)</title><rect x="1176.9" y="579.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.02%)</title><rect x="1177.1" y="563.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (45 samples, 0.48%)</title><rect x="1177.4" y="563.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (45 samples, 0.48%)</title><rect x="1177.4" y="547.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (45 samples, 0.48%)</title><rect x="1177.4" y="531.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (44 samples, 0.47%)</title><rect x="1177.6" y="515.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (44 samples, 0.47%)</title><rect x="1177.6" y="499.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (44 samples, 0.47%)</title><rect x="1177.6" y="483.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (3 samples, 0.03%)</title><rect x="1177.6" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>MetaspaceAux::print_on(outputStream*) (3 samples, 0.03%)</title><rect x="1177.6" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (3 samples, 0.03%)</title><rect x="1177.6" y="435.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (2 samples, 0.02%)</title><rect x="1177.7" y="419.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (6 samples, 0.06%)</title><rect x="1177.9" y="467.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (6 samples, 0.06%)</title><rect x="1177.9" y="451.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.06%)</title><rect x="1177.9" y="435.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.06%)</title><rect x="1177.9" y="419.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (6 samples, 0.06%)</title><rect x="1177.9" y="403.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (6 samples, 0.06%)</title><rect x="1177.9" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.06%)</title><rect x="1177.9" y="371.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1180.9" y="382.0"></text>
</g>
<g>
<title>GCTaskManager::task_idle_workers() (4 samples, 0.04%)</title><rect x="1178.7" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="478.0"></text>
</g>
<g>
<title>GCTaskManager::add_list(GCTaskQueue*) (4 samples, 0.04%)</title><rect x="1178.7" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (4 samples, 0.04%)</title><rect x="1178.7" y="435.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="1178.7" y="419.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1181.7" y="430.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (29 samples, 0.31%)</title><rect x="1179.5" y="467.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (28 samples, 0.30%)</title><rect x="1179.6" y="451.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>void PSRootsClosure&lt;false&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.02%)</title><rect x="1182.8" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>WatcherThread::run() (55 samples, 0.59%)</title><rect x="1183.1" y="595.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (55 samples, 0.59%)</title><rect x="1183.1" y="579.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (54 samples, 0.57%)</title><rect x="1183.2" y="563.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (51 samples, 0.54%)</title><rect x="1183.5" y="547.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (51 samples, 0.54%)</title><rect x="1183.5" y="531.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (51 samples, 0.54%)</title><rect x="1183.5" y="515.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1186.5" y="526.0"></text>
</g>
</g>
</svg>

