<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (11,701 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.03%)</title><rect x="10.0" y="1059.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>Interpreter (4 samples, 0.03%)</title><rect x="10.0" y="1043.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,979 samples, 76.74%)</title><rect x="10.4" y="1059.0" width="905.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.4" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,979 samples, 76.74%)</title><rect x="10.4" y="1043.0" width="905.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,979 samples, 76.74%)</title><rect x="10.4" y="1027.0" width="905.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.4" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,979 samples, 76.74%)</title><rect x="10.4" y="1011.0" width="905.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="1022.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (8,979 samples, 76.74%)</title><rect x="10.4" y="995.0" width="905.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="1006.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (8,979 samples, 76.74%)</title><rect x="10.4" y="979.0" width="905.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="990.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,979 samples, 76.74%)</title><rect x="10.4" y="963.0" width="905.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.4" y="974.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (8,979 samples, 76.74%)</title><rect x="10.4" y="947.0" width="905.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="958.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8,979 samples, 76.74%)</title><rect x="10.4" y="931.0" width="905.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="942.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (8,979 samples, 76.74%)</title><rect x="10.4" y="915.0" width="905.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.4" y="926.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke (8,979 samples, 76.74%)</title><rect x="10.4" y="899.0" width="905.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="910.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (8,979 samples, 76.74%)</title><rect x="10.4" y="883.0" width="905.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="894.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_medium_jmhTest.JwtProcessor_medium_Throughput (8,979 samples, 76.74%)</title><rect x="10.4" y="867.0" width="905.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="878.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_medium_jmhTest.JwtProcessor_medium_Throughput</text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_medium_jmhTest.JwtProcessor_medium_thrpt_jmhStub (8,561 samples, 73.16%)</title><rect x="10.4" y="851.0" width="863.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="862.0">com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_medium_jmhTest.JwtProcessor_medium_thrpt_jmhStub</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.03%)</title><rect x="12.0" y="835.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.JwtProcessor_medium (8,542 samples, 73.00%)</title><rect x="12.3" y="835.0" width="861.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.3" y="846.0">com/yueki/SignedJwtBenchmark.JwtProcessor_medium</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getStringFromList (13 samples, 0.11%)</title><rect x="12.5" y="819.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.5" y="830.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet (8,527 samples, 72.87%)</title><rect x="13.8" y="819.0" width="859.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.8" y="830.0">com/yueki/SignedJwtBenchmark.parseSignedJwtWithJWKSet</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (8,526 samples, 72.87%)</title><rect x="13.9" y="803.0" width="859.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.9" y="814.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/JWTParser.parse (653 samples, 5.58%)</title><rect x="14.1" y="787.0" width="65.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.1" y="798.0">com/nim..</text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (3 samples, 0.03%)</title><rect x="15.7" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (24 samples, 0.21%)</title><rect x="16.1" y="771.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.1" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (7 samples, 0.06%)</title><rect x="16.4" y="755.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (14 samples, 0.12%)</title><rect x="17.1" y="755.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.1" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (14 samples, 0.12%)</title><rect x="17.1" y="739.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.07%)</title><rect x="17.7" y="723.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.04%)</title><rect x="17.8" y="707.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.8" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (96 samples, 0.82%)</title><rect x="18.5" y="771.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.5" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (73 samples, 0.62%)</title><rect x="18.5" y="755.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.5" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (73 samples, 0.62%)</title><rect x="18.5" y="739.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.5" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.checkedCast (4 samples, 0.03%)</title><rect x="21.2" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.2" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (27 samples, 0.23%)</title><rect x="21.6" y="723.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (10 samples, 0.09%)</title><rect x="24.3" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 0.09%)</title><rect x="24.3" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (7 samples, 0.06%)</title><rect x="24.4" y="691.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.4" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="24.4" y="675.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.20%)</title><rect x="25.8" y="755.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (22 samples, 0.19%)</title><rect x="25.9" y="739.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (22 samples, 0.19%)</title><rect x="25.9" y="723.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.9" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (6 samples, 0.05%)</title><rect x="25.9" y="707.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (7 samples, 0.06%)</title><rect x="26.7" y="707.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.06%)</title><rect x="27.4" y="707.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="27.6" y="691.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="27.6" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="686.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="27.6" y="659.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.6" y="670.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="27.6" y="643.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.6" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.&lt;init&gt; (3 samples, 0.03%)</title><rect x="28.2" y="771.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.2" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (102 samples, 0.87%)</title><rect x="28.5" y="771.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.5" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (95 samples, 0.81%)</title><rect x="28.9" y="755.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.&lt;init&gt; (10 samples, 0.09%)</title><rect x="29.2" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.2" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.&lt;init&gt; (10 samples, 0.09%)</title><rect x="29.2" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.2" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.&lt;init&gt; (9 samples, 0.08%)</title><rect x="29.2" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.2" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (82 samples, 0.70%)</title><rect x="30.2" y="739.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.2" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (82 samples, 0.70%)</title><rect x="30.2" y="723.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.2" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (82 samples, 0.70%)</title><rect x="30.2" y="707.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.2" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (76 samples, 0.65%)</title><rect x="30.8" y="691.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.8" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (73 samples, 0.62%)</title><rect x="31.1" y="675.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.1" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (42 samples, 0.36%)</title><rect x="32.0" y="659.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.0" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (41 samples, 0.35%)</title><rect x="32.1" y="643.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (29 samples, 0.25%)</title><rect x="32.4" y="627.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.4" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (8 samples, 0.07%)</title><rect x="33.5" y="611.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="36.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (8 samples, 0.07%)</title><rect x="34.5" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.05%)</title><rect x="34.7" y="595.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.7" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (4 samples, 0.03%)</title><rect x="35.3" y="627.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.03%)</title><rect x="35.3" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="35.3" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.3" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="35.4" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.4" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="35.4" y="563.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="38.4" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (11 samples, 0.09%)</title><rect x="36.2" y="659.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.2" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (7 samples, 0.06%)</title><rect x="36.3" y="643.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="36.3" y="627.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.06%)</title><rect x="36.3" y="611.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.3" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.05%)</title><rect x="36.4" y="595.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.4" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (4 samples, 0.03%)</title><rect x="37.3" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="37.8" y="659.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="37.8" y="643.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.8" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="38.4" y="755.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="41.4" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (396 samples, 3.38%)</title><rect x="38.7" y="771.0" width="40.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.7" y="782.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JOSEObject.split (45 samples, 0.38%)</title><rect x="38.8" y="755.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (19 samples, 0.16%)</title><rect x="39.7" y="739.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (14 samples, 0.12%)</title><rect x="40.2" y="723.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.13%)</title><rect x="41.7" y="739.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.10%)</title><rect x="41.9" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="42.6" y="707.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.6" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (350 samples, 2.99%)</title><rect x="43.4" y="755.0" width="35.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.4" y="766.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (349 samples, 2.98%)</title><rect x="43.5" y="739.0" width="35.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.5" y="750.0">com..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (337 samples, 2.88%)</title><rect x="44.7" y="723.0" width="34.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.7" y="734.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (276 samples, 2.36%)</title><rect x="45.0" y="707.0" width="27.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.0" y="718.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (192 samples, 1.64%)</title><rect x="45.0" y="691.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.0" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.parse (152 samples, 1.30%)</title><rect x="45.0" y="675.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.0" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.parseAlgorithm (6 samples, 0.05%)</title><rect x="46.7" y="659.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.7" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSAlgorithm.parse (3 samples, 0.03%)</title><rect x="46.9" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.9" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (4 samples, 0.03%)</title><rect x="47.8" y="659.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.8" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (3 samples, 0.03%)</title><rect x="47.9" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.9" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getURI (107 samples, 0.91%)</title><rect x="48.2" y="659.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.2" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (4 samples, 0.03%)</title><rect x="48.2" y="643.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.2" y="654.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (103 samples, 0.88%)</title><rect x="48.6" y="643.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.6" y="654.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (100 samples, 0.85%)</title><rect x="48.9" y="627.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.9" y="638.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (8 samples, 0.07%)</title><rect x="49.7" y="611.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.7" y="622.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (6 samples, 0.05%)</title><rect x="49.9" y="595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.9" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (8 samples, 0.07%)</title><rect x="50.7" y="611.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.7" y="622.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.05%)</title><rect x="50.9" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.9" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="51.0" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="51.0" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.0" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (55 samples, 0.47%)</title><rect x="51.5" y="611.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.5" y="622.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (4 samples, 0.03%)</title><rect x="51.8" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.8" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="51.9" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.9" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (35 samples, 0.30%)</title><rect x="52.2" y="595.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.2" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (29 samples, 0.25%)</title><rect x="52.4" y="579.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.4" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (4 samples, 0.03%)</title><rect x="52.5" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.5" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (3 samples, 0.03%)</title><rect x="52.6" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.6" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (17 samples, 0.15%)</title><rect x="52.9" y="563.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.9" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (9 samples, 0.08%)</title><rect x="53.1" y="547.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.1" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (6 samples, 0.05%)</title><rect x="53.1" y="531.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.05%)</title><rect x="53.1" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.1" y="526.0"></text>
</g>
<g>
<title>java/net/URI.access$300 (3 samples, 0.03%)</title><rect x="53.7" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.7" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (5 samples, 0.04%)</title><rect x="54.0" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.04%)</title><rect x="54.0" y="531.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.0" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="54.0" y="515.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="54.0" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.0" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.05%)</title><rect x="54.7" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="54.8" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="54.8" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.8" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.03%)</title><rect x="55.3" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.3" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (14 samples, 0.12%)</title><rect x="55.7" y="595.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.7" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (3 samples, 0.03%)</title><rect x="56.3" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.3" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="56.3" y="563.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="59.3" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="56.6" y="579.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="59.6" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (10 samples, 0.09%)</title><rect x="57.3" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="57.5" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="57.5" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.5" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.charAt (4 samples, 0.03%)</title><rect x="57.9" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="58.0" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.0" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.substring (7 samples, 0.06%)</title><rect x="58.3" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.03%)</title><rect x="58.6" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="58.7" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="59.2" y="659.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.03%)</title><rect x="59.2" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (8 samples, 0.07%)</title><rect x="59.5" y="659.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (8 samples, 0.07%)</title><rect x="59.5" y="643.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (7 samples, 0.06%)</title><rect x="59.6" y="627.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.6" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (40 samples, 0.34%)</title><rect x="60.3" y="675.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.3" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (33 samples, 0.28%)</title><rect x="60.4" y="659.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.4" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (32 samples, 0.27%)</title><rect x="60.5" y="643.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.5" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (32 samples, 0.27%)</title><rect x="60.5" y="627.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.5" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (32 samples, 0.27%)</title><rect x="60.5" y="611.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (31 samples, 0.26%)</title><rect x="60.6" y="595.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (31 samples, 0.26%)</title><rect x="60.6" y="579.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.6" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (16 samples, 0.14%)</title><rect x="60.8" y="563.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (16 samples, 0.14%)</title><rect x="60.8" y="547.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (11 samples, 0.09%)</title><rect x="60.8" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.8" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (4 samples, 0.03%)</title><rect x="61.2" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (3 samples, 0.03%)</title><rect x="61.6" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.6" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (9 samples, 0.08%)</title><rect x="62.4" y="563.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.4" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (3 samples, 0.03%)</title><rect x="62.8" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="62.8" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="63.4" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.4" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="63.8" y="659.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="66.8" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (84 samples, 0.72%)</title><rect x="64.4" y="691.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.4" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (55 samples, 0.47%)</title><rect x="64.4" y="675.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.4" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (55 samples, 0.47%)</title><rect x="64.4" y="659.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.4" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (28 samples, 0.24%)</title><rect x="65.8" y="643.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.8" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (3 samples, 0.03%)</title><rect x="68.2" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (11 samples, 0.09%)</title><rect x="68.6" y="643.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (11 samples, 0.09%)</title><rect x="68.6" y="627.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (5 samples, 0.04%)</title><rect x="68.9" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (3 samples, 0.03%)</title><rect x="69.4" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="69.4" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="69.4" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.4" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="69.4" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.4" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="69.4" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (29 samples, 0.25%)</title><rect x="69.9" y="675.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (29 samples, 0.25%)</title><rect x="69.9" y="659.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.9" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (29 samples, 0.25%)</title><rect x="69.9" y="643.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.9" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (16 samples, 0.14%)</title><rect x="70.8" y="627.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="73.8" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (50 samples, 0.43%)</title><rect x="72.8" y="707.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.8" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (35 samples, 0.30%)</title><rect x="73.6" y="691.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.6" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (26 samples, 0.22%)</title><rect x="73.6" y="675.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.6" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.stringToByteArray (26 samples, 0.22%)</title><rect x="73.6" y="659.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.6" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (26 samples, 0.22%)</title><rect x="73.6" y="643.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (25 samples, 0.21%)</title><rect x="73.7" y="627.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (17 samples, 0.15%)</title><rect x="74.5" y="611.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.5" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (9 samples, 0.08%)</title><rect x="76.3" y="675.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.3" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="76.9" y="659.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="79.9" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.04%)</title><rect x="77.2" y="691.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.2" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.04%)</title><rect x="77.2" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.2" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.04%)</title><rect x="77.2" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.2" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="77.2" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.2" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="77.3" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.3" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="77.3" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="80.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="77.3" y="595.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="80.3" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (8 samples, 0.07%)</title><rect x="77.9" y="707.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.9" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (4 samples, 0.03%)</title><rect x="78.0" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.0" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.stringToByteArray (4 samples, 0.03%)</title><rect x="78.0" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.03%)</title><rect x="78.0" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.03%)</title><rect x="78.1" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (3 samples, 0.03%)</title><rect x="78.4" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="78.4" y="675.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="81.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.09%)</title><rect x="78.9" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.06%)</title><rect x="79.1" y="755.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.1" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.parse (7 samples, 0.06%)</title><rect x="79.1" y="739.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.1" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (7,871 samples, 67.27%)</title><rect x="80.0" y="787.0" width="793.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.0" y="798.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.process (7,870 samples, 67.26%)</title><rect x="80.1" y="771.0" width="793.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.1" y="782.0">com/nimbusds/jwt/proc/DefaultJWTProcessor.process</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.verify (5,535 samples, 47.30%)</title><rect x="80.9" y="755.0" width="558.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.9" y="766.0">com/nimbusds/jose/JWSObject.verify</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (105 samples, 0.90%)</title><rect x="81.2" y="739.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (104 samples, 0.89%)</title><rect x="81.3" y="723.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (102 samples, 0.87%)</title><rect x="81.5" y="707.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (7 samples, 0.06%)</title><rect x="83.0" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.03%)</title><rect x="83.2" y="675.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.2" y="686.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (5 samples, 0.04%)</title><rect x="84.1" y="691.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (43 samples, 0.37%)</title><rect x="84.6" y="691.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (26 samples, 0.22%)</title><rect x="89.0" y="691.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (26 samples, 0.22%)</title><rect x="89.0" y="675.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (26 samples, 0.22%)</title><rect x="89.0" y="659.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.0" y="670.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (26 samples, 0.22%)</title><rect x="89.0" y="643.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.0" y="654.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (19 samples, 0.16%)</title><rect x="89.7" y="627.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.7" y="638.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (9 samples, 0.08%)</title><rect x="90.5" y="611.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.05%)</title><rect x="90.6" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.6" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.verify (5,427 samples, 46.38%)</title><rect x="91.8" y="739.0" width="547.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.8" y="750.0">com/nimbusds/jose/crypto/RSASSAVerifier.verify</text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSA.getSignerAndVerifier (34 samples, 0.29%)</title><rect x="92.2" y="723.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.2" y="734.0"></text>
</g>
<g>
<title>java/security/Signature.getInstance (31 samples, 0.26%)</title><rect x="92.5" y="707.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.5" y="718.0"></text>
</g>
<g>
<title>java/security/Signature.isSpi (5 samples, 0.04%)</title><rect x="92.6" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.03%)</title><rect x="92.7" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="92.7" y="659.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.7" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (20 samples, 0.17%)</title><rect x="93.3" y="691.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.3" y="702.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (20 samples, 0.17%)</title><rect x="93.3" y="675.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.3" y="686.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (20 samples, 0.17%)</title><rect x="93.3" y="659.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.3" y="670.0"></text>
</g>
<g>
<title>java/security/Provider.getService (14 samples, 0.12%)</title><rect x="93.7" y="643.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.7" y="654.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (7 samples, 0.06%)</title><rect x="94.3" y="627.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.3" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (7 samples, 0.06%)</title><rect x="94.3" y="611.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (7 samples, 0.06%)</title><rect x="94.3" y="595.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.3" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="94.7" y="579.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="97.7" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (3 samples, 0.03%)</title><rect x="95.3" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.3" y="702.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.next (3 samples, 0.03%)</title><rect x="95.3" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.3" y="686.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (3 samples, 0.03%)</title><rect x="95.3" y="659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.3" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (3 samples, 0.03%)</title><rect x="95.3" y="643.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.3" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (201 samples, 1.72%)</title><rect x="95.6" y="723.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.6" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (199 samples, 1.70%)</title><rect x="95.8" y="707.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.8" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (112 samples, 0.96%)</title><rect x="102.7" y="691.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.7" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (6 samples, 0.05%)</title><rect x="113.4" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (14 samples, 0.12%)</title><rect x="114.0" y="691.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (14 samples, 0.12%)</title><rect x="114.0" y="675.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (8 samples, 0.07%)</title><rect x="114.2" y="659.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (4 samples, 0.03%)</title><rect x="115.0" y="659.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="115.1" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="115.1" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.1" y="638.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="115.1" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.1" y="622.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="115.1" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="118.1" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="115.6" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="118.6" y="702.0"></text>
</g>
<g>
<title>java/security/Signature.initVerify (82 samples, 0.70%)</title><rect x="115.9" y="723.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.9" y="734.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitVerify (78 samples, 0.67%)</title><rect x="116.1" y="707.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.1" y="718.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (78 samples, 0.67%)</title><rect x="116.1" y="691.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.1" y="702.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsParameter (6 samples, 0.05%)</title><rect x="116.9" y="675.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.9" y="686.0"></text>
</g>
<g>
<title>java/security/Provider$Service.supportsKeyClass (4 samples, 0.03%)</title><rect x="116.9" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.9" y="670.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.init (6 samples, 0.05%)</title><rect x="117.5" y="675.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.5" y="686.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineInitVerify (6 samples, 0.05%)</title><rect x="117.5" y="659.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.5" y="670.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.initCommon (5 samples, 0.04%)</title><rect x="117.6" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.6" y="654.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (58 samples, 0.50%)</title><rect x="118.1" y="675.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.1" y="686.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (57 samples, 0.49%)</title><rect x="118.2" y="659.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (12 samples, 0.10%)</title><rect x="118.2" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.2" y="654.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (12 samples, 0.10%)</title><rect x="118.2" y="627.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (9 samples, 0.08%)</title><rect x="118.3" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (8 samples, 0.07%)</title><rect x="118.4" y="595.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.4" y="606.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (5 samples, 0.04%)</title><rect x="118.7" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.7" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (42 samples, 0.36%)</title><rect x="119.4" y="643.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.4" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (41 samples, 0.35%)</title><rect x="119.4" y="627.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.4" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (41 samples, 0.35%)</title><rect x="119.4" y="611.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature$SHA256withRSA.&lt;init&gt; (41 samples, 0.35%)</title><rect x="119.4" y="595.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.4" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.&lt;init&gt; (41 samples, 0.35%)</title><rect x="119.4" y="579.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.4" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (41 samples, 0.35%)</title><rect x="119.4" y="563.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="574.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (40 samples, 0.34%)</title><rect x="119.5" y="547.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.5" y="558.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (39 samples, 0.33%)</title><rect x="119.6" y="531.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.6" y="542.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (24 samples, 0.21%)</title><rect x="119.6" y="515.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.6" y="526.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (18 samples, 0.15%)</title><rect x="119.7" y="499.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (3 samples, 0.03%)</title><rect x="119.8" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (3 samples, 0.03%)</title><rect x="119.8" y="467.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (3 samples, 0.03%)</title><rect x="119.8" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.8" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (3 samples, 0.03%)</title><rect x="119.8" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.8" y="446.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (3 samples, 0.03%)</title><rect x="119.8" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.8" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.09%)</title><rect x="120.1" y="483.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.1" y="494.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.06%)</title><rect x="120.1" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.1" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (7 samples, 0.06%)</title><rect x="120.1" y="451.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.1" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.&lt;init&gt; (5 samples, 0.04%)</title><rect x="120.3" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.3" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.&lt;init&gt; (5 samples, 0.04%)</title><rect x="120.3" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.3" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.&lt;init&gt; (4 samples, 0.03%)</title><rect x="120.4" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.4" y="414.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.quickCheckMemberAccess (3 samples, 0.03%)</title><rect x="120.8" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.8" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Modifier.isPublic (3 samples, 0.03%)</title><rect x="120.8" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.03%)</title><rect x="121.1" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.03%)</title><rect x="121.1" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.1" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (5 samples, 0.04%)</title><rect x="121.5" y="499.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.5" y="510.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (12 samples, 0.10%)</title><rect x="122.0" y="515.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.0" y="526.0"></text>
</g>
<g>
<title>java/security/Provider.getService (10 samples, 0.09%)</title><rect x="122.0" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.0" y="510.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (5 samples, 0.04%)</title><rect x="122.2" y="483.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.2" y="494.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (5 samples, 0.04%)</title><rect x="122.2" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (5 samples, 0.04%)</title><rect x="122.2" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.2" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 0.03%)</title><rect x="122.7" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="122.7" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.7" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getProviderList (3 samples, 0.03%)</title><rect x="123.3" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.3" y="526.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getThreadProviderList (3 samples, 0.03%)</title><rect x="123.3" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.3" y="510.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (3 samples, 0.03%)</title><rect x="123.7" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.7" y="654.0"></text>
</g>
<g>
<title>java/security/Signature.update (415 samples, 3.55%)</title><rect x="124.2" y="723.0" width="41.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.2" y="734.0">jav..</text>
</g>
<g>
<title>java/security/Signature.update (415 samples, 3.55%)</title><rect x="124.2" y="707.0" width="41.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.2" y="718.0">jav..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (415 samples, 3.55%)</title><rect x="124.2" y="691.0" width="41.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.2" y="702.0">jav..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (411 samples, 3.51%)</title><rect x="124.4" y="675.0" width="41.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.4" y="686.0">sun..</text>
</g>
<g>
<title>java/security/MessageDigest.update (411 samples, 3.51%)</title><rect x="124.4" y="659.0" width="41.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.4" y="670.0">jav..</text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (411 samples, 3.51%)</title><rect x="124.4" y="643.0" width="41.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.4" y="654.0">jav..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (411 samples, 3.51%)</title><rect x="124.4" y="627.0" width="41.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.4" y="638.0">sun..</text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (409 samples, 3.50%)</title><rect x="124.6" y="611.0" width="41.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.6" y="622.0">sun..</text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (407 samples, 3.48%)</title><rect x="124.8" y="595.0" width="41.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.8" y="606.0">sun..</text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (23 samples, 0.20%)</title><rect x="161.4" y="579.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.4" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (21 samples, 0.18%)</title><rect x="163.7" y="579.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="590.0"></text>
</g>
<g>
<title>java/security/Signature.verify (4,690 samples, 40.08%)</title><rect x="166.0" y="723.0" width="473.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.0" y="734.0">java/security/Signature.verify</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineVerify (4,689 samples, 40.07%)</title><rect x="166.1" y="707.0" width="472.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.1" y="718.0">java/security/Signature$Delegate.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineVerify (4,689 samples, 40.07%)</title><rect x="166.1" y="691.0" width="472.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.1" y="702.0">sun/security/rsa/RSASignature.engineVerify</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (3,994 samples, 34.13%)</title><rect x="166.8" y="675.0" width="402.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.8" y="686.0">sun/security/rsa/RSACore.rsa</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crypt (3,990 samples, 34.10%)</title><rect x="167.1" y="659.0" width="402.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.1" y="670.0">sun/security/rsa/RSACore.crypt</text>
</g>
<g>
<title>java/math/BigInteger.modPow (3,936 samples, 33.64%)</title><rect x="167.1" y="643.0" width="396.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.1" y="654.0">java/math/BigInteger.modPow</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (3,931 samples, 33.60%)</title><rect x="167.6" y="627.0" width="396.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.6" y="638.0">java/math/BigInteger.oddModPow</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (199 samples, 1.70%)</title><rect x="172.3" y="611.0" width="20.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="175.3" y="622.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (193 samples, 1.65%)</title><rect x="172.9" y="595.0" width="19.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="175.9" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (2,777 samples, 23.73%)</title><rect x="192.3" y="611.0" width="280.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="195.3" y="622.0">SharedRuntime::montgomery_square(int*,..</text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (2,710 samples, 23.16%)</title><rect x="199.1" y="595.0" width="273.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="202.1" y="606.0">montgomery_square(unsigned long*, uns..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (6 samples, 0.05%)</title><rect x="472.5" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="472.8" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.8" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.equals (3 samples, 0.03%)</title><rect x="473.3" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.3" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.leftShift (4 samples, 0.03%)</title><rect x="473.6" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.6" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (182 samples, 1.56%)</title><rect x="474.0" y="611.0" width="18.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.0" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (172 samples, 1.47%)</title><rect x="474.8" y="595.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.8" y="606.0"></text>
</g>
<g>
<title>mulAdd (169 samples, 1.44%)</title><rect x="475.1" y="579.0" width="17.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="478.1" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (196 samples, 1.68%)</title><rect x="492.4" y="611.0" width="19.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.4" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (196 samples, 1.68%)</title><rect x="492.4" y="595.0" width="19.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.4" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (195 samples, 1.67%)</title><rect x="492.4" y="579.0" width="19.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="495.4" y="590.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (187 samples, 1.60%)</title><rect x="493.3" y="563.0" width="18.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="496.3" y="574.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (468 samples, 4.00%)</title><rect x="512.2" y="611.0" width="47.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.2" y="622.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (467 samples, 3.99%)</title><rect x="512.3" y="595.0" width="47.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.3" y="606.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (467 samples, 3.99%)</title><rect x="512.3" y="579.0" width="47.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.3" y="590.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (453 samples, 3.87%)</title><rect x="513.2" y="563.0" width="45.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.2" y="574.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divWord (4 samples, 0.03%)</title><rect x="518.5" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.5" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (387 samples, 3.31%)</title><rect x="518.9" y="547.0" width="39.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.9" y="558.0">jav..</text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (7 samples, 0.06%)</title><rect x="557.9" y="547.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.9" y="558.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (5 samples, 0.04%)</title><rect x="558.9" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.9" y="574.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.inverseMod64 (4 samples, 0.03%)</title><rect x="559.4" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="562.4" y="622.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.normalize (4 samples, 0.03%)</title><rect x="559.8" y="611.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="562.8" y="622.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.toIntArray (5 samples, 0.04%)</title><rect x="560.2" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.2" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.04%)</title><rect x="560.7" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.7" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (3 samples, 0.03%)</title><rect x="560.7" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.7" y="606.0"></text>
</g>
<g>
<title>jint_arraycopy (3 samples, 0.03%)</title><rect x="561.2" y="611.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="564.2" y="622.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (18 samples, 0.15%)</title><rect x="561.5" y="611.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="564.5" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="563.3" y="611.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="566.3" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getByteLength (4 samples, 0.03%)</title><rect x="564.0" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.0" y="654.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.parseMsg (18 samples, 0.15%)</title><rect x="564.5" y="643.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.5" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (15 samples, 0.13%)</title><rect x="564.7" y="627.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.7" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (14 samples, 0.12%)</title><rect x="564.8" y="611.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.8" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.toByteArray (32 samples, 0.27%)</title><rect x="566.3" y="643.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.3" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (32 samples, 0.27%)</title><rect x="566.3" y="627.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.3" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.getInt (4 samples, 0.03%)</title><rect x="569.1" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="572.1" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.signInt (3 samples, 0.03%)</title><rect x="569.2" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.2" y="606.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpad (543 samples, 4.64%)</title><rect x="569.6" y="675.0" width="54.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.6" y="686.0">sun/s..</text>
</g>
<g>
<title>sun/security/rsa/RSAPadding.unpadV15 (541 samples, 4.62%)</title><rect x="569.8" y="659.0" width="54.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.8" y="670.0">sun/s..</text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (526 samples, 4.50%)</title><rect x="571.2" y="643.0" width="53.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="574.2" y="654.0">javax..</text>
</g>
<g>
<title>java/security/GeneralSecurityException.&lt;init&gt; (525 samples, 4.49%)</title><rect x="571.3" y="627.0" width="53.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.3" y="638.0">java/..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (524 samples, 4.48%)</title><rect x="571.3" y="611.0" width="52.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.3" y="622.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (524 samples, 4.48%)</title><rect x="571.3" y="595.0" width="52.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.3" y="606.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (524 samples, 4.48%)</title><rect x="571.3" y="579.0" width="52.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.3" y="590.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (522 samples, 4.46%)</title><rect x="571.5" y="563.0" width="52.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.5" y="574.0">java/..</text>
</g>
<g>
<title>JVM_FillInStackTrace (6 samples, 0.05%)</title><rect x="572.3" y="547.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="575.3" y="558.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (505 samples, 4.32%)</title><rect x="572.9" y="547.0" width="51.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="575.9" y="558.0">Java_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.03%)</title><rect x="573.8" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.8" y="542.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (485 samples, 4.14%)</title><rect x="574.1" y="531.0" width="48.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="577.1" y="542.0">JVM_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.03%)</title><rect x="574.3" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="577.3" y="526.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (4 samples, 0.03%)</title><rect x="574.8" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="577.8" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.03%)</title><rect x="575.8" y="515.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="578.8" y="526.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (461 samples, 3.94%)</title><rect x="576.4" y="515.0" width="46.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="579.4" y="526.0">java..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.03%)</title><rect x="577.0" y="499.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="580.0" y="510.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (7 samples, 0.06%)</title><rect x="577.8" y="499.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.8" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (3 samples, 0.03%)</title><rect x="578.8" y="499.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.8" y="510.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (5 samples, 0.04%)</title><rect x="579.1" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="582.1" y="510.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (417 samples, 3.56%)</title><rect x="579.7" y="499.0" width="42.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="582.7" y="510.0">java..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (52 samples, 0.44%)</title><rect x="589.9" y="483.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="592.9" y="494.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (44 samples, 0.38%)</title><rect x="590.0" y="467.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="593.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (15 samples, 0.13%)</title><rect x="590.3" y="451.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="593.3" y="462.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="591.3" y="435.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="594.3" y="446.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (10 samples, 0.09%)</title><rect x="591.9" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="594.9" y="462.0"></text>
</g>
<g>
<title>arrayOopDesc::max_array_length(BasicType) (8 samples, 0.07%)</title><rect x="592.1" y="435.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="595.1" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.09%)</title><rect x="592.9" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="595.9" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (6 samples, 0.05%)</title><rect x="593.2" y="435.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="596.2" y="446.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (4 samples, 0.03%)</title><rect x="594.0" y="451.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="597.0" y="462.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.03%)</title><rect x="594.4" y="467.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="597.4" y="478.0"></text>
</g>
<g>
<title>objArrayOopDesc::obj_at_put(int, oopDesc*) (4 samples, 0.03%)</title><rect x="594.7" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="597.7" y="478.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (93 samples, 0.79%)</title><rect x="595.3" y="483.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="598.3" y="494.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int*, oopDesc*) (10 samples, 0.09%)</title><rect x="603.7" y="467.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="606.7" y="478.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (7 samples, 0.06%)</title><rect x="604.7" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.7" y="494.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (20 samples, 0.17%)</title><rect x="605.7" y="483.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.7" y="494.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.10%)</title><rect x="605.8" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="608.8" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (7 samples, 0.06%)</title><rect x="605.8" y="451.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.8" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.04%)</title><rect x="606.0" y="435.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="609.0" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.03%)</title><rect x="606.5" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="609.5" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="607.0" y="467.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="610.0" y="478.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.03%)</title><rect x="607.3" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.3" y="478.0"></text>
</g>
<g>
<title>Klass::is_subtype_of(Klass*) const (5 samples, 0.04%)</title><rect x="607.7" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="610.7" y="494.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (21 samples, 0.18%)</title><rect x="608.2" y="483.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="611.2" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="610.6" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="613.6" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (78 samples, 0.67%)</title><rect x="611.2" y="483.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="614.2" y="494.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (42 samples, 0.36%)</title><rect x="611.6" y="467.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="614.6" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="611.8" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.8" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (34 samples, 0.29%)</title><rect x="612.2" y="451.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.2" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (26 samples, 0.22%)</title><rect x="612.3" y="435.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="615.3" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (26 samples, 0.22%)</title><rect x="612.3" y="419.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="615.3" y="430.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (7 samples, 0.06%)</title><rect x="614.9" y="435.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="617.9" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (9 samples, 0.08%)</title><rect x="615.9" y="467.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.9" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.07%)</title><rect x="615.9" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="618.9" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.07%)</title><rect x="615.9" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="618.9" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.07%)</title><rect x="615.9" y="419.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="618.9" y="430.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (23 samples, 0.20%)</title><rect x="616.8" y="467.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="619.8" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="617.4" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.4" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.10%)</title><rect x="617.7" y="451.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="620.7" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (12 samples, 0.10%)</title><rect x="617.7" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="620.7" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (10 samples, 0.09%)</title><rect x="617.9" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="620.9" y="430.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oopDesc*, oopDesc*) (4 samples, 0.03%)</title><rect x="619.2" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.2" y="494.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc(unsigned char*, bool) (7 samples, 0.06%)</title><rect x="619.6" y="483.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="622.6" y="494.0"></text>
</g>
<g>
<title>nmethod::find_pc_desc_internal(unsigned char*, bool) (4 samples, 0.03%)</title><rect x="620.3" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="623.3" y="494.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (4 samples, 0.03%)</title><rect x="620.3" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.3" y="478.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (9 samples, 0.08%)</title><rect x="620.8" y="483.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="623.8" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.03%)</title><rect x="622.1" y="499.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="625.1" y="510.0"></text>
</g>
<g>
<title>void oop_store&lt;unsigned int&gt;(unsigned int volatile*, oopDesc*) (3 samples, 0.03%)</title><rect x="622.5" y="499.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="625.5" y="510.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.03%)</title><rect x="623.0" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.03%)</title><rect x="623.3" y="531.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.3" y="542.0"></text>
</g>
<g>
<title>jsqrt (3 samples, 0.03%)</title><rect x="623.9" y="547.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="626.9" y="558.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.decodeSignature (107 samples, 0.91%)</title><rect x="624.4" y="675.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.4" y="686.0"></text>
</g>
<g>
<title>javax/crypto/BadPaddingException.&lt;init&gt; (4 samples, 0.03%)</title><rect x="625.2" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.2" y="670.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.&lt;init&gt; (3 samples, 0.03%)</title><rect x="625.6" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.6" y="670.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getSequence (45 samples, 0.38%)</title><rect x="625.9" y="659.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.9" y="670.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.readVector (44 samples, 0.38%)</title><rect x="626.0" y="643.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="629.0" y="654.0"></text>
</g>
<g>
<title>java/util/Vector.&lt;init&gt; (5 samples, 0.04%)</title><rect x="627.3" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="630.3" y="638.0"></text>
</g>
<g>
<title>java/util/Vector.&lt;init&gt; (4 samples, 0.03%)</title><rect x="627.4" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.4" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.available (5 samples, 0.04%)</title><rect x="627.8" y="627.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="630.8" y="638.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (21 samples, 0.18%)</title><rect x="628.3" y="627.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.3" y="638.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.init (20 samples, 0.17%)</title><rect x="628.4" y="611.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.4" y="622.0"></text>
</g>
<g>
<title>sun/misc/IOUtils.readFully (13 samples, 0.11%)</title><rect x="628.9" y="595.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="631.9" y="606.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (3 samples, 0.03%)</title><rect x="629.2" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="632.2" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="629.5" y="579.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.5" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.getOctetString (5 samples, 0.04%)</title><rect x="630.4" y="659.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.4" y="670.0"></text>
</g>
<g>
<title>java/io/InputStream.read (3 samples, 0.03%)</title><rect x="630.6" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.6" y="654.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.equals (8 samples, 0.07%)</title><rect x="630.9" y="659.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="633.9" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.equals (5 samples, 0.04%)</title><rect x="631.2" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.2" y="654.0"></text>
</g>
<g>
<title>sun/security/x509/AlgorithmId.parse (33 samples, 0.28%)</title><rect x="631.8" y="659.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="634.8" y="670.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getDerValue (21 samples, 0.18%)</title><rect x="632.1" y="643.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.1" y="654.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (21 samples, 0.18%)</title><rect x="632.1" y="627.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.1" y="638.0"></text>
</g>
<g>
<title>sun/security/util/DerInputBuffer.dup (19 samples, 0.16%)</title><rect x="632.2" y="611.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="635.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.clone (14 samples, 0.12%)</title><rect x="632.7" y="595.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.7" y="606.0"></text>
</g>
<g>
<title>JVM_Clone (7 samples, 0.06%)</title><rect x="633.2" y="579.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="636.2" y="590.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="633.6" y="563.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="636.6" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getOID (9 samples, 0.08%)</title><rect x="634.2" y="643.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.2" y="654.0"></text>
</g>
<g>
<title>sun/security/util/ObjectIdentifier.&lt;init&gt; (7 samples, 0.06%)</title><rect x="634.4" y="627.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="638.0"></text>
</g>
<g>
<title>sun/security/util/DerInputStream.getBytes (4 samples, 0.03%)</title><rect x="634.4" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="622.0"></text>
</g>
<g>
<title>java/io/InputStream.read (4 samples, 0.03%)</title><rect x="634.4" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="606.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (4 samples, 0.03%)</title><rect x="634.4" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.4" y="590.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.getDigestValue (38 samples, 0.32%)</title><rect x="635.1" y="675.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.1" y="686.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (36 samples, 0.31%)</title><rect x="635.3" y="659.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.3" y="670.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (36 samples, 0.31%)</title><rect x="635.3" y="643.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.3" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (36 samples, 0.31%)</title><rect x="635.3" y="627.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.3" y="638.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (35 samples, 0.30%)</title><rect x="635.4" y="611.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.4" y="622.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (35 samples, 0.30%)</title><rect x="635.4" y="595.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.4" y="606.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (10 samples, 0.09%)</title><rect x="635.5" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.5" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.03%)</title><rect x="636.0" y="563.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="639.0" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (24 samples, 0.21%)</title><rect x="636.6" y="579.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.6" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (3 samples, 0.03%)</title><rect x="638.4" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="641.4" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.lf_maj (3 samples, 0.03%)</title><rect x="638.7" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.7" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/factories/DefaultJWSVerifierFactory.createJWSVerifier (91 samples, 0.78%)</title><rect x="639.1" y="755.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.1" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.04%)</title><rect x="639.4" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.4" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSAVerifier.&lt;init&gt; (5 samples, 0.04%)</title><rect x="639.4" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.4" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/impl/RSASSAProvider.&lt;init&gt; (3 samples, 0.03%)</title><rect x="639.6" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.6" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jca/JCAContext.getSecureRandom (72 samples, 0.62%)</title><rect x="639.9" y="739.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.9" y="750.0"></text>
</g>
<g>
<title>java/security/SecureRandom.&lt;init&gt; (69 samples, 0.59%)</title><rect x="640.1" y="723.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.1" y="734.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getDefaultPRNG (68 samples, 0.58%)</title><rect x="640.1" y="707.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.1" y="718.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getInstance (52 samples, 0.44%)</title><rect x="640.1" y="691.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.1" y="702.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (52 samples, 0.44%)</title><rect x="640.1" y="675.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.1" y="686.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (25 samples, 0.21%)</title><rect x="640.1" y="659.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.1" y="670.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (22 samples, 0.19%)</title><rect x="640.1" y="643.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="643.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (15 samples, 0.13%)</title><rect x="640.1" y="627.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (14 samples, 0.12%)</title><rect x="640.1" y="611.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (11 samples, 0.09%)</title><rect x="640.2" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (11 samples, 0.09%)</title><rect x="640.2" y="579.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.2" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (5 samples, 0.04%)</title><rect x="640.8" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="643.8" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.03%)</title><rect x="641.6" y="627.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.6" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.03%)</title><rect x="641.6" y="611.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.6" y="622.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (3 samples, 0.03%)</title><rect x="641.6" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.6" y="606.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (3 samples, 0.03%)</title><rect x="642.3" y="643.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.3" y="654.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (27 samples, 0.23%)</title><rect x="642.6" y="659.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.6" y="670.0"></text>
</g>
<g>
<title>java/security/Provider.getService (27 samples, 0.23%)</title><rect x="642.6" y="643.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.6" y="654.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (16 samples, 0.14%)</title><rect x="642.8" y="627.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.8" y="638.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (16 samples, 0.14%)</title><rect x="642.8" y="611.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (16 samples, 0.14%)</title><rect x="642.8" y="595.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (3 samples, 0.03%)</title><rect x="643.6" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.6" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 0.08%)</title><rect x="644.4" y="627.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.06%)</title><rect x="644.4" y="611.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.4" y="622.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (6 samples, 0.05%)</title><rect x="644.5" y="595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.5" y="606.0"></text>
</g>
<g>
<title>java/security/SecureRandom.getPrngAlgorithm (16 samples, 0.14%)</title><rect x="645.3" y="691.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.3" y="702.0"></text>
</g>
<g>
<title>java/security/Provider.getServices (3 samples, 0.03%)</title><rect x="645.6" y="675.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.6" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.next (3 samples, 0.03%)</title><rect x="645.9" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.9" y="686.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$3.get (3 samples, 0.03%)</title><rect x="645.9" y="659.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.9" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$3.get (3 samples, 0.03%)</title><rect x="645.9" y="643.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.9" y="654.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.03%)</title><rect x="645.9" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (5 samples, 0.04%)</title><rect x="646.4" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.4" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="646.5" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.03%)</title><rect x="646.5" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="649.5" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (11 samples, 0.09%)</title><rect x="647.1" y="739.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (4 samples, 0.03%)</title><rect x="647.9" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.03%)</title><rect x="648.0" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="651.0" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/proc/DefaultJOSEObjectTypeVerifier.verify (3 samples, 0.03%)</title><rect x="648.4" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.03%)</title><rect x="648.4" y="739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.03%)</title><rect x="648.4" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="648.4" y="707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.4" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.extractJWTClaimsSet (1,606 samples, 13.73%)</title><rect x="648.8" y="755.0" width="161.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.8" y="766.0">com/nimbusds/jwt/proc..</text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.getJWTClaimsSet (1,606 samples, 13.73%)</title><rect x="648.8" y="739.0" width="161.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.8" y="750.0">com/nimbusds/jwt/Sign..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toJSONObject (1,507 samples, 12.88%)</title><rect x="648.9" y="723.0" width="151.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.9" y="734.0">com/nimbusds/jose/P..</text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (923 samples, 7.89%)</title><rect x="649.1" y="707.0" width="93.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.1" y="718.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToString (923 samples, 7.89%)</title><rect x="649.1" y="691.0" width="93.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.1" y="702.0">com/nimbusd..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (878 samples, 7.50%)</title><rect x="649.2" y="675.0" width="88.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.2" y="686.0">com/nimbus..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (878 samples, 7.50%)</title><rect x="649.2" y="659.0" width="88.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.2" y="670.0">com/nimbus..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (485 samples, 4.14%)</title><rect x="681.7" y="643.0" width="48.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.7" y="654.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (29 samples, 0.25%)</title><rect x="727.7" y="627.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="730.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (57 samples, 0.49%)</title><rect x="730.6" y="643.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="733.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (57 samples, 0.49%)</title><rect x="730.6" y="627.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (11 samples, 0.09%)</title><rect x="731.5" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.09%)</title><rect x="731.5" y="595.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="731.7" y="579.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="734.7" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="732.0" y="579.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="735.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (32 samples, 0.27%)</title><rect x="732.7" y="611.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="735.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (5 samples, 0.04%)</title><rect x="735.9" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="738.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="735.9" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="735.9" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.9" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="735.9" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.9" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="736.1" y="547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.11%)</title><rect x="736.4" y="643.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="739.4" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (12 samples, 0.10%)</title><rect x="736.5" y="627.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="739.5" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (44 samples, 0.38%)</title><rect x="737.7" y="675.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (41 samples, 0.35%)</title><rect x="738.0" y="659.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (41 samples, 0.35%)</title><rect x="738.0" y="643.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.scale (4 samples, 0.03%)</title><rect x="738.6" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.6" y="638.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.implReplaceWith (3 samples, 0.03%)</title><rect x="738.7" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (24 samples, 0.21%)</title><rect x="739.0" y="627.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="742.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (7 samples, 0.06%)</title><rect x="741.4" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="741.6" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="741.6" y="595.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="744.6" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="741.6" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.6" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="741.6" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="744.6" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (5 samples, 0.04%)</title><rect x="741.6" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="744.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.04%)</title><rect x="741.6" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.6" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.parse (581 samples, 4.97%)</title><rect x="742.2" y="707.0" width="58.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.2" y="718.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParser.parse (578 samples, 4.94%)</title><rect x="742.5" y="691.0" width="58.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.5" y="702.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (575 samples, 4.91%)</title><rect x="742.8" y="675.0" width="58.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.8" y="686.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.parse (575 samples, 4.91%)</title><rect x="742.8" y="659.0" width="58.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.8" y="670.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parse (575 samples, 4.91%)</title><rect x="742.8" y="643.0" width="58.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.8" y="654.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (573 samples, 4.90%)</title><rect x="742.8" y="627.0" width="57.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.8" y="638.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readObject (573 samples, 4.90%)</title><rect x="742.8" y="611.0" width="57.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="745.8" y="622.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readMain (544 samples, 4.65%)</title><rect x="743.4" y="595.0" width="54.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="746.4" y="606.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readNumber (21 samples, 0.18%)</title><rect x="743.7" y="579.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.7" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (6 samples, 0.05%)</title><rect x="744.3" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.3" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.extractStringTrim (9 samples, 0.08%)</title><rect x="744.9" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.9" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (7 samples, 0.06%)</title><rect x="745.1" y="547.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="745.1" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="745.2" y="515.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.2" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.parseNumber (3 samples, 0.03%)</title><rect x="745.2" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.2" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (520 samples, 4.44%)</title><rect x="745.8" y="579.0" width="52.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="748.8" y="590.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase.readString2 (499 samples, 4.26%)</title><rect x="746.1" y="563.0" width="50.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.1" y="574.0">com/n..</text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.append (194 samples, 1.66%)</title><rect x="759.7" y="547.0" width="19.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.7" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserBase$MSB.toString (9 samples, 0.08%)</title><rect x="779.3" y="547.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="782.3" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="779.7" y="531.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="782.7" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.read (161 samples, 1.38%)</title><rect x="780.2" y="547.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (116 samples, 0.99%)</title><rect x="784.7" y="531.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.7" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (19 samples, 0.16%)</title><rect x="794.5" y="515.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="797.5" y="526.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (7 samples, 0.06%)</title><rect x="796.4" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="796.4" y="547.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="796.5" y="531.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.5" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.05%)</title><rect x="796.5" y="515.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.5" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="796.8" y="499.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="799.8" y="510.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (6 samples, 0.05%)</title><rect x="797.1" y="563.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="797.1" y="547.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="800.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="797.8" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="797.8" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="800.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserMemory.readString (15 samples, 0.13%)</title><rect x="798.2" y="595.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.2" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.extractString (8 samples, 0.07%)</title><rect x="798.2" y="579.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.07%)</title><rect x="798.2" y="563.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="798.4" y="547.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.4" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.05%)</title><rect x="798.4" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.4" y="542.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/parser/JSONParserString.indexOf (4 samples, 0.03%)</title><rect x="799.0" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="799.1" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="802.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.07%)</title><rect x="799.8" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.06%)</title><rect x="799.9" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.03%)</title><rect x="800.2" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.2" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.parse (98 samples, 0.84%)</title><rect x="800.8" y="723.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.8" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getLong (9 samples, 0.08%)</title><rect x="801.5" y="707.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.5" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (9 samples, 0.08%)</title><rect x="801.5" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.5" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getString (6 samples, 0.05%)</title><rect x="802.4" y="707.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.4" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.getGeneric (6 samples, 0.05%)</title><rect x="802.4" y="691.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.04%)</title><rect x="802.5" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.03%)</title><rect x="802.5" y="659.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="805.5" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.build (32 samples, 0.27%)</title><rect x="803.1" y="707.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.1" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (32 samples, 0.27%)</title><rect x="803.1" y="691.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="806.1" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.&lt;init&gt; (32 samples, 0.27%)</title><rect x="803.1" y="675.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putAll (31 samples, 0.26%)</title><rect x="803.1" y="659.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (31 samples, 0.26%)</title><rect x="803.1" y="643.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.08%)</title><rect x="804.1" y="627.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="804.3" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.3" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (4 samples, 0.03%)</title><rect x="804.6" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.6" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (3 samples, 0.03%)</title><rect x="805.3" y="627.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.3" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (3 samples, 0.03%)</title><rect x="805.9" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.9" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.claim (11 samples, 0.09%)</title><rect x="806.3" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 0.09%)</title><rect x="806.3" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.05%)</title><rect x="806.3" y="675.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.05%)</title><rect x="806.3" y="659.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.04%)</title><rect x="806.9" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.9" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issueTime (4 samples, 0.03%)</title><rect x="807.4" y="707.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="807.5" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.5" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.issuer (13 samples, 0.11%)</title><rect x="807.8" y="707.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.11%)</title><rect x="807.8" y="691.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.11%)</title><rect x="807.8" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.8" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet$Builder.subject (9 samples, 0.08%)</title><rect x="809.1" y="707.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="812.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.08%)</title><rect x="809.1" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.07%)</title><rect x="809.2" y="675.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.04%)</title><rect x="810.0" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.04%)</title><rect x="810.0" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="813.0" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.selectKeys (580 samples, 4.96%)</title><rect x="810.7" y="755.0" width="58.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.7" y="766.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.selectJWSKeys (574 samples, 4.91%)</title><rect x="811.1" y="739.0" width="57.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.1" y="750.0">com/ni..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyConverter.toJavaKeys (439 samples, 3.75%)</title><rect x="811.9" y="723.0" width="44.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.9" y="734.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toKeyPair (422 samples, 3.61%)</title><rect x="812.1" y="707.0" width="42.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.1" y="718.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/jwk/RSAKey.toRSAPublicKey (421 samples, 3.60%)</title><rect x="812.2" y="691.0" width="42.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.2" y="702.0">com/..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decodeToBigInteger (233 samples, 1.99%)</title><rect x="812.4" y="675.0" width="23.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.4" y="686.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64.decode (229 samples, 1.96%)</title><rect x="812.5" y="659.0" width="23.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.5" y="670.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decode (228 samples, 1.95%)</title><rect x="812.6" y="643.0" width="23.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.6" y="654.0">c..</text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.decodeDigit (124 samples, 1.06%)</title><rect x="820.7" y="627.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.7" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.tpGT (4 samples, 0.03%)</title><rect x="832.8" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="835.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (20 samples, 0.17%)</title><rect x="833.2" y="627.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (20 samples, 0.17%)</title><rect x="833.2" y="611.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="836.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (10 samples, 0.09%)</title><rect x="833.5" y="595.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="836.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (7 samples, 0.06%)</title><rect x="834.5" y="595.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="834.6" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="834.6" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.6" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (6 samples, 0.05%)</title><rect x="834.6" y="547.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.6" y="558.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="834.7" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.7" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="835.3" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.3" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (3 samples, 0.03%)</title><rect x="835.6" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="838.6" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (3 samples, 0.03%)</title><rect x="835.6" y="643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.6" y="654.0"></text>
</g>
<g>
<title>java/security/KeyFactory.generatePublic (96 samples, 0.82%)</title><rect x="835.9" y="675.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.9" y="686.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.engineGeneratePublic (94 samples, 0.80%)</title><rect x="836.1" y="659.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.1" y="670.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyFactory.generatePublic (94 samples, 0.80%)</title><rect x="836.1" y="643.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.1" y="654.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.&lt;init&gt; (91 samples, 0.78%)</title><rect x="836.4" y="627.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.4" y="638.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAPublicKeyImpl.checkExponentRange (20 samples, 0.17%)</title><rect x="837.2" y="611.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.2" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareTo (19 samples, 0.16%)</title><rect x="837.3" y="595.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.3" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.compareMagnitude (16 samples, 0.14%)</title><rect x="837.6" y="579.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="840.6" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putInteger (31 samples, 0.26%)</title><rect x="839.4" y="611.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="842.4" y="622.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (16 samples, 0.14%)</title><rect x="839.5" y="595.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="842.5" y="606.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (13 samples, 0.11%)</title><rect x="839.8" y="579.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.8" y="590.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (13 samples, 0.11%)</title><rect x="839.8" y="563.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="842.8" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.11%)</title><rect x="839.8" y="547.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="842.8" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="840.5" y="531.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="843.5" y="542.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putLength (3 samples, 0.03%)</title><rect x="840.8" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.8" y="542.0"></text>
</g>
<g>
<title>java/math/BigInteger.toByteArray (6 samples, 0.05%)</title><rect x="841.1" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.1" y="606.0"></text>
</g>
<g>
<title>java/math/BigInteger.bitLength (3 samples, 0.03%)</title><rect x="841.2" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="844.2" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.putLength (6 samples, 0.05%)</title><rect x="841.9" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.9" y="606.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.&lt;init&gt; (3 samples, 0.03%)</title><rect x="842.5" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.5" y="622.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.toByteArray (28 samples, 0.24%)</title><rect x="842.8" y="611.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.8" y="622.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.toByteArray (3 samples, 0.03%)</title><rect x="843.1" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.1" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="843.1" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.1" y="590.0"></text>
</g>
<g>
<title>sun/security/util/DerOutputStream.&lt;init&gt; (5 samples, 0.04%)</title><rect x="843.4" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.4" y="606.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.&lt;init&gt; (5 samples, 0.04%)</title><rect x="843.4" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.4" y="590.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.&lt;init&gt; (5 samples, 0.04%)</title><rect x="843.4" y="563.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.4" y="574.0"></text>
</g>
<g>
<title>sun/security/util/DerValue.encode (17 samples, 0.15%)</title><rect x="843.9" y="595.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.9" y="606.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (4 samples, 0.03%)</title><rect x="844.7" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="847.7" y="590.0"></text>
</g>
<g>
<title>java/io/OutputStream.write (4 samples, 0.03%)</title><rect x="845.1" y="579.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.1" y="590.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (3 samples, 0.03%)</title><rect x="845.2" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.2" y="574.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (3 samples, 0.03%)</title><rect x="845.2" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.2" y="558.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (3 samples, 0.03%)</title><rect x="845.2" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="845.2" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="848.2" y="526.0"></text>
</g>
<g>
<title>java/security/KeyFactory.getInstance (90 samples, 0.77%)</title><rect x="845.6" y="675.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="848.6" y="686.0"></text>
</g>
<g>
<title>java/security/KeyFactory.&lt;init&gt; (89 samples, 0.76%)</title><rect x="845.7" y="659.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="848.7" y="670.0"></text>
</g>
<g>
<title>java/security/KeyFactory.nextSpi (83 samples, 0.71%)</title><rect x="846.1" y="643.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.1" y="654.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (33 samples, 0.28%)</title><rect x="846.3" y="627.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="849.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (17 samples, 0.15%)</title><rect x="846.6" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="849.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (17 samples, 0.15%)</title><rect x="846.6" y="595.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (12 samples, 0.10%)</title><rect x="846.6" y="579.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="849.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (11 samples, 0.09%)</title><rect x="846.7" y="563.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.7" y="574.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (4 samples, 0.03%)</title><rect x="847.2" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.2" y="558.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyConstructor (4 samples, 0.03%)</title><rect x="847.9" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.9" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyConstructor (3 samples, 0.03%)</title><rect x="848.0" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.0" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (3 samples, 0.03%)</title><rect x="848.0" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.0" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.04%)</title><rect x="848.3" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.3" y="622.0"></text>
</g>
<g>
<title>sun/reflect/Reflection.quickCheckMemberAccess (3 samples, 0.03%)</title><rect x="848.5" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.5" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Modifier.isPublic (3 samples, 0.03%)</title><rect x="848.5" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.5" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (5 samples, 0.04%)</title><rect x="848.8" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="849.3" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.3" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList$1.hasNext (48 samples, 0.41%)</title><rect x="849.6" y="627.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.6" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.access$200 (48 samples, 0.41%)</title><rect x="849.6" y="611.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.6" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList$ServiceList.tryGet (48 samples, 0.41%)</title><rect x="849.6" y="595.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.6" y="606.0"></text>
</g>
<g>
<title>java/security/Provider.getService (31 samples, 0.26%)</title><rect x="850.4" y="579.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.4" y="590.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.07%)</title><rect x="851.6" y="563.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.6" y="574.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (8 samples, 0.07%)</title><rect x="851.6" y="547.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="854.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.toUpperCase (7 samples, 0.06%)</title><rect x="851.7" y="531.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.7" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCaseEx (3 samples, 0.03%)</title><rect x="852.1" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.1" y="526.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCaseEx (3 samples, 0.03%)</title><rect x="852.1" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.1" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (10 samples, 0.09%)</title><rect x="852.5" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.07%)</title><rect x="852.5" y="547.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.5" y="558.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (3 samples, 0.03%)</title><rect x="853.0" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.0" y="542.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (8 samples, 0.07%)</title><rect x="853.7" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="856.7" y="590.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (8 samples, 0.07%)</title><rect x="853.7" y="563.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="856.7" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.hasNext (11 samples, 0.09%)</title><rect x="854.9" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="857.9" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.matches (3 samples, 0.03%)</title><rect x="855.7" y="691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="858.7" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/source/ImmutableJWKSet.get (17 samples, 0.15%)</title><rect x="856.2" y="723.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.2" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKSelector.select (17 samples, 0.15%)</title><rect x="856.2" y="707.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.2" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.matches (13 samples, 0.11%)</title><rect x="856.5" y="691.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="859.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (8 samples, 0.07%)</title><rect x="857.0" y="675.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (7 samples, 0.06%)</title><rect x="857.1" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="857.1" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.03%)</title><rect x="857.4" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="860.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/proc/JWSVerificationKeySelector.createJWKMatcher (98 samples, 0.84%)</title><rect x="857.9" y="723.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.9" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher.forJWSHeader (96 samples, 0.82%)</title><rect x="857.9" y="707.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.9" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.algorithms (10 samples, 0.09%)</title><rect x="858.5" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.5" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (9 samples, 0.08%)</title><rect x="858.6" y="675.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.6" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (9 samples, 0.08%)</title><rect x="858.6" y="659.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.06%)</title><rect x="858.8" y="643.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.06%)</title><rect x="858.8" y="627.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.03%)</title><rect x="858.8" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="861.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.hashCode (3 samples, 0.03%)</title><rect x="858.9" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="861.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="859.2" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.2" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyID (11 samples, 0.09%)</title><rect x="859.7" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (11 samples, 0.09%)</title><rect x="859.7" y="675.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.7" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (6 samples, 0.05%)</title><rect x="860.0" y="659.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.0" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (3 samples, 0.03%)</title><rect x="860.0" y="643.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (3 samples, 0.03%)</title><rect x="860.0" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="860.0" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="860.3" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="863.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="860.3" y="627.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="863.3" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyType (26 samples, 0.22%)</title><rect x="860.8" y="691.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="863.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (24 samples, 0.21%)</title><rect x="861.0" y="675.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.0" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (21 samples, 0.18%)</title><rect x="861.2" y="659.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="864.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.iterator (8 samples, 0.07%)</title><rect x="861.8" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (7 samples, 0.06%)</title><rect x="861.9" y="627.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="864.9" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.hashCode (6 samples, 0.05%)</title><rect x="862.0" y="611.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="865.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.06%)</title><rect x="862.7" y="643.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="865.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.06%)</title><rect x="862.7" y="627.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="865.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="862.7" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.03%)</title><rect x="863.0" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.03%)</title><rect x="863.0" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.0" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/JWKMatcher$Builder.keyUses (22 samples, 0.19%)</title><rect x="863.5" y="691.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.5" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (20 samples, 0.17%)</title><rect x="863.7" y="675.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.7" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (16 samples, 0.14%)</title><rect x="863.8" y="659.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (10 samples, 0.09%)</title><rect x="864.4" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.09%)</title><rect x="864.4" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="867.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.06%)</title><rect x="864.4" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="867.4" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyUse.hashCode (5 samples, 0.04%)</title><rect x="864.6" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="865.1" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="868.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.03%)</title><rect x="865.4" y="659.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="868.4" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (3 samples, 0.03%)</title><rect x="865.4" y="643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.4" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/jwk/KeyType.forAlgorithm (4 samples, 0.03%)</title><rect x="865.7" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (4 samples, 0.03%)</title><rect x="865.7" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="868.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.03%)</title><rect x="865.8" y="659.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="865.8" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (14 samples, 0.12%)</title><rect x="866.2" y="691.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="869.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (14 samples, 0.12%)</title><rect x="866.2" y="675.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.11%)</title><rect x="866.2" y="659.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.2" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (4 samples, 0.03%)</title><rect x="867.1" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.1" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSHeader.getAlgorithm (3 samples, 0.03%)</title><rect x="867.2" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.2" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (3 samples, 0.03%)</title><rect x="867.9" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.9" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (3 samples, 0.03%)</title><rect x="867.9" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.9" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (3 samples, 0.03%)</title><rect x="867.9" y="691.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonSet.contains (3 samples, 0.03%)</title><rect x="868.2" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="871.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.eq (3 samples, 0.03%)</title><rect x="868.2" y="707.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.2" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Algorithm.equals (3 samples, 0.03%)</title><rect x="868.2" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.2" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (4 samples, 0.03%)</title><rect x="868.6" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="871.6" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (4 samples, 0.03%)</title><rect x="868.6" y="707.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.6" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (4 samples, 0.03%)</title><rect x="868.6" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.03%)</title><rect x="868.6" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.6" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.verifyClaims (44 samples, 0.38%)</title><rect x="869.2" y="755.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="872.2" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTClaimsVerifier.verify (42 samples, 0.36%)</title><rect x="869.3" y="739.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="872.3" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/JWTClaimsSet.getClaims (6 samples, 0.05%)</title><rect x="869.5" y="723.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="872.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (3 samples, 0.03%)</title><rect x="869.8" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="872.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.containsAll (22 samples, 0.19%)</title><rect x="870.2" y="723.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.2" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (20 samples, 0.17%)</title><rect x="870.4" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (17 samples, 0.15%)</title><rect x="870.4" y="691.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="873.4" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="870.5" y="675.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="873.5" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.10%)</title><rect x="870.9" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.9" y="686.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.04%)</title><rect x="871.0" y="659.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="874.0" y="670.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.03%)</title><rect x="871.1" y="643.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="874.1" y="654.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (6 samples, 0.05%)</title><rect x="871.5" y="659.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="874.5" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (3 samples, 0.03%)</title><rect x="872.1" y="691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="872.1" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.03%)</title><rect x="872.1" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.1" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.keySet (6 samples, 0.05%)</title><rect x="872.6" y="723.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="875.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableSet (4 samples, 0.03%)</title><rect x="872.6" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.&lt;init&gt; (4 samples, 0.03%)</title><rect x="872.6" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="875.6" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (3 samples, 0.03%)</title><rect x="872.7" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.7" y="686.0"></text>
</g>
<g>
<title>com/yueki/jmh_generated/SignedJwtBenchmark_JwtProcessor_medium_jmhTest._jmh_tryInit_f_signedjwtbenchmark0_0 (416 samples, 3.56%)</title><rect x="873.7" y="851.0" width="42.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="876.7" y="862.0">com..</text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.setup (415 samples, 3.55%)</title><rect x="873.7" y="835.0" width="41.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="876.7" y="846.0">com..</text>
</g>
<g>
<title>com/nimbusds/jwt/proc/DefaultJWTProcessor.&lt;init&gt; (4 samples, 0.03%)</title><rect x="873.9" y="819.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.9" y="830.0"></text>
</g>
<g>
<title>com/yueki/SignedJwtBenchmark.getSignedJwt (346 samples, 2.96%)</title><rect x="874.4" y="819.0" width="34.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="877.4" y="830.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="874.9" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.9" y="814.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.serialize (3 samples, 0.03%)</title><rect x="874.9" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="877.9" y="798.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.sign (293 samples, 2.50%)</title><rect x="875.2" y="803.0" width="29.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="878.2" y="814.0">co..</text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.getSigningInput (3 samples, 0.03%)</title><rect x="875.4" y="787.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="878.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="875.4" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.03%)</title><rect x="875.4" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="878.4" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/crypto/RSASSASigner.sign (288 samples, 2.46%)</title><rect x="875.7" y="787.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="878.7" y="798.0">co..</text>
</g>
<g>
<title>java/security/Signature.initSign (9 samples, 0.08%)</title><rect x="876.0" y="771.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="879.0" y="782.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineInitSign (9 samples, 0.08%)</title><rect x="876.0" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="879.0" y="766.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.chooseProvider (9 samples, 0.08%)</title><rect x="876.0" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.0" y="750.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.newInstance (8 samples, 0.07%)</title><rect x="876.1" y="723.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="879.1" y="734.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (7 samples, 0.06%)</title><rect x="876.2" y="707.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="879.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (4 samples, 0.03%)</title><rect x="876.2" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="879.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (3 samples, 0.03%)</title><rect x="876.2" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.2" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.getParameterTypes (3 samples, 0.03%)</title><rect x="876.2" y="659.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.clone (3 samples, 0.03%)</title><rect x="876.2" y="643.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="879.2" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.03%)</title><rect x="876.6" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.6" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.03%)</title><rect x="876.6" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.6" y="686.0"></text>
</g>
<g>
<title>java/security/Signature.sign (267 samples, 2.28%)</title><rect x="876.9" y="771.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="879.9" y="782.0">j..</text>
</g>
<g>
<title>java/security/Signature$Delegate.engineSign (267 samples, 2.28%)</title><rect x="876.9" y="755.0" width="26.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.9" y="766.0">j..</text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineSign (267 samples, 2.28%)</title><rect x="876.9" y="739.0" width="26.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.9" y="750.0">s..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.rsa (265 samples, 2.26%)</title><rect x="876.9" y="723.0" width="26.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="879.9" y="734.0">s..</text>
</g>
<g>
<title>sun/security/rsa/RSACore.crtCrypt (265 samples, 2.26%)</title><rect x="876.9" y="707.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.9" y="718.0">s..</text>
</g>
<g>
<title>java/math/BigInteger.mod (11 samples, 0.09%)</title><rect x="877.0" y="691.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="880.0" y="702.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (11 samples, 0.09%)</title><rect x="877.0" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="880.0" y="686.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (11 samples, 0.09%)</title><rect x="877.0" y="659.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.0" y="670.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (10 samples, 0.09%)</title><rect x="877.1" y="643.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="880.1" y="654.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (10 samples, 0.09%)</title><rect x="877.1" y="627.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="880.1" y="638.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (8 samples, 0.07%)</title><rect x="877.3" y="611.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="880.3" y="622.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (248 samples, 2.12%)</title><rect x="878.1" y="691.0" width="25.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.1" y="702.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (246 samples, 2.10%)</title><rect x="878.3" y="675.0" width="24.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="881.3" y="686.0">j..</text>
</g>
<g>
<title>SharedRuntime::montgomery_multiply(int*, int*, int*, int, long, int*) (30 samples, 0.26%)</title><rect x="879.3" y="659.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.3" y="670.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (28 samples, 0.24%)</title><rect x="879.5" y="643.0" width="2.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="882.5" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (178 samples, 1.52%)</title><rect x="882.3" y="659.0" width="18.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.3" y="670.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (165 samples, 1.41%)</title><rect x="883.3" y="643.0" width="16.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="886.3" y="654.0"></text>
</g>
<g>
<title>montgomery_square(unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (3 samples, 0.03%)</title><rect x="900.0" y="643.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="903.0" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.montReduce (4 samples, 0.03%)</title><rect x="900.4" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.4" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.addOne (4 samples, 0.03%)</title><rect x="900.4" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.4" y="654.0"></text>
</g>
<g>
<title>mulAdd (3 samples, 0.03%)</title><rect x="900.5" y="627.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="903.5" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (7 samples, 0.06%)</title><rect x="900.8" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.8" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiplyChecks (3 samples, 0.03%)</title><rect x="901.0" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.0" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (13 samples, 0.11%)</title><rect x="901.5" y="659.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="904.5" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (12 samples, 0.10%)</title><rect x="901.6" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="904.6" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (12 samples, 0.10%)</title><rect x="901.6" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.6" y="638.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (10 samples, 0.09%)</title><rect x="901.8" y="611.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="904.8" y="622.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (3 samples, 0.03%)</title><rect x="902.8" y="659.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="905.8" y="670.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (3 samples, 0.03%)</title><rect x="902.8" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="905.8" y="654.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (3 samples, 0.03%)</title><rect x="902.8" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.8" y="638.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (3 samples, 0.03%)</title><rect x="902.8" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="905.8" y="622.0"></text>
</g>
<g>
<title>sun/security/rsa/RSACore.getBlindingRandomPair (3 samples, 0.03%)</title><rect x="903.1" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.1" y="702.0"></text>
</g>
<g>
<title>java/security/Signature.update (9 samples, 0.08%)</title><rect x="903.8" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.8" y="782.0"></text>
</g>
<g>
<title>java/security/Signature.update (9 samples, 0.08%)</title><rect x="903.8" y="755.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.8" y="766.0"></text>
</g>
<g>
<title>java/security/Signature$Delegate.engineUpdate (9 samples, 0.08%)</title><rect x="903.8" y="739.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.8" y="750.0"></text>
</g>
<g>
<title>sun/security/rsa/RSASignature.engineUpdate (9 samples, 0.08%)</title><rect x="903.8" y="723.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="906.8" y="734.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (9 samples, 0.08%)</title><rect x="903.8" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.8" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (8 samples, 0.07%)</title><rect x="903.9" y="691.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.9" y="702.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (8 samples, 0.07%)</title><rect x="903.9" y="675.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.9" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (8 samples, 0.07%)</title><rect x="903.9" y="659.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.9" y="670.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (8 samples, 0.07%)</title><rect x="903.9" y="643.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.9" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jwt/SignedJWT.&lt;init&gt; (28 samples, 0.24%)</title><rect x="904.9" y="803.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="907.9" y="814.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.&lt;init&gt; (27 samples, 0.23%)</title><rect x="904.9" y="787.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.9" y="798.0"></text>
</g>
<g>
<title>com/nimbusds/jose/JWSObject.composeSigningInput (26 samples, 0.22%)</title><rect x="904.9" y="771.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="907.9" y="782.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toBase64URL (7 samples, 0.06%)</title><rect x="904.9" y="755.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="907.9" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Header.toString (6 samples, 0.05%)</title><rect x="904.9" y="739.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.9" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (6 samples, 0.05%)</title><rect x="904.9" y="723.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="907.9" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (5 samples, 0.04%)</title><rect x="904.9" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="907.9" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.&lt;clinit&gt; (4 samples, 0.03%)</title><rect x="905.0" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="908.0" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.&lt;init&gt; (3 samples, 0.03%)</title><rect x="905.1" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.1" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBase64URL (19 samples, 0.16%)</title><rect x="905.6" y="755.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.6" y="766.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toBytes (13 samples, 0.11%)</title><rect x="905.6" y="739.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="908.6" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/Payload.toString (11 samples, 0.09%)</title><rect x="905.8" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.8" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/JSONObjectUtils.toJSONString (11 samples, 0.09%)</title><rect x="905.8" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="908.8" y="718.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (11 samples, 0.09%)</title><rect x="905.8" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.8" y="702.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.toJSONString (11 samples, 0.09%)</title><rect x="905.8" y="675.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.8" y="686.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONObject.writeJSON (10 samples, 0.09%)</title><rect x="905.8" y="659.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.8" y="670.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (10 samples, 0.09%)</title><rect x="905.8" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="908.8" y="654.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter$7.writeJSONString (10 samples, 0.09%)</title><rect x="905.8" y="627.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.8" y="638.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/reader/JsonWriter.writeJSONKV (10 samples, 0.09%)</title><rect x="905.8" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.8" y="622.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.writeString (9 samples, 0.08%)</title><rect x="905.8" y="595.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.8" y="606.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONValue.escape (9 samples, 0.08%)</title><rect x="905.8" y="579.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.8" y="590.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JSONStyle.escape (9 samples, 0.08%)</title><rect x="905.8" y="563.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.8" y="574.0"></text>
</g>
<g>
<title>com/nimbusds/jose/shaded/json/JStylerObj$Escape4Web.escape (9 samples, 0.08%)</title><rect x="905.8" y="547.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.8" y="558.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64URL.encode (6 samples, 0.05%)</title><rect x="906.9" y="739.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.9" y="750.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeToString (6 samples, 0.05%)</title><rect x="906.9" y="723.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.9" y="734.0"></text>
</g>
<g>
<title>com/nimbusds/jose/util/Base64Codec.encodeDigitBase64URL (3 samples, 0.03%)</title><rect x="907.0" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.0" y="718.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (8 samples, 0.07%)</title><rect x="907.7" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="910.7" y="814.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (6 samples, 0.05%)</title><rect x="907.9" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.9" y="798.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.randomAscii (6 samples, 0.05%)</title><rect x="908.6" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.6" y="814.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (6 samples, 0.05%)</title><rect x="908.6" y="787.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.6" y="798.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/RandomStringUtils.random (6 samples, 0.05%)</title><rect x="908.6" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.6" y="782.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator.genKeyPair (61 samples, 0.52%)</title><rect x="909.2" y="819.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="912.2" y="830.0"></text>
</g>
<g>
<title>java/security/KeyPairGenerator$Delegate.generateKeyPair (61 samples, 0.52%)</title><rect x="909.2" y="803.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.2" y="814.0"></text>
</g>
<g>
<title>sun/security/rsa/RSAKeyPairGenerator.generateKeyPair (61 samples, 0.52%)</title><rect x="909.2" y="787.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.2" y="798.0"></text>
</g>
<g>
<title>java/math/BigInteger.probablePrime (59 samples, 0.50%)</title><rect x="909.3" y="771.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.3" y="782.0"></text>
</g>
<g>
<title>java/math/BigInteger.largePrime (59 samples, 0.50%)</title><rect x="909.3" y="755.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="912.3" y="766.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;clinit&gt; (5 samples, 0.04%)</title><rect x="909.3" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.3" y="750.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (5 samples, 0.04%)</title><rect x="909.3" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.3" y="734.0"></text>
</g>
<g>
<title>java/math/BitSieve.sieveSingle (5 samples, 0.04%)</title><rect x="909.3" y="707.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.3" y="718.0"></text>
</g>
<g>
<title>java/math/BitSieve.set (5 samples, 0.04%)</title><rect x="909.3" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.3" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (5 samples, 0.04%)</title><rect x="909.3" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="912.3" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (5 samples, 0.04%)</title><rect x="909.3" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.3" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (5 samples, 0.04%)</title><rect x="909.3" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="912.3" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (5 samples, 0.04%)</title><rect x="909.3" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.3" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (4 samples, 0.03%)</title><rect x="909.3" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.3" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (3 samples, 0.03%)</title><rect x="909.4" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.4" y="606.0"></text>
</g>
<g>
<title>java/math/BitSieve.&lt;init&gt; (3 samples, 0.03%)</title><rect x="909.8" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="912.8" y="750.0"></text>
</g>
<g>
<title>java/math/BitSieve.retrieve (51 samples, 0.44%)</title><rect x="910.2" y="739.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.2" y="750.0"></text>
</g>
<g>
<title>java/math/BigInteger.primeToCertainty (51 samples, 0.44%)</title><rect x="910.2" y="723.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.2" y="734.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesLucasLehmer (20 samples, 0.17%)</title><rect x="910.2" y="707.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.2" y="718.0"></text>
</g>
<g>
<title>java/math/BigInteger.lucasLehmerSequence (20 samples, 0.17%)</title><rect x="910.2" y="691.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="913.2" y="702.0"></text>
</g>
<g>
<title>java/math/BigInteger.mod (13 samples, 0.11%)</title><rect x="910.5" y="675.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.5" y="686.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainder (12 samples, 0.10%)</title><rect x="910.6" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="913.6" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.remainderKnuth (12 samples, 0.10%)</title><rect x="910.6" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.6" y="654.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (12 samples, 0.10%)</title><rect x="910.6" y="627.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="913.6" y="638.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (12 samples, 0.10%)</title><rect x="910.6" y="611.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.6" y="622.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (10 samples, 0.09%)</title><rect x="910.8" y="595.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.8" y="606.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.mulsub (4 samples, 0.03%)</title><rect x="911.3" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="914.3" y="590.0"></text>
</g>
<g>
<title>java/math/BigInteger.passesMillerRabin (31 samples, 0.26%)</title><rect x="912.2" y="707.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.2" y="718.0"></text>
</g>
<g>
<title>java/math/BigInteger.modPow (30 samples, 0.26%)</title><rect x="912.3" y="691.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.3" y="702.0"></text>
</g>
<g>
<title>java/math/BigInteger.oddModPow (30 samples, 0.26%)</title><rect x="912.3" y="675.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.3" y="686.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomeryMultiply (8 samples, 0.07%)</title><rect x="912.5" y="659.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.5" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomeryMultiply (7 samples, 0.06%)</title><rect x="912.5" y="643.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="915.5" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.multiplyToLen (6 samples, 0.05%)</title><rect x="912.6" y="627.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.6" y="638.0"></text>
</g>
<g>
<title>java/math/BigInteger.montgomerySquare (20 samples, 0.17%)</title><rect x="913.3" y="659.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.3" y="670.0"></text>
</g>
<g>
<title>java/math/BigInteger.implMontgomerySquare (4 samples, 0.03%)</title><rect x="913.4" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.4" y="654.0"></text>
</g>
<g>
<title>java/math/BigInteger.materialize (15 samples, 0.13%)</title><rect x="913.8" y="643.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="916.8" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::montgomery_square(int*, int*, int, long, int*) (15 samples, 0.13%)</title><rect x="913.8" y="627.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.8" y="638.0"></text>
</g>
<g>
<title>montgomery_multiply(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long, int) (15 samples, 0.13%)</title><rect x="913.8" y="611.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="916.8" y="622.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedMain.main (3 samples, 0.03%)</title><rect x="916.0" y="1059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.0" y="1070.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/ForkedRunner.run (3 samples, 0.03%)</title><rect x="916.0" y="1043.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.0" y="1054.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmarksForked (3 samples, 0.03%)</title><rect x="916.0" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="919.0" y="1038.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.doSingle (3 samples, 0.03%)</title><rect x="916.0" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="919.0" y="1022.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="916.0" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="919.0" y="1006.0"></text>
</g>
<g>
<title>org/openjdk/jmh/runner/BaseRunner.runBenchmark (3 samples, 0.03%)</title><rect x="916.0" y="979.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="919.0" y="990.0"></text>
</g>
<g>
<title>thread_start (2,714 samples, 23.19%)</title><rect x="916.3" y="1059.0" width="273.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="919.3" y="1070.0">thread_start</text>
</g>
<g>
<title>_pthread_start (2,714 samples, 23.19%)</title><rect x="916.3" y="1043.0" width="273.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="919.3" y="1054.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (2,714 samples, 23.19%)</title><rect x="916.3" y="1027.0" width="273.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="919.3" y="1038.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (2,714 samples, 23.19%)</title><rect x="916.3" y="1011.0" width="273.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="919.3" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (98 samples, 0.84%)</title><rect x="916.3" y="995.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.3" y="1006.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (32 samples, 0.27%)</title><rect x="916.4" y="979.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="919.4" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (30 samples, 0.26%)</title><rect x="916.4" y="963.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.4" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (30 samples, 0.26%)</title><rect x="916.4" y="947.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.4" y="958.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (23 samples, 0.20%)</title><rect x="916.4" y="931.0" width="2.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="919.4" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (23 samples, 0.20%)</title><rect x="916.4" y="915.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.4" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.18%)</title><rect x="916.4" y="899.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="919.4" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (6 samples, 0.05%)</title><rect x="918.8" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.8" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="918.8" y="915.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="921.8" y="926.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="919.8" y="979.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.8" y="990.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (3 samples, 0.03%)</title><rect x="919.8" y="963.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.8" y="974.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (8 samples, 0.07%)</title><rect x="920.1" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.1" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (5 samples, 0.04%)</title><rect x="920.1" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.1" y="974.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (4 samples, 0.03%)</title><rect x="920.1" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.1" y="958.0"></text>
</g>
<g>
<title>PSScavengeKlassClosure::do_klass(Klass*) (4 samples, 0.03%)</title><rect x="920.1" y="931.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.1" y="942.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (39 samples, 0.33%)</title><rect x="920.9" y="979.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.9" y="990.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (3 samples, 0.03%)</title><rect x="921.0" y="963.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.0" y="974.0"></text>
</g>
<g>
<title>PSPromotionManager::process_popped_location_depth(StarTask) (3 samples, 0.03%)</title><rect x="921.0" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.0" y="958.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="921.0" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="924.0" y="942.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="921.0" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="924.0" y="926.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="921.0" y="899.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="924.0" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (30 samples, 0.26%)</title><rect x="921.3" y="963.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.3" y="974.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (30 samples, 0.26%)</title><rect x="921.3" y="947.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="924.3" y="958.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.04%)</title><rect x="924.4" y="963.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="927.4" y="974.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.06%)</title><rect x="924.9" y="979.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.9" y="990.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (5 samples, 0.04%)</title><rect x="924.9" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.9" y="974.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (6 samples, 0.05%)</title><rect x="925.6" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.6" y="990.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (3 samples, 0.03%)</title><rect x="925.6" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.6" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="925.6" y="947.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.6" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="925.6" y="931.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.6" y="942.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.03%)</title><rect x="925.6" y="915.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="928.6" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="925.6" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="928.6" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="925.6" y="883.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="928.6" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="925.9" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.9" y="974.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="925.9" y="947.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="928.9" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (2,487 samples, 21.25%)</title><rect x="926.2" y="995.0" width="250.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.2" y="1006.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,487 samples, 21.25%)</title><rect x="926.2" y="979.0" width="250.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.2" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,473 samples, 21.13%)</title><rect x="926.2" y="963.0" width="249.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.2" y="974.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,439 samples, 20.84%)</title><rect x="926.3" y="947.0" width="246.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.3" y="958.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (2,352 samples, 20.10%)</title><rect x="926.3" y="931.0" width="237.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.3" y="942.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (2,349 samples, 20.08%)</title><rect x="926.3" y="915.0" width="236.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.3" y="926.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (4 samples, 0.03%)</title><rect x="926.3" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.3" y="910.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.03%)</title><rect x="926.3" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.3" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.03%)</title><rect x="926.3" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.3" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (568 samples, 4.85%)</title><rect x="926.7" y="899.0" width="57.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="929.7" y="910.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (27 samples, 0.23%)</title><rect x="926.7" y="883.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.7" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (18 samples, 0.15%)</title><rect x="926.7" y="867.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.7" y="878.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.03%)</title><rect x="927.9" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.9" y="862.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="928.2" y="851.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="931.2" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (8 samples, 0.07%)</title><rect x="928.5" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.5" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (6 samples, 0.05%)</title><rect x="928.6" y="851.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.6" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (20 samples, 0.17%)</title><rect x="929.4" y="883.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="932.4" y="894.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.03%)</title><rect x="929.9" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.9" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (5 samples, 0.04%)</title><rect x="930.4" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="933.4" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (4 samples, 0.03%)</title><rect x="930.5" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.5" y="862.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (3 samples, 0.03%)</title><rect x="930.9" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="933.9" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.03%)</title><rect x="930.9" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.9" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (54 samples, 0.46%)</title><rect x="931.4" y="883.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.4" y="894.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (3 samples, 0.03%)</title><rect x="931.5" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.5" y="878.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="931.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.5" y="862.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.03%)</title><rect x="931.5" y="835.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="934.5" y="846.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.03%)</title><rect x="931.5" y="819.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="934.5" y="830.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.03%)</title><rect x="931.5" y="803.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="934.5" y="814.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (8 samples, 0.07%)</title><rect x="931.9" y="867.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.9" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (40 samples, 0.34%)</title><rect x="932.7" y="867.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.7" y="878.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (13 samples, 0.11%)</title><rect x="933.2" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.2" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (14 samples, 0.12%)</title><rect x="935.0" y="851.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.0" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (6 samples, 0.05%)</title><rect x="935.2" y="835.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="938.2" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.03%)</title><rect x="935.4" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.4" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (6 samples, 0.05%)</title><rect x="935.8" y="835.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.8" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.03%)</title><rect x="935.9" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (35 samples, 0.30%)</title><rect x="937.3" y="883.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (34 samples, 0.29%)</title><rect x="937.4" y="867.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (18 samples, 0.15%)</title><rect x="937.6" y="851.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="940.6" y="862.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.03%)</title><rect x="937.9" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.9" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (6 samples, 0.05%)</title><rect x="938.2" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (6 samples, 0.05%)</title><rect x="938.8" y="835.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.8" y="846.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (3 samples, 0.03%)</title><rect x="939.1" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.1" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (6 samples, 0.05%)</title><rect x="939.4" y="851.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (426 samples, 3.64%)</title><rect x="940.9" y="883.0" width="43.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="943.9" y="894.0">Phas..</text>
</g>
<g>
<title>MachNode::Opcode() const (3 samples, 0.03%)</title><rect x="941.1" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.1" y="878.0"></text>
</g>
<g>
<title>Node::jvms() const (3 samples, 0.03%)</title><rect x="941.8" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.8" y="878.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (10 samples, 0.09%)</title><rect x="942.1" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (26 samples, 0.22%)</title><rect x="943.1" y="867.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.03%)</title><rect x="943.5" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.03%)</title><rect x="944.0" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.0" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (9 samples, 0.08%)</title><rect x="944.3" y="851.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.03%)</title><rect x="944.7" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="947.7" y="846.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (4 samples, 0.03%)</title><rect x="945.2" y="851.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (16 samples, 0.14%)</title><rect x="945.8" y="867.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.8" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (12 samples, 0.10%)</title><rect x="946.2" y="851.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.2" y="862.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (3 samples, 0.03%)</title><rect x="946.3" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="949.3" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.04%)</title><rect x="946.8" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (43 samples, 0.37%)</title><rect x="947.4" y="867.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.4" y="878.0"></text>
</g>
<g>
<title>Node::rematerialize() const (9 samples, 0.08%)</title><rect x="950.4" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.4" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (4 samples, 0.03%)</title><rect x="950.7" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (88 samples, 0.75%)</title><rect x="951.7" y="867.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.7" y="878.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (5 samples, 0.04%)</title><rect x="954.1" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="957.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="954.9" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.03%)</title><rect x="955.2" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.2" y="862.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.04%)</title><rect x="955.6" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (30 samples, 0.26%)</title><rect x="956.1" y="851.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.1" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="956.8" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="959.8" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.05%)</title><rect x="957.1" y="835.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.1" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (10 samples, 0.09%)</title><rect x="957.8" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.8" y="846.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.03%)</title><rect x="958.8" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.8" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.03%)</title><rect x="959.3" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.3" y="862.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (5 samples, 0.04%)</title><rect x="960.0" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (9 samples, 0.08%)</title><rect x="960.6" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.05%)</title><rect x="960.8" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.8" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="960.8" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (3 samples, 0.03%)</title><rect x="961.5" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (46 samples, 0.39%)</title><rect x="961.9" y="867.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.9" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.03%)</title><rect x="965.2" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.2" y="862.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (5 samples, 0.04%)</title><rect x="965.8" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.8" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.03%)</title><rect x="965.8" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="968.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (8 samples, 0.07%)</title><rect x="966.5" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (38 samples, 0.32%)</title><rect x="967.3" y="867.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (19 samples, 0.16%)</title><rect x="968.9" y="851.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.9" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (28 samples, 0.24%)</title><rect x="971.4" y="867.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.4" y="878.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (4 samples, 0.03%)</title><rect x="971.4" y="851.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.4" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (3 samples, 0.03%)</title><rect x="971.5" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (3 samples, 0.03%)</title><rect x="971.5" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.5" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (24 samples, 0.21%)</title><rect x="971.8" y="851.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.8" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (21 samples, 0.18%)</title><rect x="972.1" y="835.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.1" y="846.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.04%)</title><rect x="972.2" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.2" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (12 samples, 0.10%)</title><rect x="972.8" y="819.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.8" y="830.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.05%)</title><rect x="973.0" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.0" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="973.7" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.7" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (21 samples, 0.18%)</title><rect x="974.2" y="867.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.2" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="974.2" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.2" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (18 samples, 0.15%)</title><rect x="974.5" y="851.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.03%)</title><rect x="975.6" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="976.0" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.0" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (8 samples, 0.07%)</title><rect x="976.3" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.03%)</title><rect x="976.3" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.03%)</title><rect x="976.8" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.8" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (14 samples, 0.12%)</title><rect x="977.1" y="867.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.1" y="878.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (9 samples, 0.08%)</title><rect x="977.3" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.3" y="862.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="978.2" y="851.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="981.2" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (47 samples, 0.40%)</title><rect x="978.5" y="867.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.5" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (14 samples, 0.12%)</title><rect x="981.6" y="851.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.6" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (8 samples, 0.07%)</title><rect x="981.6" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.6" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (1,686 samples, 14.41%)</title><rect x="984.1" y="899.0" width="170.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.1" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (4 samples, 0.03%)</title><rect x="984.1" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.1" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (4 samples, 0.03%)</title><rect x="984.1" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.1" y="878.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.03%)</title><rect x="984.5" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (13 samples, 0.11%)</title><rect x="984.8" y="883.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (13 samples, 0.11%)</title><rect x="984.8" y="867.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (3 samples, 0.03%)</title><rect x="984.8" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="985.1" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (3 samples, 0.03%)</title><rect x="985.1" y="835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.04%)</title><rect x="985.4" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.03%)</title><rect x="985.4" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.03%)</title><rect x="985.5" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.5" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (10 samples, 0.09%)</title><rect x="986.2" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.03%)</title><rect x="987.2" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.03%)</title><rect x="987.2" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.2" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (3 samples, 0.03%)</title><rect x="987.2" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1,591 samples, 13.60%)</title><rect x="987.7" y="883.0" width="160.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.7" y="894.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="987.8" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.8" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="987.8" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.8" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="988.1" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.1" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="988.1" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.1" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="988.1" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.1" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="988.1" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.1" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="988.1" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="991.1" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (3 samples, 0.03%)</title><rect x="988.8" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (33 samples, 0.28%)</title><rect x="989.3" y="867.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.3" y="878.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (10 samples, 0.09%)</title><rect x="991.0" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.0" y="862.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (3 samples, 0.03%)</title><rect x="992.1" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 0.24%)</title><rect x="992.6" y="867.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1,442 samples, 12.32%)</title><rect x="995.5" y="867.0" width="145.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.5" y="878.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1,416 samples, 12.10%)</title><rect x="997.8" y="851.0" width="142.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.8" y="862.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1,402 samples, 11.98%)</title><rect x="998.4" y="835.0" width="141.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.4" y="846.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (17 samples, 0.15%)</title><rect x="1004.1" y="819.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1007.1" y="830.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (8 samples, 0.07%)</title><rect x="1004.1" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.1" y="814.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="1004.1" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.1" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.04%)</title><rect x="1004.4" y="787.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1007.4" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (9 samples, 0.08%)</title><rect x="1004.9" y="803.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1007.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (30 samples, 0.26%)</title><rect x="1006.0" y="819.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (15 samples, 0.13%)</title><rect x="1009.0" y="819.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (15 samples, 0.13%)</title><rect x="1009.0" y="803.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (10 samples, 0.09%)</title><rect x="1010.5" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1,272 samples, 10.87%)</title><rect x="1011.5" y="819.0" width="128.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.5" y="830.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (210 samples, 1.79%)</title><rect x="1029.3" y="803.0" width="21.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.3" y="814.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (886 samples, 7.57%)</title><rect x="1050.4" y="803.0" width="89.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.4" y="814.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (3 samples, 0.03%)</title><rect x="1139.8" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (5 samples, 0.04%)</title><rect x="1140.1" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (14 samples, 0.12%)</title><rect x="1140.9" y="867.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (5 samples, 0.04%)</title><rect x="1141.8" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.03%)</title><rect x="1142.3" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (22 samples, 0.19%)</title><rect x="1142.7" y="867.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (4 samples, 0.03%)</title><rect x="1143.7" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.06%)</title><rect x="1144.1" y="851.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (4 samples, 0.03%)</title><rect x="1144.4" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 0.20%)</title><rect x="1144.9" y="867.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 0.20%)</title><rect x="1144.9" y="851.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.9" y="862.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1145.1" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.1" y="846.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1145.1" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1145.8" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.03%)</title><rect x="1146.2" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.2" y="846.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1147.6" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="878.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.03%)</title><rect x="1147.6" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.6" y="862.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.03%)</title><rect x="1147.6" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (43 samples, 0.37%)</title><rect x="1148.2" y="883.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (42 samples, 0.36%)</title><rect x="1148.4" y="867.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.03%)</title><rect x="1149.8" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="862.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (8 samples, 0.07%)</title><rect x="1150.2" y="851.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.2" y="862.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (7 samples, 0.06%)</title><rect x="1150.3" y="835.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="846.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (3 samples, 0.03%)</title><rect x="1150.6" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.6" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.04%)</title><rect x="1151.5" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (5 samples, 0.04%)</title><rect x="1152.0" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (5 samples, 0.04%)</title><rect x="1152.0" y="835.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.04%)</title><rect x="1152.0" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.04%)</title><rect x="1152.0" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.0" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.03%)</title><rect x="1152.2" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.2" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1152.2" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.2" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.03%)</title><rect x="1152.6" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.03%)</title><rect x="1152.6" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (10 samples, 0.09%)</title><rect x="1152.9" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.9" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.06%)</title><rect x="1152.9" y="867.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.06%)</title><rect x="1152.9" y="851.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (3 samples, 0.03%)</title><rect x="1153.6" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="878.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (3 samples, 0.03%)</title><rect x="1154.3" y="899.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.3" y="910.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (3 samples, 0.03%)</title><rect x="1154.3" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (73 samples, 0.62%)</title><rect x="1154.7" y="899.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (73 samples, 0.62%)</title><rect x="1154.7" y="883.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (72 samples, 0.62%)</title><rect x="1154.7" y="867.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (70 samples, 0.60%)</title><rect x="1154.7" y="851.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (69 samples, 0.59%)</title><rect x="1154.8" y="835.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (65 samples, 0.56%)</title><rect x="1154.8" y="819.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (7 samples, 0.06%)</title><rect x="1154.8" y="803.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.8" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (6 samples, 0.05%)</title><rect x="1154.9" y="787.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.03%)</title><rect x="1155.0" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.03%)</title><rect x="1155.0" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (4 samples, 0.03%)</title><rect x="1155.0" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.03%)</title><rect x="1155.1" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1155.1" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1155.1" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.03%)</title><rect x="1155.1" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (46 samples, 0.39%)</title><rect x="1155.5" y="803.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (46 samples, 0.39%)</title><rect x="1155.5" y="787.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (46 samples, 0.39%)</title><rect x="1155.5" y="771.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (46 samples, 0.39%)</title><rect x="1155.5" y="755.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (45 samples, 0.38%)</title><rect x="1155.6" y="739.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (43 samples, 0.37%)</title><rect x="1155.7" y="723.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.7" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (7 samples, 0.06%)</title><rect x="1155.7" y="707.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.7" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (5 samples, 0.04%)</title><rect x="1155.9" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.23%)</title><rect x="1156.6" y="707.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.23%)</title><rect x="1156.6" y="691.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 0.21%)</title><rect x="1156.6" y="675.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.21%)</title><rect x="1156.6" y="659.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (25 samples, 0.21%)</title><rect x="1156.6" y="643.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.18%)</title><rect x="1156.9" y="627.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.9" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.03%)</title><rect x="1156.9" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.9" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.03%)</title><rect x="1156.9" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.9" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.03%)</title><rect x="1156.9" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.03%)</title><rect x="1156.9" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.03%)</title><rect x="1157.0" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.03%)</title><rect x="1157.0" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1157.0" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.03%)</title><rect x="1157.0" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.13%)</title><rect x="1157.4" y="611.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.13%)</title><rect x="1157.4" y="595.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.12%)</title><rect x="1157.4" y="579.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.12%)</title><rect x="1157.4" y="563.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.12%)</title><rect x="1157.4" y="547.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.12%)</title><rect x="1157.4" y="531.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.12%)</title><rect x="1157.4" y="515.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.12%)</title><rect x="1157.4" y="499.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.12%)</title><rect x="1157.4" y="483.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.12%)</title><rect x="1157.4" y="467.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.11%)</title><rect x="1157.5" y="451.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.09%)</title><rect x="1157.5" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.07%)</title><rect x="1157.7" y="419.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.07%)</title><rect x="1157.7" y="403.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.05%)</title><rect x="1157.8" y="387.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.05%)</title><rect x="1157.8" y="371.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.05%)</title><rect x="1157.8" y="355.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.05%)</title><rect x="1157.8" y="339.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1158.0" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1158.0" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1158.0" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1158.0" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1158.0" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1158.0" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1158.0" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1158.0" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1158.0" y="195.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1158.0" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1158.0" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1158.0" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1158.0" y="131.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.0" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1158.0" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1158.0" y="99.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1158.0" y="83.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1158.0" y="67.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1158.0" y="51.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1158.1" y="35.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1159.3" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1159.4" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1159.4" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1159.4" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1159.4" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1159.4" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1159.4" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1159.4" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1159.4" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1159.4" y="563.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1159.4" y="547.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1159.4" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1159.4" y="515.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1159.4" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1159.4" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1159.4" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.4" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (12 samples, 0.10%)</title><rect x="1160.1" y="803.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.09%)</title><rect x="1160.3" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.09%)</title><rect x="1160.3" y="771.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.09%)</title><rect x="1160.3" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.09%)</title><rect x="1160.3" y="739.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.09%)</title><rect x="1160.3" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.09%)</title><rect x="1160.3" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.08%)</title><rect x="1160.4" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.08%)</title><rect x="1160.4" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.07%)</title><rect x="1160.5" y="659.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="1160.6" y="643.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.06%)</title><rect x="1160.6" y="627.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.05%)</title><rect x="1160.6" y="611.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.04%)</title><rect x="1160.6" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.04%)</title><rect x="1160.6" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1160.6" y="563.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1160.6" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.04%)</title><rect x="1160.6" y="531.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1160.6" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1160.6" y="499.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1160.6" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1160.6" y="467.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1160.6" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1160.6" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1160.6" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1160.6" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1160.6" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1160.6" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1160.6" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1160.6" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.03%)</title><rect x="1161.4" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (6 samples, 0.05%)</title><rect x="1162.5" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="910.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (3 samples, 0.03%)</title><rect x="1162.8" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (3 samples, 0.03%)</title><rect x="1162.8" y="867.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.8" y="878.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1162.8" y="851.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 0.64%)</title><rect x="1163.7" y="931.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (74 samples, 0.63%)</title><rect x="1163.7" y="915.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (74 samples, 0.63%)</title><rect x="1163.7" y="899.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (60 samples, 0.51%)</title><rect x="1163.7" y="883.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>Compilation::build_hir() (25 samples, 0.21%)</title><rect x="1163.7" y="867.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="878.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (23 samples, 0.20%)</title><rect x="1163.7" y="851.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (23 samples, 0.20%)</title><rect x="1163.7" y="835.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (22 samples, 0.19%)</title><rect x="1163.7" y="819.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (22 samples, 0.19%)</title><rect x="1163.7" y="803.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (22 samples, 0.19%)</title><rect x="1163.7" y="787.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (20 samples, 0.17%)</title><rect x="1163.7" y="771.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (11 samples, 0.09%)</title><rect x="1163.8" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (10 samples, 0.09%)</title><rect x="1163.9" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (8 samples, 0.07%)</title><rect x="1163.9" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 0.07%)</title><rect x="1163.9" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.06%)</title><rect x="1164.0" y="691.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (6 samples, 0.05%)</title><rect x="1164.0" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.03%)</title><rect x="1164.2" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1164.2" y="643.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (6 samples, 0.05%)</title><rect x="1165.0" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (6 samples, 0.05%)</title><rect x="1165.0" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (6 samples, 0.05%)</title><rect x="1165.0" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (4 samples, 0.03%)</title><rect x="1165.2" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (4 samples, 0.03%)</title><rect x="1165.2" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.2" y="702.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (4 samples, 0.03%)</title><rect x="1165.2" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (3 samples, 0.03%)</title><rect x="1165.3" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.3" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (11 samples, 0.09%)</title><rect x="1166.2" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.2" y="878.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (9 samples, 0.08%)</title><rect x="1166.4" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.4" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (8 samples, 0.07%)</title><rect x="1166.4" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.4" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (24 samples, 0.21%)</title><rect x="1167.3" y="867.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.3" y="878.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (5 samples, 0.04%)</title><rect x="1167.3" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.3" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (5 samples, 0.04%)</title><rect x="1167.3" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="846.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (5 samples, 0.04%)</title><rect x="1167.3" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="830.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (19 samples, 0.16%)</title><rect x="1167.8" y="851.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="862.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (4 samples, 0.03%)</title><rect x="1167.8" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="846.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (4 samples, 0.03%)</title><rect x="1167.8" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="830.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.03%)</title><rect x="1167.9" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="814.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (7 samples, 0.06%)</title><rect x="1168.4" y="835.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.4" y="846.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (14 samples, 0.12%)</title><rect x="1169.7" y="883.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (14 samples, 0.12%)</title><rect x="1169.7" y="867.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="878.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1170.0" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.0" y="862.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (8 samples, 0.07%)</title><rect x="1170.3" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.03%)</title><rect x="1170.3" y="835.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.03%)</title><rect x="1170.3" y="819.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (5 samples, 0.04%)</title><rect x="1170.6" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="1170.6" y="819.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.04%)</title><rect x="1171.3" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="942.0"></text>
</g>
<g>
<title>Chunk::next_chop() (5 samples, 0.04%)</title><rect x="1171.3" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="926.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (5 samples, 0.04%)</title><rect x="1171.3" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="910.0"></text>
</g>
<g>
<title>free_large (5 samples, 0.04%)</title><rect x="1171.3" y="883.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (5 samples, 0.04%)</title><rect x="1171.3" y="867.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1174.3" y="878.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (5 samples, 0.04%)</title><rect x="1171.3" y="851.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1174.3" y="862.0"></text>
</g>
<g>
<title>CompileQueue::get() (31 samples, 0.26%)</title><rect x="1172.3" y="947.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (29 samples, 0.25%)</title><rect x="1172.3" y="931.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.3" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (29 samples, 0.25%)</title><rect x="1172.3" y="915.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (28 samples, 0.24%)</title><rect x="1172.4" y="899.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (27 samples, 0.23%)</title><rect x="1172.4" y="883.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1175.4" y="894.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (13 samples, 0.11%)</title><rect x="1175.7" y="963.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="974.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.04%)</title><rect x="1175.7" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="958.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.04%)</title><rect x="1175.7" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="942.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.03%)</title><rect x="1175.8" y="915.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.07%)</title><rect x="1176.2" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.07%)</title><rect x="1176.2" y="931.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="942.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (8 samples, 0.07%)</title><rect x="1176.2" y="915.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.2" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (8 samples, 0.07%)</title><rect x="1176.2" y="899.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.07%)</title><rect x="1176.2" y="883.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (49 samples, 0.42%)</title><rect x="1177.1" y="995.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (49 samples, 0.42%)</title><rect x="1177.1" y="979.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.03%)</title><rect x="1177.1" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.03%)</title><rect x="1177.1" y="947.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.03%)</title><rect x="1177.1" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="1177.1" y="915.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (16 samples, 0.14%)</title><rect x="1177.5" y="963.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>os::NakedYield() (15 samples, 0.13%)</title><rect x="1177.6" y="947.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>xdrmem_ops_aligned (15 samples, 0.13%)</title><rect x="1177.6" y="931.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (28 samples, 0.24%)</title><rect x="1179.2" y="963.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="974.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (28 samples, 0.24%)</title><rect x="1179.2" y="947.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.2" y="958.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (28 samples, 0.24%)</title><rect x="1179.2" y="931.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="942.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (28 samples, 0.24%)</title><rect x="1179.2" y="915.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="926.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (28 samples, 0.24%)</title><rect x="1179.2" y="899.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="910.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (28 samples, 0.24%)</title><rect x="1179.2" y="883.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="894.0"></text>
</g>
<g>
<title>GCTaskManager::execute_and_wait(GCTaskQueue*) (4 samples, 0.03%)</title><rect x="1179.4" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="878.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::wait_for(bool) (4 samples, 0.03%)</title><rect x="1179.4" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.03%)</title><rect x="1179.4" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.03%)</title><rect x="1179.4" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 0.03%)</title><rect x="1179.4" y="803.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.03%)</title><rect x="1179.4" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="1179.4" y="771.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (17 samples, 0.15%)</title><rect x="1180.3" y="867.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="878.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (15 samples, 0.13%)</title><rect x="1180.5" y="851.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (78 samples, 0.67%)</title><rect x="1182.0" y="995.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1006.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (5 samples, 0.04%)</title><rect x="1182.0" y="979.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="990.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (73 samples, 0.62%)</title><rect x="1182.5" y="979.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (72 samples, 0.62%)</title><rect x="1182.6" y="963.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (71 samples, 0.61%)</title><rect x="1182.7" y="947.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (69 samples, 0.59%)</title><rect x="1182.9" y="931.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (66 samples, 0.56%)</title><rect x="1183.0" y="915.0" width="6.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
</g>
</svg>

